
microTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000046e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800104  00800104  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d03  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000929  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000570  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  9e:	0c 94 35 02 	jmp	0x46a	; 0x46a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9initTimerv>:
}
*/

unsigned long ovfCount = 0;
void initTimer(){
	TCCR1B |= (1 << CS11); //Set Prescale to 8
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1); //Enable the Overflow Interrupt
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	TCNT1 = 0;
  ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//Enable Interrupts
	sei();
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <_Z5Microv>:
}

long Micro() {
	return (TCNT1 / 2) + ((ovfCount * 65534 ) / 2);
  c6:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  ca:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
  d2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
  d6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end+0x2>
  da:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x3>
  de:	ae ef       	ldi	r26, 0xFE	; 254
  e0:	bf ef       	ldi	r27, 0xFF	; 255
  e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__muluhisi3>
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	b6 95       	lsr	r27
  ec:	a7 95       	ror	r26
  ee:	97 95       	ror	r25
  f0:	87 95       	ror	r24
  f2:	f6 95       	lsr	r31
  f4:	e7 95       	ror	r30
  f6:	bc 01       	movw	r22, r24
  f8:	cd 01       	movw	r24, r26
  fa:	6e 0f       	add	r22, r30
  fc:	7f 1f       	adc	r23, r31
  fe:	81 1d       	adc	r24, r1
 100:	91 1d       	adc	r25, r1
}
 102:	08 95       	ret

00000104 <__vector_13>:

ISR(TIMER1_OVF_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
	ovfCount++;
 116:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 11a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 11e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 122:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 130:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 134:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 138:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_16>:
	cli();
	m = timer0_millis;
	//SREG = oldSREG;
	sei();
	return m;
}
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
 168:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
 16c:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
 170:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
 174:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <_ZL12timer0_fract>
 178:	23 e0       	ldi	r18, 0x03	; 3
 17a:	23 0f       	add	r18, r19
 17c:	2d 37       	cpi	r18, 0x7D	; 125
 17e:	20 f4       	brcc	.+8      	; 0x188 <__vector_16+0x3a>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	05 c0       	rjmp	.+10     	; 0x192 <__vector_16+0x44>
 188:	26 e8       	ldi	r18, 0x86	; 134
 18a:	23 0f       	add	r18, r19
 18c:	02 96       	adiw	r24, 0x02	; 2
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <_ZL12timer0_fract>
 196:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_millis>
 19a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_millis+0x1>
 19e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_millis+0x2>
 1a2:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_millis+0x3>
 1a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <timer0_overflow_count>
 1aa:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <timer0_overflow_count+0x1>
 1ae:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <timer0_overflow_count+0x2>
 1b2:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <timer0_overflow_count+0x3>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a1 1d       	adc	r26, r1
 1ba:	b1 1d       	adc	r27, r1
 1bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <timer0_overflow_count>
 1c0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <timer0_overflow_count+0x1>
 1c4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <timer0_overflow_count+0x2>
 1c8:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <timer0_overflow_count+0x3>
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <main>:



int main (void)
{
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
	InitUART(UART0,9600,8,0);
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	28 e0       	ldi	r18, 0x08	; 8
 1f0:	40 e8       	ldi	r20, 0x80	; 128
 1f2:	55 e2       	ldi	r21, 0x25	; 37
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 30 01 	call	0x260	; 0x260 <_Z8InitUARTjmhc>
	initTimer();
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9initTimerv>
	unsigned long start = Micro();
 204:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z5Microv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f e7       	ldi	r18, 0x7F	; 127
 20a:	80 ee       	ldi	r24, 0xE0	; 224
 20c:	90 e3       	ldi	r25, 0x30	; 48
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x2c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x36>
 218:	00 00       	nop
	_delay_ms(1001);
	unsigned long stop = Micro();
 21a:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z5Microv>
 21e:	6b 01       	movw	r12, r22
 220:	7c 01       	movw	r14, r24
	start = ~1;
	SendInteger(UART0,start);
 222:	6e ef       	ldi	r22, 0xFE	; 254
 224:	7f ef       	ldi	r23, 0xFF	; 255
 226:	80 ec       	ldi	r24, 0xC0	; 192
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z11SendIntegerji>
	SendString(UART0,"\n\r");
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	80 ec       	ldi	r24, 0xC0	; 192
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 8a 01 	call	0x314	; 0x314 <_Z10SendStringjPc>
	SendInteger(UART0,stop);
 23a:	b6 01       	movw	r22, r12
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z11SendIntegerji>
	SendString(UART0,"\n\r");	
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	80 ec       	ldi	r24, 0xC0	; 192
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 8a 01 	call	0x314	; 0x314 <_Z10SendStringjPc>
		SendString(UART0,"\n\r");
		_delay_us(50000);

	}
	*/
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <_Z8InitUARTjmhc>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 260:	0f 93       	push	r16
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	db 01       	movw	r26, r22
 26a:	ca 01       	movw	r24, r20
 26c:	8c 52       	subi	r24, 0x2C	; 44
 26e:	91 40       	sbci	r25, 0x01	; 1
 270:	a1 09       	sbc	r26, r1
 272:	b1 09       	sbc	r27, r1
 274:	85 3d       	cpi	r24, 0xD5	; 213
 276:	90 4c       	sbci	r25, 0xC0	; 192
 278:	a1 40       	sbci	r26, 0x01	; 1
 27a:	b1 05       	cpc	r27, r1
 27c:	08 f0       	brcs	.+2      	; 0x280 <_Z8InitUARTjmhc+0x20>
 27e:	40 c0       	rjmp	.+128    	; 0x300 <_Z8InitUARTjmhc+0xa0>
 280:	25 50       	subi	r18, 0x05	; 5
 282:	24 30       	cpi	r18, 0x04	; 4
 284:	e8 f5       	brcc	.+122    	; 0x300 <_Z8InitUARTjmhc+0xa0>
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	88 83       	st	Y, r24
 28a:	88 e1       	ldi	r24, 0x18	; 24
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	22 0f       	add	r18, r18
 290:	2a 83       	std	Y+2, r18	; 0x02
 292:	05 34       	cpi	r16, 0x45	; 69
 294:	21 f4       	brne	.+8      	; 0x29e <_Z8InitUARTjmhc+0x3e>
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	80 62       	ori	r24, 0x20	; 32
 29a:	8a 83       	std	Y+2, r24	; 0x02
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <_Z8InitUARTjmhc+0x48>
 29e:	0f 34       	cpi	r16, 0x4F	; 79
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <_Z8InitUARTjmhc+0x48>
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	80 63       	ori	r24, 0x30	; 48
 2a6:	8a 83       	std	Y+2, r24	; 0x02
 2a8:	db 01       	movw	r26, r22
 2aa:	ca 01       	movw	r24, r20
 2ac:	80 58       	subi	r24, 0x80	; 128
 2ae:	9b 47       	sbci	r25, 0x7B	; 123
 2b0:	a1 4e       	sbci	r26, 0xE1	; 225
 2b2:	bf 4f       	sbci	r27, 0xFF	; 255
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	aa 1f       	adc	r26, r26
 2ba:	bb 1f       	adc	r27, r27
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	aa 1f       	adc	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	44 0f       	add	r20, r20
 2ce:	55 1f       	adc	r21, r21
 2d0:	66 1f       	adc	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	9a 01       	movw	r18, r20
 2de:	ab 01       	movw	r20, r22
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	44 1f       	adc	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	44 1f       	adc	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	bc 01       	movw	r22, r24
 2f2:	cd 01       	movw	r24, r26
 2f4:	0e 94 c4 01 	call	0x388	; 0x388 <__udivmodsi4>
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	31 09       	sbc	r19, r1
 2fc:	3d 83       	std	Y+5, r19	; 0x05
 2fe:	2c 83       	std	Y+4, r18	; 0x04
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <_Z8SendCharjc>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 308:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 30a:	90 81       	ld	r25, Z
 30c:	95 ff       	sbrs	r25, 5
 30e:	fd cf       	rjmp	.-6      	; 0x30a <_Z8SendCharjc+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 310:	66 83       	std	Z+6, r22	; 0x06
 312:	08 95       	ret

00000314 <_Z10SendStringjPc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 31e:	68 81       	ld	r22, Y
 320:	66 23       	and	r22, r22
 322:	41 f0       	breq	.+16     	; 0x334 <_Z10SendStringjPc+0x20>
 324:	8c 01       	movw	r16, r24
 326:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 328:	c8 01       	movw	r24, r16
 32a:	0e 94 84 01 	call	0x308	; 0x308 <_Z8SendCharjc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 32e:	69 91       	ld	r22, Y+
 330:	61 11       	cpse	r22, r1
 332:	fa cf       	rjmp	.-12     	; 0x328 <_Z10SendStringjPc+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <_Z11SendIntegerji>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	27 97       	sbiw	r28, 0x07	; 7
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	8c 01       	movw	r16, r24
 358:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 35a:	4a e0       	ldi	r20, 0x0A	; 10
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	0e 94 00 02 	call	0x400	; 0x400 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
 366:	be 01       	movw	r22, r28
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	c8 01       	movw	r24, r16
 36e:	0e 94 8a 01 	call	0x314	; 0x314 <_Z10SendStringjPc>
}
 372:	27 96       	adiw	r28, 0x07	; 7
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <__udivmodsi4>:
 388:	a1 e2       	ldi	r26, 0x21	; 33
 38a:	1a 2e       	mov	r1, r26
 38c:	aa 1b       	sub	r26, r26
 38e:	bb 1b       	sub	r27, r27
 390:	fd 01       	movw	r30, r26
 392:	0d c0       	rjmp	.+26     	; 0x3ae <__udivmodsi4_ep>

00000394 <__udivmodsi4_loop>:
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	ee 1f       	adc	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	a2 17       	cp	r26, r18
 39e:	b3 07       	cpc	r27, r19
 3a0:	e4 07       	cpc	r30, r20
 3a2:	f5 07       	cpc	r31, r21
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <__udivmodsi4_ep>
 3a6:	a2 1b       	sub	r26, r18
 3a8:	b3 0b       	sbc	r27, r19
 3aa:	e4 0b       	sbc	r30, r20
 3ac:	f5 0b       	sbc	r31, r21

000003ae <__udivmodsi4_ep>:
 3ae:	66 1f       	adc	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	1a 94       	dec	r1
 3b8:	69 f7       	brne	.-38     	; 0x394 <__udivmodsi4_loop>
 3ba:	60 95       	com	r22
 3bc:	70 95       	com	r23
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	9b 01       	movw	r18, r22
 3c4:	ac 01       	movw	r20, r24
 3c6:	bd 01       	movw	r22, r26
 3c8:	cf 01       	movw	r24, r30
 3ca:	08 95       	ret

000003cc <__muluhisi3>:
 3cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__umulhisi3>
 3d0:	a5 9f       	mul	r26, r21
 3d2:	90 0d       	add	r25, r0
 3d4:	b4 9f       	mul	r27, r20
 3d6:	90 0d       	add	r25, r0
 3d8:	a4 9f       	mul	r26, r20
 3da:	80 0d       	add	r24, r0
 3dc:	91 1d       	adc	r25, r1
 3de:	11 24       	eor	r1, r1
 3e0:	08 95       	ret

000003e2 <__umulhisi3>:
 3e2:	a2 9f       	mul	r26, r18
 3e4:	b0 01       	movw	r22, r0
 3e6:	b3 9f       	mul	r27, r19
 3e8:	c0 01       	movw	r24, r0
 3ea:	a3 9f       	mul	r26, r19
 3ec:	70 0d       	add	r23, r0
 3ee:	81 1d       	adc	r24, r1
 3f0:	11 24       	eor	r1, r1
 3f2:	91 1d       	adc	r25, r1
 3f4:	b2 9f       	mul	r27, r18
 3f6:	70 0d       	add	r23, r0
 3f8:	81 1d       	adc	r24, r1
 3fa:	11 24       	eor	r1, r1
 3fc:	91 1d       	adc	r25, r1
 3fe:	08 95       	ret

00000400 <__itoa_ncheck>:
 400:	bb 27       	eor	r27, r27
 402:	4a 30       	cpi	r20, 0x0A	; 10
 404:	31 f4       	brne	.+12     	; 0x412 <__itoa_ncheck+0x12>
 406:	99 23       	and	r25, r25
 408:	22 f4       	brpl	.+8      	; 0x412 <__itoa_ncheck+0x12>
 40a:	bd e2       	ldi	r27, 0x2D	; 45
 40c:	90 95       	com	r25
 40e:	81 95       	neg	r24
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	0c 94 0c 02 	jmp	0x418	; 0x418 <__utoa_common>

00000416 <__utoa_ncheck>:
 416:	bb 27       	eor	r27, r27

00000418 <__utoa_common>:
 418:	fb 01       	movw	r30, r22
 41a:	55 27       	eor	r21, r21
 41c:	aa 27       	eor	r26, r26
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	aa 1f       	adc	r26, r26
 424:	a4 17       	cp	r26, r20
 426:	10 f0       	brcs	.+4      	; 0x42c <__utoa_common+0x14>
 428:	a4 1b       	sub	r26, r20
 42a:	83 95       	inc	r24
 42c:	50 51       	subi	r21, 0x10	; 16
 42e:	b9 f7       	brne	.-18     	; 0x41e <__utoa_common+0x6>
 430:	a0 5d       	subi	r26, 0xD0	; 208
 432:	aa 33       	cpi	r26, 0x3A	; 58
 434:	08 f0       	brcs	.+2      	; 0x438 <__utoa_common+0x20>
 436:	a9 5d       	subi	r26, 0xD9	; 217
 438:	a1 93       	st	Z+, r26
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	79 f7       	brne	.-34     	; 0x41c <__utoa_common+0x4>
 43e:	b1 11       	cpse	r27, r1
 440:	b1 93       	st	Z+, r27
 442:	11 92       	st	Z+, r1
 444:	cb 01       	movw	r24, r22
 446:	0c 94 25 02 	jmp	0x44a	; 0x44a <strrev>

0000044a <strrev>:
 44a:	dc 01       	movw	r26, r24
 44c:	fc 01       	movw	r30, r24
 44e:	67 2f       	mov	r22, r23
 450:	71 91       	ld	r23, Z+
 452:	77 23       	and	r23, r23
 454:	e1 f7       	brne	.-8      	; 0x44e <strrev+0x4>
 456:	32 97       	sbiw	r30, 0x02	; 2
 458:	04 c0       	rjmp	.+8      	; 0x462 <strrev+0x18>
 45a:	7c 91       	ld	r23, X
 45c:	6d 93       	st	X+, r22
 45e:	70 83       	st	Z, r23
 460:	62 91       	ld	r22, -Z
 462:	ae 17       	cp	r26, r30
 464:	bf 07       	cpc	r27, r31
 466:	c8 f3       	brcs	.-14     	; 0x45a <strrev+0x10>
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>

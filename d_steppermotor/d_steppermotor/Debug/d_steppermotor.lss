
d_steppermotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001602  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000105f  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b9  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  000034b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000077b  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058e  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000042fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	e2 d0       	rcall	.+452    	; 0x2ba <main>
  f6:	aa c2       	rjmp	.+1364   	; 0x64c <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN12stepperMotorC1EPP3pin>:
 *  Author: jonas
 */ 

#include "d_steppermotor.h"

stepperMotor::stepperMotor(pin** pinP){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	18 86       	std	Y+8, r1	; 0x08
 102:	19 86       	std	Y+9, r1	; 0x09
 104:	1a 86       	std	Y+10, r1	; 0x0a
 106:	1b 86       	std	Y+11, r1	; 0x0b
 108:	1c 86       	std	Y+12, r1	; 0x0c
 10a:	1d 86       	std	Y+13, r1	; 0x0d
 10c:	1e 86       	std	Y+14, r1	; 0x0e
 10e:	1f 86       	std	Y+15, r1	; 0x0f
 110:	fb 01       	movw	r30, r22
 112:	dc 01       	movw	r26, r24
 114:	68 5f       	subi	r22, 0xF8	; 248
 116:	7f 4f       	sbci	r23, 0xFF	; 255
	for (uint8_t i = 0; i<4;i++){
		pins_[i] = pinP[i];
 118:	81 91       	ld	r24, Z+
 11a:	91 91       	ld	r25, Z+
 11c:	8d 93       	st	X+, r24
 11e:	9d 93       	st	X+, r25
 */ 

#include "d_steppermotor.h"

stepperMotor::stepperMotor(pin** pinP){
	for (uint8_t i = 0; i<4;i++){
 120:	e6 17       	cp	r30, r22
 122:	f7 07       	cpc	r31, r23
 124:	c9 f7       	brne	.-14     	; 0x118 <_ZN12stepperMotorC1EPP3pin+0x1e>
		pins_[i] = pinP[i];
	}
	
	pins_[0]->high();
 126:	88 81       	ld	r24, Y
 128:	99 81       	ldd	r25, Y+1	; 0x01
 12a:	31 d1       	rcall	.+610    	; 0x38e <_ZN3pin4highEv>
	pinStateMEM_[0] = true;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	88 87       	std	Y+8, r24	; 0x08
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <_ZN12stepperMotor4stepEb>:

void stepperMotor::step(bool clockwice){
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	//signed char index = (clockwice == true ? 1 : -1);
	if (clockwice){
 14e:	66 23       	and	r22, r22
 150:	d1 f1       	breq	.+116    	; 0x1c6 <_ZN12stepperMotor4stepEb+0x90>
 152:	7c 01       	movw	r14, r24
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	e8 0e       	add	r14, r24
 158:	f1 1c       	adc	r15, r1
 15a:	6e 01       	movw	r12, r28
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	10 e0       	ldi	r17, 0x00	; 0
				}
				else{
					pins_[i]->low();
					pinStateTMP_[i] = false;
					pins_[i+1]->high();
					pinStateTMP_[i+1] = true;
 160:	99 24       	eor	r9, r9
 162:	93 94       	inc	r9

void stepperMotor::step(bool clockwice){
	//signed char index = (clockwice == true ? 1 : -1);
	if (clockwice){
		for (uint8_t i = 0;i<4;i++){
			if (pinStateMEM_[i]==true){
 164:	f7 01       	movw	r30, r14
 166:	81 91       	ld	r24, Z+
 168:	7f 01       	movw	r14, r30
 16a:	88 23       	and	r24, r24
 16c:	01 f1       	breq	.+64     	; 0x1ae <_ZN12stepperMotor4stepEb+0x78>
				if (i==3){
 16e:	03 30       	cpi	r16, 0x03	; 3
 170:	91 f4       	brne	.+36     	; 0x196 <_ZN12stepperMotor4stepEb+0x60>
					pins_[i]->low();
 172:	f8 01       	movw	r30, r16
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	19 d1       	rcall	.+562    	; 0x3b4 <_ZN3pin3lowEv>
					pinStateTMP_[i] = false;
 182:	fe 01       	movw	r30, r28
 184:	e0 0f       	add	r30, r16
 186:	f1 1f       	adc	r31, r17
 188:	14 86       	std	Z+12, r1	; 0x0c
					pins_[0]->high();
 18a:	88 81       	ld	r24, Y
 18c:	99 81       	ldd	r25, Y+1	; 0x01
 18e:	ff d0       	rcall	.+510    	; 0x38e <_ZN3pin4highEv>
					pinStateTMP_[0] = true;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8c 87       	std	Y+12, r24	; 0x0c
 194:	50 c0       	rjmp	.+160    	; 0x236 <_ZN12stepperMotor4stepEb+0x100>
				}
				else{
					pins_[i]->low();
 196:	f6 01       	movw	r30, r12
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	0b d1       	rcall	.+534    	; 0x3b4 <_ZN3pin3lowEv>
					pinStateTMP_[i] = false;
 19e:	f7 01       	movw	r30, r14
 1a0:	13 82       	std	Z+3, r1	; 0x03
					pins_[i+1]->high();
 1a2:	f6 01       	movw	r30, r12
 1a4:	82 81       	ldd	r24, Z+2	; 0x02
 1a6:	93 81       	ldd	r25, Z+3	; 0x03
 1a8:	f2 d0       	rcall	.+484    	; 0x38e <_ZN3pin4highEv>
					pinStateTMP_[i+1] = true;
 1aa:	f7 01       	movw	r30, r14
 1ac:	94 82       	std	Z+4, r9	; 0x04
 1ae:	0f 5f       	subi	r16, 0xFF	; 255
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
 1b2:	f2 e0       	ldi	r31, 0x02	; 2
 1b4:	cf 0e       	add	r12, r31
 1b6:	d1 1c       	adc	r13, r1
}

void stepperMotor::step(bool clockwice){
	//signed char index = (clockwice == true ? 1 : -1);
	if (clockwice){
		for (uint8_t i = 0;i<4;i++){
 1b8:	04 30       	cpi	r16, 0x04	; 4
 1ba:	11 05       	cpc	r17, r1
 1bc:	99 f6       	brne	.-90     	; 0x164 <_ZN12stepperMotor4stepEb+0x2e>
 1be:	3b c0       	rjmp	.+118    	; 0x236 <_ZN12stepperMotor4stepEb+0x100>
 1c0:	d3 94       	inc	r13
 1c2:	c3 94       	inc	r12
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <_ZN12stepperMotor4stepEb+0x9a>
 1c6:	cc 24       	eor	r12, r12
 1c8:	c3 94       	inc	r12
 1ca:	d1 2c       	mov	r13, r1
				}
				else{
					pins_[i]->low();
					pinStateTMP_[i] = false;
					pins_[i-1]->high();
					pinStateTMP_[i-1] = true;
 1cc:	bb 24       	eor	r11, r11
 1ce:	b3 94       	inc	r11
		}
	}
	else
	{
		for (uint8_t i = 0;i<4;i++){
			if (pinStateMEM_[i]==true){
 1d0:	ed 2c       	mov	r14, r13
 1d2:	f1 2c       	mov	r15, r1
 1d4:	fe 01       	movw	r30, r28
 1d6:	ee 0d       	add	r30, r14
 1d8:	ff 1d       	adc	r31, r15
 1da:	80 85       	ldd	r24, Z+8	; 0x08
 1dc:	88 23       	and	r24, r24
 1de:	41 f1       	breq	.+80     	; 0x230 <_ZN12stepperMotor4stepEb+0xfa>
				if (i==0)
 1e0:	d1 10       	cpse	r13, r1
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <_ZN12stepperMotor4stepEb+0xd0>
				{
					pins_[i]->low();
 1e4:	f7 01       	movw	r30, r14
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	e0 d0       	rcall	.+448    	; 0x3b4 <_ZN3pin3lowEv>
					pinStateTMP_[i] = false;
 1f4:	fe 01       	movw	r30, r28
 1f6:	ee 0d       	add	r30, r14
 1f8:	ff 1d       	adc	r31, r15
					pins_[3]->high();
 1fa:	14 86       	std	Z+12, r1	; 0x0c
 1fc:	8e 81       	ldd	r24, Y+6	; 0x06
 1fe:	9f 81       	ldd	r25, Y+7	; 0x07
 200:	c6 d0       	rcall	.+396    	; 0x38e <_ZN3pin4highEv>
					pinStateTMP_[3] = true;
 202:	bf 86       	std	Y+15, r11	; 0x0f
 204:	dd cf       	rjmp	.-70     	; 0x1c0 <_ZN12stepperMotor4stepEb+0x8a>
 206:	0d 2d       	mov	r16, r13
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	00 0f       	add	r16, r16
 20c:	11 1f       	adc	r17, r17
 20e:	0c 0f       	add	r16, r28
				}
				else{
					pins_[i]->low();
 210:	1d 1f       	adc	r17, r29
 212:	f8 01       	movw	r30, r16
 214:	80 81       	ld	r24, Z
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	cd d0       	rcall	.+410    	; 0x3b4 <_ZN3pin3lowEv>
					pinStateTMP_[i] = false;
 21a:	ec 0e       	add	r14, r28
 21c:	fd 1e       	adc	r15, r29
 21e:	f7 01       	movw	r30, r14
					pins_[i-1]->high();
 220:	14 86       	std	Z+12, r1	; 0x0c
 222:	f8 01       	movw	r30, r16
 224:	32 97       	sbiw	r30, 0x02	; 2
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	b1 d0       	rcall	.+354    	; 0x38e <_ZN3pin4highEv>
					pinStateTMP_[i-1] = true;
 22c:	f7 01       	movw	r30, r14
 22e:	b3 86       	std	Z+11, r11	; 0x0b
			}
		}
	}
	else
	{
		for (uint8_t i = 0;i<4;i++){
 230:	f3 e0       	ldi	r31, 0x03	; 3
 232:	fc 15       	cp	r31, r12
 234:	28 f6       	brcc	.-118    	; 0x1c0 <_ZN12stepperMotor4stepEb+0x8a>
				}
			}
		}
	}
	// Updating memory
	pinStateMEM_[0]=pinStateTMP_[0];
 236:	8c 85       	ldd	r24, Y+12	; 0x0c
 238:	88 87       	std	Y+8, r24	; 0x08
	pinStateMEM_[1]=pinStateTMP_[1];
 23a:	8d 85       	ldd	r24, Y+13	; 0x0d
 23c:	89 87       	std	Y+9, r24	; 0x09
	pinStateMEM_[2]=pinStateTMP_[2];
 23e:	8e 85       	ldd	r24, Y+14	; 0x0e
 240:	8a 87       	std	Y+10, r24	; 0x0a
	pinStateMEM_[3]=pinStateTMP_[3];
 242:	8f 85       	ldd	r24, Y+15	; 0x0f
 244:	8b 87       	std	Y+11, r24	; 0x0b
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	08 95       	ret

0000025e <_ZN12stepperMotor12rotateDegreeEi>:
void stepperMotor::rotateDegree(int16_t degrees){
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	7c 01       	movw	r14, r24
	bool orientation = (degrees > 0 ? true : false);
 26a:	11 e0       	ldi	r17, 0x01	; 1
 26c:	16 16       	cp	r1, r22
 26e:	17 06       	cpc	r1, r23
 270:	0c f0       	brlt	.+2      	; 0x274 <_ZN12stepperMotor12rotateDegreeEi+0x16>
 272:	10 e0       	ldi	r17, 0x00	; 0
	int16_t stepCount = fabs(degrees)*steps_pr_Degree;
 274:	07 2e       	mov	r0, r23
 276:	00 0c       	add	r0, r0
 278:	88 0b       	sbc	r24, r24
 27a:	99 0b       	sbc	r25, r25
 27c:	f8 d0       	rcall	.+496    	; 0x46e <__floatsisf>
 27e:	9f 77       	andi	r25, 0x7F	; 127
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e3       	ldi	r20, 0x30	; 48
 286:	51 e4       	ldi	r21, 0x41	; 65
 288:	56 d1       	rcall	.+684    	; 0x536 <__mulsf3>
 28a:	be d0       	rcall	.+380    	; 0x408 <__fixsfsi>
 28c:	eb 01       	movw	r28, r22
	for (stepCount;stepCount!=0;stepCount--){
 28e:	20 97       	sbiw	r28, 0x00	; 0
		step(orientation);
 290:	71 f0       	breq	.+28     	; 0x2ae <_ZN12stepperMotor12rotateDegreeEi+0x50>
 292:	61 2f       	mov	r22, r17
 294:	c7 01       	movw	r24, r14
 296:	4f df       	rcall	.-354    	; 0x136 <_ZN12stepperMotor4stepEb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	85 ea       	ldi	r24, 0xA5	; 165
 29c:	9e e0       	ldi	r25, 0x0E	; 14
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <_ZN12stepperMotor12rotateDegreeEi+0x40>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <_ZN12stepperMotor12rotateDegreeEi+0x4a>
 2a8:	00 00       	nop
	pinStateMEM_[3]=pinStateTMP_[3];
}
void stepperMotor::rotateDegree(int16_t degrees){
	bool orientation = (degrees > 0 ? true : false);
	int16_t stepCount = fabs(degrees)*steps_pr_Degree;
	for (stepCount;stepCount!=0;stepCount--){
 2aa:	21 97       	sbiw	r28, 0x01	; 1
 2ac:	91 f7       	brne	.-28     	; 0x292 <_ZN12stepperMotor12rotateDegreeEi+0x34>
		step(orientation);
		_delay_ms(300);	
	}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	ff 90       	pop	r15
 2b6:	ef 90       	pop	r14
 2b8:	08 95       	ret

000002ba <main>:
#define F_CPU 16000000
#include <util/delay.h>
#include "d_steppermotor.h"

int main(void)
{
 2ba:	af 92       	push	r10
 2bc:	bf 92       	push	r11
 2be:	cf 92       	push	r12
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	a8 97       	sbiw	r28, 0x28	; 40
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	pin p0(&DDRB,&PORTB,0);
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	45 e2       	ldi	r20, 0x25	; 37
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	64 e2       	ldi	r22, 0x24	; 36
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	5c 01       	movw	r10, r24
 2ee:	77 d0       	rcall	.+238    	; 0x3de <_ZN3pinC1EPVhS1_h>
	pin p1(&DDRB,&PORTB,1);
 2f0:	6e 01       	movw	r12, r28
 2f2:	95 e0       	ldi	r25, 0x05	; 5
 2f4:	c9 0e       	add	r12, r25
 2f6:	d1 1c       	adc	r13, r1
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	45 e2       	ldi	r20, 0x25	; 37
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	64 e2       	ldi	r22, 0x24	; 36
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	c6 01       	movw	r24, r12
 304:	6c d0       	rcall	.+216    	; 0x3de <_ZN3pinC1EPVhS1_h>
	pin p2(&DDRB,&PORTB,2);
 306:	7e 01       	movw	r14, r28
 308:	29 e0       	ldi	r18, 0x09	; 9
 30a:	e2 0e       	add	r14, r18
 30c:	f1 1c       	adc	r15, r1
 30e:	22 e0       	ldi	r18, 0x02	; 2
 310:	45 e2       	ldi	r20, 0x25	; 37
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	64 e2       	ldi	r22, 0x24	; 36
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	c7 01       	movw	r24, r14
 31a:	61 d0       	rcall	.+194    	; 0x3de <_ZN3pinC1EPVhS1_h>
	pin p3(&DDRB,&PORTB,3);
 31c:	8e 01       	movw	r16, r28
 31e:	03 5f       	subi	r16, 0xF3	; 243
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	23 e0       	ldi	r18, 0x03	; 3
 324:	45 e2       	ldi	r20, 0x25	; 37
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	64 e2       	ldi	r22, 0x24	; 36
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	c8 01       	movw	r24, r16
 32e:	57 d0       	rcall	.+174    	; 0x3de <_ZN3pinC1EPVhS1_h>
	
	pin* pinP[] = {&p0,&p1,&p2,&p3};
 330:	ba 8a       	std	Y+18, r11	; 0x12
 332:	a9 8a       	std	Y+17, r10	; 0x11
 334:	dc 8a       	std	Y+20, r13	; 0x14
 336:	cb 8a       	std	Y+19, r12	; 0x13
 338:	fe 8a       	std	Y+22, r15	; 0x16
 33a:	ed 8a       	std	Y+21, r14	; 0x15
 33c:	18 8f       	std	Y+24, r17	; 0x18
 33e:	0f 8b       	std	Y+23, r16	; 0x17
	
	stepperMotor base(pinP);
 340:	be 01       	movw	r22, r28
 342:	6f 5e       	subi	r22, 0xEF	; 239
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	ce 01       	movw	r24, r28
 348:	49 96       	adiw	r24, 0x19	; 25
 34a:	d7 de       	rcall	.-594    	; 0xfa <_ZN12stepperMotorC1EPP3pin>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	95 ea       	ldi	r25, 0xA5	; 165
 350:	2e e0       	ldi	r18, 0x0E	; 14
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x98>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0xa2>
	int counter = 0;
    while(1)
	{
		_delay_ms(300);
		base.rotateDegree(1);
 35c:	00 00       	nop
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	ce 01       	movw	r24, r28
 364:	49 96       	adiw	r24, 0x19	; 25
 366:	7b df       	rcall	.-266    	; 0x25e <_ZN12stepperMotor12rotateDegreeEi>
		p2.high();
		p3.high();
		_delay_ms(300);
    }
	return 0;
}
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	a8 96       	adiw	r28, 0x28	; 40
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	08 95       	ret

0000038e <_ZN3pin4highEv>:
	//DDRB |= 0b00010000;//
	//PORTB |=0b00010000;//1<<pinno_;
	
}
// Sets the pin high
void pin::high(){
 38e:	dc 01       	movw	r26, r24
	*port_ |= 1<<pinno_;
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	ed 91       	ld	r30, X+
 394:	fc 91       	ld	r31, X
 396:	12 97       	sbiw	r26, 0x02	; 2
 398:	40 81       	ld	r20, Z
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	c9 01       	movw	r24, r18
 3a0:	13 96       	adiw	r26, 0x03	; 3
 3a2:	0c 90       	ld	r0, X
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <_ZN3pin4highEv+0x1c>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <_ZN3pin4highEv+0x18>
 3ae:	84 2b       	or	r24, r20
 3b0:	80 83       	st	Z, r24
 3b2:	08 95       	ret

000003b4 <_ZN3pin3lowEv>:
}

// Sets the pin low
void pin::low(){
	*port_ &= ~(1<<pinno_);
 3b4:	dc 01       	movw	r26, r24
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	ed 91       	ld	r30, X+
 3ba:	fc 91       	ld	r31, X
 3bc:	12 97       	sbiw	r26, 0x02	; 2
 3be:	40 81       	ld	r20, Z
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	13 96       	adiw	r26, 0x03	; 3
 3c8:	0c 90       	ld	r0, X
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <_ZN3pin3lowEv+0x1c>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <_ZN3pin3lowEv+0x18>
 3d4:	cb 01       	movw	r24, r22
 3d6:	80 95       	com	r24
 3d8:	84 23       	and	r24, r20
 3da:	80 83       	st	Z, r24
 3dc:	08 95       	ret

000003de <_ZN3pinC1EPVhS1_h>:
 * Created: 27/02/2020 11.48.29
 *  Author: jonas
 */ 
#include "d_pin.h"

pin::pin(volatile uint8_t* DDRadr, volatile uint8_t* port, uint8_t pinno){
 3de:	dc 01       	movw	r26, r24
 3e0:	1c 92       	st	X, r1
	//*DDRadr |= 0b00010000;
	//*port |= 0b00010000;
	
	*DDRadr |= (1<<pinno);
 3e2:	fb 01       	movw	r30, r22
 3e4:	30 81       	ld	r19, Z
 3e6:	e1 e0       	ldi	r30, 0x01	; 1
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <_ZN3pinC1EPVhS1_h+0x14>
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <_ZN3pinC1EPVhS1_h+0x10>
 3f6:	e3 2b       	or	r30, r19
 3f8:	db 01       	movw	r26, r22
 3fa:	ec 93       	st	X, r30
	port_  = port;
 3fc:	fc 01       	movw	r30, r24
 3fe:	52 83       	std	Z+2, r21	; 0x02
 400:	41 83       	std	Z+1, r20	; 0x01
	pinno_ = pinno;
 402:	23 83       	std	Z+3, r18	; 0x03
	low();
 404:	d7 cf       	rjmp	.-82     	; 0x3b4 <_ZN3pin3lowEv>
 406:	08 95       	ret

00000408 <__fixsfsi>:
 408:	04 d0       	rcall	.+8      	; 0x412 <__fixunssfsi>
 40a:	68 94       	set
 40c:	b1 11       	cpse	r27, r1
 40e:	8d c0       	rjmp	.+282    	; 0x52a <__fp_szero>
 410:	08 95       	ret

00000412 <__fixunssfsi>:
 412:	70 d0       	rcall	.+224    	; 0x4f4 <__fp_splitA>
 414:	88 f0       	brcs	.+34     	; 0x438 <__fixunssfsi+0x26>
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	90 f0       	brcs	.+36     	; 0x43e <__fixunssfsi+0x2c>
 41a:	b9 2f       	mov	r27, r25
 41c:	99 27       	eor	r25, r25
 41e:	b7 51       	subi	r27, 0x17	; 23
 420:	a0 f0       	brcs	.+40     	; 0x44a <__fixunssfsi+0x38>
 422:	d1 f0       	breq	.+52     	; 0x458 <__fixunssfsi+0x46>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a f0       	brmi	.+6      	; 0x434 <__fixunssfsi+0x22>
 42e:	ba 95       	dec	r27
 430:	c9 f7       	brne	.-14     	; 0x424 <__fixunssfsi+0x12>
 432:	12 c0       	rjmp	.+36     	; 0x458 <__fixunssfsi+0x46>
 434:	b1 30       	cpi	r27, 0x01	; 1
 436:	81 f0       	breq	.+32     	; 0x458 <__fixunssfsi+0x46>
 438:	77 d0       	rcall	.+238    	; 0x528 <__fp_zero>
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	08 95       	ret
 43e:	74 c0       	rjmp	.+232    	; 0x528 <__fp_zero>
 440:	67 2f       	mov	r22, r23
 442:	78 2f       	mov	r23, r24
 444:	88 27       	eor	r24, r24
 446:	b8 5f       	subi	r27, 0xF8	; 248
 448:	39 f0       	breq	.+14     	; 0x458 <__fixunssfsi+0x46>
 44a:	b9 3f       	cpi	r27, 0xF9	; 249
 44c:	cc f3       	brlt	.-14     	; 0x440 <__fixunssfsi+0x2e>
 44e:	86 95       	lsr	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b3 95       	inc	r27
 456:	d9 f7       	brne	.-10     	; 0x44e <__fixunssfsi+0x3c>
 458:	3e f4       	brtc	.+14     	; 0x468 <__fixunssfsi+0x56>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__floatunsisf>:
 46a:	e8 94       	clt
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__floatsisf+0x12>

0000046e <__floatsisf>:
 46e:	97 fb       	bst	r25, 7
 470:	3e f4       	brtc	.+14     	; 0x480 <__floatsisf+0x12>
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	99 23       	and	r25, r25
 482:	a9 f0       	breq	.+42     	; 0x4ae <__floatsisf+0x40>
 484:	f9 2f       	mov	r31, r25
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	bb 27       	eor	r27, r27
 48a:	93 95       	inc	r25
 48c:	f6 95       	lsr	r31
 48e:	87 95       	ror	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f1 11       	cpse	r31, r1
 498:	f8 cf       	rjmp	.-16     	; 0x48a <__floatsisf+0x1c>
 49a:	fa f4       	brpl	.+62     	; 0x4da <__floatsisf+0x6c>
 49c:	bb 0f       	add	r27, r27
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__floatsisf+0x36>
 4a0:	60 ff       	sbrs	r22, 0
 4a2:	1b c0       	rjmp	.+54     	; 0x4da <__floatsisf+0x6c>
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	16 c0       	rjmp	.+44     	; 0x4da <__floatsisf+0x6c>
 4ae:	88 23       	and	r24, r24
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <__floatsisf+0x48>
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <__floatsisf+0x6a>
 4b6:	77 23       	and	r23, r23
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <__floatsisf+0x54>
 4ba:	9e e8       	ldi	r25, 0x8E	; 142
 4bc:	87 2f       	mov	r24, r23
 4be:	76 2f       	mov	r23, r22
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__floatsisf+0x5e>
 4c2:	66 23       	and	r22, r22
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__floatsisf+0x74>
 4c6:	96 e8       	ldi	r25, 0x86	; 134
 4c8:	86 2f       	mov	r24, r22
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	2a f0       	brmi	.+10     	; 0x4da <__floatsisf+0x6c>
 4d0:	9a 95       	dec	r25
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	da f7       	brpl	.-10     	; 0x4d0 <__floatsisf+0x62>
 4da:	88 0f       	add	r24, r24
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__fp_split3>:
 4e4:	57 fd       	sbrc	r21, 7
 4e6:	90 58       	subi	r25, 0x80	; 128
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	59 f0       	breq	.+22     	; 0x504 <__fp_splitA+0x10>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	71 f0       	breq	.+28     	; 0x50e <__fp_splitA+0x1a>
 4f2:	47 95       	ror	r20

000004f4 <__fp_splitA>:
 4f4:	88 0f       	add	r24, r24
 4f6:	97 fb       	bst	r25, 7
 4f8:	99 1f       	adc	r25, r25
 4fa:	61 f0       	breq	.+24     	; 0x514 <__fp_splitA+0x20>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	79 f0       	breq	.+30     	; 0x51e <__fp_splitA+0x2a>
 500:	87 95       	ror	r24
 502:	08 95       	ret
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	55 1f       	adc	r21, r21
 50c:	f2 cf       	rjmp	.-28     	; 0x4f2 <__fp_split3+0xe>
 50e:	46 95       	lsr	r20
 510:	f1 df       	rcall	.-30     	; 0x4f4 <__fp_splitA>
 512:	08 c0       	rjmp	.+16     	; 0x524 <__fp_splitA+0x30>
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	18 06       	cpc	r1, r24
 51a:	99 1f       	adc	r25, r25
 51c:	f1 cf       	rjmp	.-30     	; 0x500 <__fp_splitA+0xc>
 51e:	86 95       	lsr	r24
 520:	71 05       	cpc	r23, r1
 522:	61 05       	cpc	r22, r1
 524:	08 94       	sec
 526:	08 95       	ret

00000528 <__fp_zero>:
 528:	e8 94       	clt

0000052a <__fp_szero>:
 52a:	bb 27       	eor	r27, r27
 52c:	66 27       	eor	r22, r22
 52e:	77 27       	eor	r23, r23
 530:	cb 01       	movw	r24, r22
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__mulsf3>:
 536:	0b d0       	rcall	.+22     	; 0x54e <__mulsf3x>
 538:	78 c0       	rjmp	.+240    	; 0x62a <__fp_round>
 53a:	69 d0       	rcall	.+210    	; 0x60e <__fp_pscA>
 53c:	28 f0       	brcs	.+10     	; 0x548 <__mulsf3+0x12>
 53e:	6e d0       	rcall	.+220    	; 0x61c <__fp_pscB>
 540:	18 f0       	brcs	.+6      	; 0x548 <__mulsf3+0x12>
 542:	95 23       	and	r25, r21
 544:	09 f0       	breq	.+2      	; 0x548 <__mulsf3+0x12>
 546:	5a c0       	rjmp	.+180    	; 0x5fc <__fp_inf>
 548:	5f c0       	rjmp	.+190    	; 0x608 <__fp_nan>
 54a:	11 24       	eor	r1, r1
 54c:	ee cf       	rjmp	.-36     	; 0x52a <__fp_szero>

0000054e <__mulsf3x>:
 54e:	ca df       	rcall	.-108    	; 0x4e4 <__fp_split3>
 550:	a0 f3       	brcs	.-24     	; 0x53a <__mulsf3+0x4>

00000552 <__mulsf3_pse>:
 552:	95 9f       	mul	r25, r21
 554:	d1 f3       	breq	.-12     	; 0x54a <__mulsf3+0x14>
 556:	95 0f       	add	r25, r21
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	55 1f       	adc	r21, r21
 55c:	62 9f       	mul	r22, r18
 55e:	f0 01       	movw	r30, r0
 560:	72 9f       	mul	r23, r18
 562:	bb 27       	eor	r27, r27
 564:	f0 0d       	add	r31, r0
 566:	b1 1d       	adc	r27, r1
 568:	63 9f       	mul	r22, r19
 56a:	aa 27       	eor	r26, r26
 56c:	f0 0d       	add	r31, r0
 56e:	b1 1d       	adc	r27, r1
 570:	aa 1f       	adc	r26, r26
 572:	64 9f       	mul	r22, r20
 574:	66 27       	eor	r22, r22
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	66 1f       	adc	r22, r22
 57c:	82 9f       	mul	r24, r18
 57e:	22 27       	eor	r18, r18
 580:	b0 0d       	add	r27, r0
 582:	a1 1d       	adc	r26, r1
 584:	62 1f       	adc	r22, r18
 586:	73 9f       	mul	r23, r19
 588:	b0 0d       	add	r27, r0
 58a:	a1 1d       	adc	r26, r1
 58c:	62 1f       	adc	r22, r18
 58e:	83 9f       	mul	r24, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	22 1f       	adc	r18, r18
 596:	74 9f       	mul	r23, r20
 598:	33 27       	eor	r19, r19
 59a:	a0 0d       	add	r26, r0
 59c:	61 1d       	adc	r22, r1
 59e:	23 1f       	adc	r18, r19
 5a0:	84 9f       	mul	r24, r20
 5a2:	60 0d       	add	r22, r0
 5a4:	21 1d       	adc	r18, r1
 5a6:	82 2f       	mov	r24, r18
 5a8:	76 2f       	mov	r23, r22
 5aa:	6a 2f       	mov	r22, r26
 5ac:	11 24       	eor	r1, r1
 5ae:	9f 57       	subi	r25, 0x7F	; 127
 5b0:	50 40       	sbci	r21, 0x00	; 0
 5b2:	8a f0       	brmi	.+34     	; 0x5d6 <__mulsf3_pse+0x84>
 5b4:	e1 f0       	breq	.+56     	; 0x5ee <__mulsf3_pse+0x9c>
 5b6:	88 23       	and	r24, r24
 5b8:	4a f0       	brmi	.+18     	; 0x5cc <__mulsf3_pse+0x7a>
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	bb 1f       	adc	r27, r27
 5c0:	66 1f       	adc	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	91 50       	subi	r25, 0x01	; 1
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	a9 f7       	brne	.-22     	; 0x5b6 <__mulsf3_pse+0x64>
 5cc:	9e 3f       	cpi	r25, 0xFE	; 254
 5ce:	51 05       	cpc	r21, r1
 5d0:	70 f0       	brcs	.+28     	; 0x5ee <__mulsf3_pse+0x9c>
 5d2:	14 c0       	rjmp	.+40     	; 0x5fc <__fp_inf>
 5d4:	aa cf       	rjmp	.-172    	; 0x52a <__fp_szero>
 5d6:	5f 3f       	cpi	r21, 0xFF	; 255
 5d8:	ec f3       	brlt	.-6      	; 0x5d4 <__mulsf3_pse+0x82>
 5da:	98 3e       	cpi	r25, 0xE8	; 232
 5dc:	dc f3       	brlt	.-10     	; 0x5d4 <__mulsf3_pse+0x82>
 5de:	86 95       	lsr	r24
 5e0:	77 95       	ror	r23
 5e2:	67 95       	ror	r22
 5e4:	b7 95       	ror	r27
 5e6:	f7 95       	ror	r31
 5e8:	e7 95       	ror	r30
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c1 f7       	brne	.-16     	; 0x5de <__mulsf3_pse+0x8c>
 5ee:	fe 2b       	or	r31, r30
 5f0:	88 0f       	add	r24, r24
 5f2:	91 1d       	adc	r25, r1
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	97 f9       	bld	r25, 7
 5fa:	08 95       	ret

000005fc <__fp_inf>:
 5fc:	97 f9       	bld	r25, 7
 5fe:	9f 67       	ori	r25, 0x7F	; 127
 600:	80 e8       	ldi	r24, 0x80	; 128
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	08 95       	ret

00000608 <__fp_nan>:
 608:	9f ef       	ldi	r25, 0xFF	; 255
 60a:	80 ec       	ldi	r24, 0xC0	; 192
 60c:	08 95       	ret

0000060e <__fp_pscA>:
 60e:	00 24       	eor	r0, r0
 610:	0a 94       	dec	r0
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	09 06       	cpc	r0, r25
 61a:	08 95       	ret

0000061c <__fp_pscB>:
 61c:	00 24       	eor	r0, r0
 61e:	0a 94       	dec	r0
 620:	12 16       	cp	r1, r18
 622:	13 06       	cpc	r1, r19
 624:	14 06       	cpc	r1, r20
 626:	05 06       	cpc	r0, r21
 628:	08 95       	ret

0000062a <__fp_round>:
 62a:	09 2e       	mov	r0, r25
 62c:	03 94       	inc	r0
 62e:	00 0c       	add	r0, r0
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0xc>
 632:	88 23       	and	r24, r24
 634:	52 f0       	brmi	.+20     	; 0x64a <__fp_round+0x20>
 636:	bb 0f       	add	r27, r27
 638:	40 f4       	brcc	.+16     	; 0x64a <__fp_round+0x20>
 63a:	bf 2b       	or	r27, r31
 63c:	11 f4       	brne	.+4      	; 0x642 <__fp_round+0x18>
 63e:	60 ff       	sbrs	r22, 0
 640:	04 c0       	rjmp	.+8      	; 0x64a <__fp_round+0x20>
 642:	6f 5f       	subi	r22, 0xFF	; 255
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	8f 4f       	sbci	r24, 0xFF	; 255
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>

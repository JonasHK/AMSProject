
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000022c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcf  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4b  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d6  00000000  00000000  00001bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000538  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000394  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN11ADConverterC1Eh>:
 *  Author: troel
 */ 
#include "ADC.h"


ADConverter::ADConverter(uint8_t channel) : ADCChannel(channel)
  a6:	fc 01       	movw	r30, r24
  a8:	60 83       	st	Z, r22
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	87 68       	ori	r24, 0x87	; 135
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <_ZN11ADConverter4ReadEv>:
}
uint16_t ADConverter::Read()
{
  c0:	dc 01       	movw	r26, r24
	ADMUX = (ADMUX & 0xF0) | (ADCChannel & 0x0F);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	8c 91       	ld	r24, X
  ca:	28 2f       	mov	r18, r24
  cc:	2f 70       	andi	r18, 0x0F	; 15
  ce:	89 2f       	mov	r24, r25
  d0:	80 7f       	andi	r24, 0xF0	; 240
  d2:	82 2b       	or	r24, r18
  d4:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
  e0:	80 81       	ld	r24, Z
  e2:	86 fd       	sbrc	r24, 6
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <_ZN11ADConverter4ReadEv+0x20>
	return ADC;
  e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ee:	08 95       	ret

000000f0 <main>:
#include <util/delay.h>
#include "UART.h"
#include "ADC.h"

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	ADConverter adcx(0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN11ADConverterC1Eh>
    /* Replace with your application code */
	UART sender(16e6, 9600);
 104:	00 e8       	ldi	r16, 0x80	; 128
 106:	15 e2       	ldi	r17, 0x25	; 37
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	54 e2       	ldi	r21, 0x24	; 36
 110:	64 ef       	ldi	r22, 0xF4	; 244
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	ce 01       	movw	r24, r28
 116:	02 96       	adiw	r24, 0x02	; 2
 118:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN4UARTC1Emm>
    while (1) 
    {
		adcx.Read();
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN11ADConverter4ReadEv>
		sender.Write("Hello");
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	71 e0       	ldi	r23, 0x01	; 1
 128:	ce 01       	movw	r24, r28
 12a:	02 96       	adiw	r24, 0x02	; 2
 12c:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN4UART5WriteEPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x46>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x50>
 140:	00 00       	nop
 142:	ec cf       	rjmp	.-40     	; 0x11c <main+0x2c>

00000144 <_ZN4UART8sendCharEc>:
	}
	Write("\n");
	return line;
}
uint8_t UART::sendChar(char c)
{
 144:	cf 93       	push	r28
 146:	c6 2f       	mov	r28, r22
	if (c == '\n')
 148:	6a 30       	cpi	r22, 0x0A	; 10
 14a:	19 f4       	brne	.+6      	; 0x152 <_ZN4UART8sendCharEc+0xe>
	{
		sendChar('\r');
 14c:	6d e0       	ldi	r22, 0x0D	; 13
 14e:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN4UART8sendCharEc>
	}
	while (!(UCSR0A & (1<<UDRE0))); //waits between transmissions
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	85 ff       	sbrs	r24, 5
 15a:	fd cf       	rjmp	.-6      	; 0x156 <_ZN4UART8sendCharEc+0x12>
	UDR0 = c; //Sends the UART transmission
 15c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <_ZN4UART5WriteEPKc>:
	Write("Initialized\n");
	//Test

}
uint8_t UART::Write(const char* string)
{
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	eb 01       	movw	r28, r22
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 170:	68 81       	ld	r22, Y
 172:	66 23       	and	r22, r22
 174:	41 f0       	breq	.+16     	; 0x186 <_ZN4UART5WriteEPKc+0x20>
 176:	8c 01       	movw	r16, r24
 178:	21 96       	adiw	r28, 0x01	; 1
	{
		sendChar(*(string + i));
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN4UART8sendCharEc>
}
uint8_t UART::Write(const char* string)
{
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 180:	69 91       	ld	r22, Y+
 182:	61 11       	cpse	r22, r1
 184:	fa cf       	rjmp	.-12     	; 0x17a <_ZN4UART5WriteEPKc+0x14>
		sendChar(*(string + i));
		++i;
	}
	
	return 0;
}
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <_ZN4UARTC1Emm>:
 * Created: 27-02-2020 20:43:18
 *  Author: troel
 */ 
#include "UART.h"

UART::UART(uint32_t fcpu, uint32_t BAUDRATE)
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
{
	UBRR0 = fcpu/16/BAUDRATE-1; //Sets the Baudrate
 19c:	cb 01       	movw	r24, r22
 19e:	ba 01       	movw	r22, r20
 1a0:	68 94       	set
 1a2:	13 f8       	bld	r1, 3
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	77 95       	ror	r23
 1aa:	67 95       	ror	r22
 1ac:	16 94       	lsr	r1
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <_ZN4UARTC1Emm+0x12>
 1b0:	a9 01       	movw	r20, r18
 1b2:	98 01       	movw	r18, r16
 1b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__udivmodsi4>
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	31 09       	sbc	r19, r1
 1bc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1c0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enables input and output
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00); 	//Set communication as 8bit(And 1 stop bit is default.)
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	Write("Initialized\n");
 1d0:	66 e0       	ldi	r22, 0x06	; 6
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN4UART5WriteEPKc>
	//Test

}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <__udivmodsi4>:
 1e4:	a1 e2       	ldi	r26, 0x21	; 33
 1e6:	1a 2e       	mov	r1, r26
 1e8:	aa 1b       	sub	r26, r26
 1ea:	bb 1b       	sub	r27, r27
 1ec:	fd 01       	movw	r30, r26
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <__udivmodsi4_ep>

000001f0 <__udivmodsi4_loop>:
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	ee 1f       	adc	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	a2 17       	cp	r26, r18
 1fa:	b3 07       	cpc	r27, r19
 1fc:	e4 07       	cpc	r30, r20
 1fe:	f5 07       	cpc	r31, r21
 200:	20 f0       	brcs	.+8      	; 0x20a <__udivmodsi4_ep>
 202:	a2 1b       	sub	r26, r18
 204:	b3 0b       	sbc	r27, r19
 206:	e4 0b       	sbc	r30, r20
 208:	f5 0b       	sbc	r31, r21

0000020a <__udivmodsi4_ep>:
 20a:	66 1f       	adc	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	1a 94       	dec	r1
 214:	69 f7       	brne	.-38     	; 0x1f0 <__udivmodsi4_loop>
 216:	60 95       	com	r22
 218:	70 95       	com	r23
 21a:	80 95       	com	r24
 21c:	90 95       	com	r25
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	bd 01       	movw	r22, r26
 224:	cf 01       	movw	r24, r30
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>

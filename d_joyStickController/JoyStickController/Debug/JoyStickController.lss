
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000012a8  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080013c  0080013c  00001378  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d12  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e7  00000000  00000000  000032e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  000050d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be4  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011cd  00000000  00000000  00006204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000073d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_13>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	d7 01       	movw	r26, r14

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e8 ea       	ldi	r30, 0xA8	; 168
      7e:	f2 e1       	ldi	r31, 0x12	; 18
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 33       	cpi	r26, 0x3C	; 60
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	ac e3       	ldi	r26, 0x3C	; 60
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a8 34       	cpi	r26, 0x48	; 72
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 80 01 	call	0x300	; 0x300 <main>
      b6:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN11ADConverterC1Ev>:
#include "ADC.h"


ADConverter::ADConverter()
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
      be:	ec e7       	ldi	r30, 0x7C	; 124
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	80 64       	ori	r24, 0x40	; 64
      c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
      c8:	ea e7       	ldi	r30, 0x7A	; 122
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	87 68       	ori	r24, 0x87	; 135
      d0:	80 83       	st	Z, r24
      d2:	08 95       	ret

000000d4 <_ZN11ADConverter4ReadEh>:
}
uint16_t ADConverter::Read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
      d4:	ec e7       	ldi	r30, 0x7C	; 124
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	80 7f       	andi	r24, 0xF0	; 240
      dc:	6f 70       	andi	r22, 0x0F	; 15
      de:	68 2b       	or	r22, r24
      e0:	60 83       	st	Z, r22
	
	ADCSRA |= (1 << ADSC);
      e2:	ea e7       	ldi	r30, 0x7A	; 122
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	80 64       	ori	r24, 0x40	; 64
      ea:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
      ec:	80 81       	ld	r24, Z
      ee:	86 fd       	sbrc	r24, 6
      f0:	fd cf       	rjmp	.-6      	; 0xec <_ZN11ADConverter4ReadEh+0x18>
	return ADC;
      f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
      fa:	08 95       	ret

000000fc <_ZN13BaseDataClass8ContinueEv>:
} //BaseDataClass

bool BaseDataClass::Continue()
{
	return true;
}
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	08 95       	ret

00000100 <_ZN13BaseDataClass7GetDataEPc>:

void BaseDataClass::GetData(char* string)
{
     100:	08 95       	ret

00000102 <_ZN13BaseDataClassC1Ev>:


#include "BaseDataClass.h"

// default constructor
BaseDataClass::BaseDataClass()
     102:	24 e1       	ldi	r18, 0x14	; 20
     104:	31 e0       	ldi	r19, 0x01	; 1
     106:	fc 01       	movw	r30, r24
     108:	31 83       	std	Z+1, r19	; 0x01
     10a:	20 83       	st	Z, r18
     10c:	08 95       	ret

0000010e <_ZN21DoubleClickDataToSend8ContinueEv>:
	strcpy(string, "A");
}

bool DoubleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
     10e:	89 b1       	in	r24, 0x09	; 9
     110:	82 fb       	bst	r24, 2
     112:	88 27       	eor	r24, r24
     114:	80 f9       	bld	r24, 0
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	89 27       	eor	r24, r25
     11a:	08 95       	ret

0000011c <_ZN21DoubleClickDataToSend7GetDataEPc>:
{
} //DoubleClickDataToSend

void DoubleClickDataToSend::GetData(char* string)
{
	strcpy(string, "A");
     11c:	81 e4       	ldi	r24, 0x41	; 65
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	fb 01       	movw	r30, r22
     122:	91 83       	std	Z+1, r25	; 0x01
     124:	80 83       	st	Z, r24
     126:	08 95       	ret

00000128 <_ZN21DoubleClickDataToSendC1Ev>:
#include <string.h>
#include <avr/io.h>


// default constructor
DoubleClickDataToSend::DoubleClickDataToSend()
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	ec 01       	movw	r28, r24
     12e:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
     132:	8c e1       	ldi	r24, 0x1C	; 28
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	99 83       	std	Y+1, r25	; 0x01
     138:	88 83       	st	Y, r24
{
} //DoubleClickDataToSend
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <_ZN18PositionDataToSend8ContinueEv>:
} //PositionDataToSend

bool PositionDataToSend::Continue()
{
	return true;
}
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	08 95       	ret

00000144 <_ZN18PositionDataToSend7GetDataEPc>:

void PositionDataToSend::GetData(char* string)
{
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	f6 2e       	mov	r15, r22
     15c:	e7 2e       	mov	r14, r23
	uint16_t xPos = voltageReader.Read(0);//ADC channel 0
     15e:	8c 01       	movw	r16, r24
     160:	0e 5f       	subi	r16, 0xFE	; 254
     162:	1f 4f       	sbci	r17, 0xFF	; 255
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	c8 01       	movw	r24, r16
     168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
     16c:	6c 01       	movw	r12, r24
	uint16_t yPos = voltageReader.Read(1);//ADC channel 1
     16e:	61 e0       	ldi	r22, 0x01	; 1
     170:	c8 01       	movw	r24, r16
     172:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
     176:	8c 01       	movw	r16, r24
	
	PositionTranslator t;
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN18PositionTranslatorC1Ev>
	
	sprintf(string, "%d", t.Translate(xPos, yPos));
     180:	a8 01       	movw	r20, r16
     182:	b6 01       	movw	r22, r12
     184:	ce 01       	movw	r24, r28
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN18PositionTranslator9TranslateEjj>
     18c:	1f 92       	push	r1
     18e:	8f 93       	push	r24
     190:	80 e2       	ldi	r24, 0x20	; 32
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	9f 93       	push	r25
     196:	8f 93       	push	r24
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <sprintf>
}
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	08 95       	ret

000001c0 <_ZN18PositionDataToSendC1Ev>:
#include "../PositionTranslator.h"
#include <string.h>
#include <stdio.h>

// default constructor
PositionDataToSend::PositionDataToSend()
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	d8 2f       	mov	r29, r24
     1c6:	c9 2f       	mov	r28, r25
     1c8:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
     1cc:	8d 2f       	mov	r24, r29
     1ce:	9c 2f       	mov	r25, r28
     1d0:	27 e2       	ldi	r18, 0x27	; 39
     1d2:	31 e0       	ldi	r19, 0x01	; 1
     1d4:	fc 01       	movw	r30, r24
     1d6:	21 93       	st	Z+, r18
     1d8:	31 93       	st	Z+, r19
     1da:	cf 01       	movw	r24, r30
     1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN11ADConverterC1Ev>
{
} //PositionDataToSend
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <_ZN21SingleClickDataToSend8ContinueEv>:
{
} //SingleClickDataToSend

bool SingleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
     1e6:	89 b1       	in	r24, 0x09	; 9
     1e8:	82 fb       	bst	r24, 2
     1ea:	88 27       	eor	r24, r24
     1ec:	80 f9       	bld	r24, 0
}
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	89 27       	eor	r24, r25
     1f2:	08 95       	ret

000001f4 <_ZN21SingleClickDataToSend7GetDataEPc>:
void SingleClickDataToSend::GetData(char* string)
{
	strcpy(string, "9");
     1f4:	89 e3       	ldi	r24, 0x39	; 57
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fb 01       	movw	r30, r22
     1fa:	91 83       	std	Z+1, r25	; 0x01
     1fc:	80 83       	st	Z, r24
     1fe:	08 95       	ret

00000200 <_ZN21SingleClickDataToSendC1Ev>:
#include "SingleClickDataToSend.h"
#include <string.h>
#include <avr/io.h>

// default constructor
SingleClickDataToSend::SingleClickDataToSend()
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ec 01       	movw	r28, r24
     206:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
     20a:	8f e2       	ldi	r24, 0x2F	; 47
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	99 83       	std	Y+1, r25	; 0x01
     210:	88 83       	st	Y, r24
{
} //SingleClickDataToSend
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_Z11resetTimer1v>:


// External interrupt 0/PORTD Pin 2
void resetTimer1()
{
	TCNT1H = TIMER1_HIGH_VALUE; //Reset counter
     218:	8b e0       	ldi	r24, 0x0B	; 11
     21a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = TIMER1_LOW_VALUE;
     21e:	8c ed       	ldi	r24, 0xDC	; 220
     220:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     224:	08 95       	ret

00000226 <__vector_1>:
}

bool doubleClickFlag = false;//Flag used for double click timing, not an indicator of double click
ISR(INT0_vect)
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	2f 93       	push	r18
     232:	3f 93       	push	r19
     234:	4f 93       	push	r20
     236:	5f 93       	push	r21
     238:	6f 93       	push	r22
     23a:	7f 93       	push	r23
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	af 93       	push	r26
     242:	bf 93       	push	r27
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
	if(doubleClickFlag) 
     248:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     24c:	88 23       	and	r24, r24
     24e:	81 f0       	breq	.+32     	; 0x270 <__vector_1+0x4a>
	{
		//Timer interrupted, double click
		TCCR1B &= 0b11111000; //Stop timer
     250:	e1 e8       	ldi	r30, 0x81	; 129
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	80 83       	st	Z, r24
		resetTimer1();
     25a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
		doubleClickFlag = false;
     25e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		dataController = &doubleClickClass;
     262:	8f e3       	ldi	r24, 0x3F	; 63
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dataController+0x1>
     26a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dataController>
     26e:	06 c0       	rjmp	.+12     	; 0x27c <__vector_1+0x56>
	}
	else
	{
		//Start the timer to wait for double click
		doubleClickFlag = true;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
		TCCR1B = (1<<CS10) | (1<<CS11);;  // Timer mode with 64 prescaler
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
     27c:	ff 91       	pop	r31
     27e:	ef 91       	pop	r30
     280:	bf 91       	pop	r27
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <__vector_13>:

// Timer 1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
     29e:	1f 92       	push	r1
     2a0:	0f 92       	push	r0
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	0f 92       	push	r0
     2a6:	11 24       	eor	r1, r1
     2a8:	2f 93       	push	r18
     2aa:	3f 93       	push	r19
     2ac:	4f 93       	push	r20
     2ae:	5f 93       	push	r21
     2b0:	6f 93       	push	r22
     2b2:	7f 93       	push	r23
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	af 93       	push	r26
     2ba:	bf 93       	push	r27
     2bc:	ef 93       	push	r30
     2be:	ff 93       	push	r31
	//Timer timed out, single click
	TCCR1B &= 0b11111000; //Stop timer
     2c0:	e1 e8       	ldi	r30, 0x81	; 129
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	88 7f       	andi	r24, 0xF8	; 248
     2c8:	80 83       	st	Z, r24
	resetTimer1();
     2ca:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
	doubleClickFlag = false;//No double click
     2ce:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
	dataController = &singleClickClass;
     2d2:	8d e3       	ldi	r24, 0x3D	; 61
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <dataController+0x1>
     2da:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dataController>
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <main>:


int main(void)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	64 97       	sbiw	r28, 0x14	; 20
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
	InitUART(UART0, 9600, 8, 0);
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	28 e0       	ldi	r18, 0x08	; 8
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	55 e2       	ldi	r21, 0x25	; 37
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 ec       	ldi	r24, 0xC0	; 192
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_Z8InitUARTjmhc>
	EICRA |= 0b00000010; //Falling edge of PORTD pin 2
     328:	e9 e6       	ldi	r30, 0x69	; 105
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	80 83       	st	Z, r24
	EIMSK |= 1; //Enable INT0 - PORTD pin 2	
     332:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRD = 0;
     334:	1a b8       	out	0x0a, r1	; 10
	DDRD = (0x01 << 4);
     336:	80 e1       	ldi	r24, 0x10	; 16
     338:	8a b9       	out	0x0a, r24	; 10
	resetTimer1();
     33a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>

	TCCR1A = 0x00;
     33e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
     348:	78 94       	sei

	
	char buffer[20];
	while (1)
	{
		dataController = &postionClass;
     34a:	01 e4       	ldi	r16, 0x41	; 65
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <dataController+0x1>
     352:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <dataController>
		while(dataController->Continue())
     356:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <dataController>
     35a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <dataController+0x1>
     35e:	dc 01       	movw	r26, r24
     360:	ed 91       	ld	r30, X+
     362:	fc 91       	ld	r31, X
     364:	01 90       	ld	r0, Z+
     366:	f0 81       	ld	r31, Z
     368:	e0 2d       	mov	r30, r0
     36a:	09 95       	icall
     36c:	88 23       	and	r24, r24
     36e:	79 f3       	breq	.-34     	; 0x34e <main+0x4e>
		{
			dataController->GetData(buffer);
     370:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <dataController>
     374:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <dataController+0x1>
     378:	dc 01       	movw	r26, r24
     37a:	ed 91       	ld	r30, X+
     37c:	fc 91       	ld	r31, X
     37e:	02 80       	ldd	r0, Z+2	; 0x02
     380:	f3 81       	ldd	r31, Z+3	; 0x03
     382:	e0 2d       	mov	r30, r0
     384:	be 01       	movw	r22, r28
     386:	6f 5f       	subi	r22, 0xFF	; 255
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	09 95       	icall
			SendString(UART0, buffer);
     38c:	be 01       	movw	r22, r28
     38e:	6f 5f       	subi	r22, 0xFF	; 255
     390:	7f 4f       	sbci	r23, 0xFF	; 255
     392:	80 ec       	ldi	r24, 0xC0	; 192
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 3a 04 	call	0x874	; 0x874 <_Z10SendStringjPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     39a:	bf ef       	ldi	r27, 0xFF	; 255
     39c:	20 e7       	ldi	r18, 0x70	; 112
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	b1 50       	subi	r27, 0x01	; 1
     3a2:	20 40       	sbci	r18, 0x00	; 0
     3a4:	80 40       	sbci	r24, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xa0>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xaa>
     3aa:	00 00       	nop
     3ac:	d4 cf       	rjmp	.-88     	; 0x356 <main+0x56>

000003ae <_GLOBAL__sub_I_dataController>:
#define TIMER1_HIGH_VALUE 0b00001011
#define TIMER1_LOW_VALUE  0b11011100 //15540 in total, 250 ms to overflow

//Data classes for switching
BaseDataClass *dataController;
PositionDataToSend postionClass;
     3ae:	81 e4       	ldi	r24, 0x41	; 65
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN18PositionDataToSendC1Ev>
DoubleClickDataToSend doubleClickClass;
     3b6:	8f e3       	ldi	r24, 0x3F	; 63
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 94 00 	call	0x128	; 0x128 <_ZN21DoubleClickDataToSendC1Ev>
SingleClickDataToSend singleClickClass;
     3be:	8d e3       	ldi	r24, 0x3D	; 61
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 00 01 	call	0x200	; 0x200 <_ZN21SingleClickDataToSendC1Ev>
     3c6:	08 95       	ret

000003c8 <_ZN18PositionTranslatorC1Ev>:
}

float PositionTranslator::determinant(Vector v1, Vector v2)
{
	return v1.x*v2.y - v2.x*v1.y;
}
     3c8:	08 95       	ret

000003ca <_ZN18PositionTranslator9normalizeEjj>:

Vector PositionTranslator::normalize(uint16_t x, uint16_t y)
{
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	28 97       	sbiw	r28, 0x08	; 8
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	7b 01       	movw	r14, r22
	Vector result;
	result.x = ((y-512.0)/512.0);
	result.y = ((x-512.0)/512.0);
	return result;			
     3e6:	ba 01       	movw	r22, r20
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 c1 04 	call	0x982	; 0x982 <__floatunsisf>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	54 e4       	ldi	r21, 0x44	; 68
     3f8:	0e 94 4f 04 	call	0x89e	; 0x89e <__subsf3>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	5b e3       	ldi	r21, 0x3B	; 59
     404:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     408:	16 2f       	mov	r17, r22
     40a:	46 2f       	mov	r20, r22
     40c:	57 2f       	mov	r21, r23
     40e:	68 2f       	mov	r22, r24
     410:	79 2f       	mov	r23, r25
     412:	49 83       	std	Y+1, r20	; 0x01
     414:	5a 83       	std	Y+2, r21	; 0x02
     416:	6b 83       	std	Y+3, r22	; 0x03
     418:	7c 83       	std	Y+4, r23	; 0x04
     41a:	b7 01       	movw	r22, r14
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 c1 04 	call	0x982	; 0x982 <__floatunsisf>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	54 e4       	ldi	r21, 0x44	; 68
     42c:	0e 94 4f 04 	call	0x89e	; 0x89e <__subsf3>
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	5b e3       	ldi	r21, 0x3B	; 59
     438:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     43c:	e6 2f       	mov	r30, r22
     43e:	46 2f       	mov	r20, r22
     440:	57 2f       	mov	r21, r23
     442:	68 2f       	mov	r22, r24
     444:	79 2f       	mov	r23, r25
     446:	4d 83       	std	Y+5, r20	; 0x05
     448:	5e 83       	std	Y+6, r21	; 0x06
     44a:	6f 83       	std	Y+7, r22	; 0x07
     44c:	78 87       	std	Y+8, r23	; 0x08
     44e:	21 2f       	mov	r18, r17
     450:	3a 81       	ldd	r19, Y+2	; 0x02
     452:	4b 81       	ldd	r20, Y+3	; 0x03
     454:	5c 81       	ldd	r21, Y+4	; 0x04
     456:	6e 2f       	mov	r22, r30
     458:	7e 81       	ldd	r23, Y+6	; 0x06
}
     45a:	8f 81       	ldd	r24, Y+7	; 0x07
     45c:	98 85       	ldd	r25, Y+8	; 0x08
     45e:	28 96       	adiw	r28, 0x08	; 8
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	08 95       	ret

00000476 <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_>:
uint8_t PositionTranslator::angleToData(Vector fromADC, Vector low, Vector high)
{
     476:	2f 92       	push	r2
     478:	3f 92       	push	r3
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	68 97       	sbiw	r28, 0x18	; 24
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	1c 01       	movw	r2, r24
     4ac:	09 83       	std	Y+1, r16	; 0x01
     4ae:	1a 83       	std	Y+2, r17	; 0x02
     4b0:	2b 83       	std	Y+3, r18	; 0x03
     4b2:	3c 83       	std	Y+4, r19	; 0x04
     4b4:	4d 83       	std	Y+5, r20	; 0x05
     4b6:	5e 83       	std	Y+6, r21	; 0x06
     4b8:	6f 83       	std	Y+7, r22	; 0x07
     4ba:	78 87       	std	Y+8, r23	; 0x08
     4bc:	89 86       	std	Y+9, r8	; 0x09
     4be:	9a 86       	std	Y+10, r9	; 0x0a
     4c0:	ab 86       	std	Y+11, r10	; 0x0b
     4c2:	bc 86       	std	Y+12, r11	; 0x0c
     4c4:	cd 86       	std	Y+13, r12	; 0x0d
     4c6:	de 86       	std	Y+14, r13	; 0x0e
     4c8:	ef 86       	std	Y+15, r14	; 0x0f
     4ca:	f8 8a       	std	Y+16, r15	; 0x10
     4cc:	8d a5       	ldd	r24, Y+45	; 0x2d
     4ce:	9e a5       	ldd	r25, Y+46	; 0x2e
     4d0:	af a5       	ldd	r26, Y+47	; 0x2f
     4d2:	b8 a9       	ldd	r27, Y+48	; 0x30
     4d4:	89 8b       	std	Y+17, r24	; 0x11
     4d6:	9a 8b       	std	Y+18, r25	; 0x12
     4d8:	ab 8b       	std	Y+19, r26	; 0x13
     4da:	bc 8b       	std	Y+20, r27	; 0x14
     4dc:	49 a8       	ldd	r4, Y+49	; 0x31
     4de:	5a a8       	ldd	r5, Y+50	; 0x32
     4e0:	6b a8       	ldd	r6, Y+51	; 0x33
     4e2:	7c a8       	ldd	r7, Y+52	; 0x34
     4e4:	c9 80       	ldd	r12, Y+1	; 0x01
     4e6:	da 80       	ldd	r13, Y+2	; 0x02
     4e8:	eb 80       	ldd	r14, Y+3	; 0x03
     4ea:	fc 80       	ldd	r15, Y+4	; 0x04
     4ec:	8d 80       	ldd	r8, Y+5	; 0x05
     4ee:	9e 80       	ldd	r9, Y+6	; 0x06
     4f0:	af 80       	ldd	r10, Y+7	; 0x07
     4f2:	b8 84       	ldd	r11, Y+8	; 0x08
	static int i = 0;

	if(determinant(low, fromADC) > 0 && determinant(high, fromADC) < 0)
     4f4:	29 85       	ldd	r18, Y+9	; 0x09
     4f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f8:	4b 85       	ldd	r20, Y+11	; 0x0b
     4fa:	5c 85       	ldd	r21, Y+12	; 0x0c
     4fc:	c5 01       	movw	r24, r10
     4fe:	b4 01       	movw	r22, r8
     500:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     504:	6d 8b       	std	Y+21, r22	; 0x15
     506:	7e 8b       	std	Y+22, r23	; 0x16
     508:	8f 8b       	std	Y+23, r24	; 0x17
     50a:	98 8f       	std	Y+24, r25	; 0x18
     50c:	2d 85       	ldd	r18, Y+13	; 0x0d
     50e:	3e 85       	ldd	r19, Y+14	; 0x0e
     510:	4f 85       	ldd	r20, Y+15	; 0x0f
     512:	58 89       	ldd	r21, Y+16	; 0x10
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	6d 89       	ldd	r22, Y+21	; 0x15
     522:	7e 89       	ldd	r23, Y+22	; 0x16
     524:	8f 89       	ldd	r24, Y+23	; 0x17
     526:	98 8d       	ldd	r25, Y+24	; 0x18
     528:	0e 94 4f 04 	call	0x89e	; 0x89e <__subsf3>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	a9 01       	movw	r20, r18
     532:	0e 94 73 05 	call	0xae6	; 0xae6 <__gesf2>
     536:	18 16       	cp	r1, r24
     538:	4c f5       	brge	.+82     	; 0x58c <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_+0x116>
     53a:	a5 01       	movw	r20, r10
     53c:	94 01       	movw	r18, r8
     53e:	69 89       	ldd	r22, Y+17	; 0x11
     540:	7a 89       	ldd	r23, Y+18	; 0x12
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     54a:	4b 01       	movw	r8, r22
     54c:	5c 01       	movw	r10, r24
     54e:	a3 01       	movw	r20, r6
     550:	92 01       	movw	r18, r4
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c5 01       	movw	r24, r10
     560:	b4 01       	movw	r22, r8
     562:	0e 94 4f 04 	call	0x89e	; 0x89e <__subsf3>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	0e 94 bc 04 	call	0x978	; 0x978 <__cmpsf2>
     570:	88 23       	and	r24, r24
     572:	64 f4       	brge	.+24     	; 0x58c <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_+0x116>
	{
		char toReturn = dataArray[i];
     574:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i>
     578:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i+0x1>
     57c:	ed 5c       	subi	r30, 0xCD	; 205
     57e:	fe 4f       	sbci	r31, 0xFE	; 254
     580:	80 81       	ld	r24, Z
		i = 0;
     582:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i+0x1>
     586:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i>
		return toReturn;
     58a:	5b c0       	rjmp	.+182    	; 0x642 <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_+0x1cc>
	}
	else
	{
		low.x = high.x*COS_TURN-high.y*SIN_TURN;
     58c:	21 e8       	ldi	r18, 0x81	; 129
     58e:	34 e0       	ldi	r19, 0x04	; 4
     590:	45 e3       	ldi	r20, 0x35	; 53
     592:	5f e3       	ldi	r21, 0x3F	; 63
     594:	69 89       	ldd	r22, Y+17	; 0x11
     596:	7a 89       	ldd	r23, Y+18	; 0x12
     598:	8b 89       	ldd	r24, Y+19	; 0x13
     59a:	9c 89       	ldd	r25, Y+20	; 0x14
     59c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     5a0:	6b 01       	movw	r12, r22
     5a2:	7c 01       	movw	r14, r24
     5a4:	21 e8       	ldi	r18, 0x81	; 129
     5a6:	34 e0       	ldi	r19, 0x04	; 4
     5a8:	45 e3       	ldi	r20, 0x35	; 53
     5aa:	5f e3       	ldi	r21, 0x3F	; 63
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     5b4:	4b 01       	movw	r8, r22
     5b6:	5c 01       	movw	r10, r24
		low.y = high.x*SIN_TURN+high.y*COS_TURN;
		i++;
     5b8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i>
     5bc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i+0x1>
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i+0x1>
     5c6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_ZZN18PositionTranslator11angleToDataE6VectorS0_S0_E1i>
		return angleToData(fromADC, high, low);
     5ca:	a5 01       	movw	r20, r10
     5cc:	94 01       	movw	r18, r8
     5ce:	c7 01       	movw	r24, r14
     5d0:	b6 01       	movw	r22, r12
     5d2:	0e 94 4f 04 	call	0x89e	; 0x89e <__subsf3>
     5d6:	69 87       	std	Y+9, r22	; 0x09
     5d8:	7a 87       	std	Y+10, r23	; 0x0a
     5da:	8b 87       	std	Y+11, r24	; 0x0b
     5dc:	9c 87       	std	Y+12, r25	; 0x0c
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	c7 01       	movw	r24, r14
     5e4:	b6 01       	movw	r22, r12
     5e6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3>
     5ea:	6d 87       	std	Y+13, r22	; 0x0d
     5ec:	7e 87       	std	Y+14, r23	; 0x0e
     5ee:	8f 87       	std	Y+15, r24	; 0x0f
     5f0:	98 8b       	std	Y+16, r25	; 0x10
     5f2:	ad b7       	in	r26, 0x3d	; 61
     5f4:	be b7       	in	r27, 0x3e	; 62
     5f6:	18 97       	sbiw	r26, 0x08	; 8
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	be bf       	out	0x3e, r27	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	ad bf       	out	0x3d, r26	; 61
     602:	11 96       	adiw	r26, 0x01	; 1
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	fe 01       	movw	r30, r28
     608:	39 96       	adiw	r30, 0x09	; 9
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	8a 95       	dec	r24
     610:	e1 f7       	brne	.-8      	; 0x60a <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_+0x194>
     612:	8d a4       	ldd	r8, Y+45	; 0x2d
     614:	9e a4       	ldd	r9, Y+46	; 0x2e
     616:	af a4       	ldd	r10, Y+47	; 0x2f
     618:	b8 a8       	ldd	r11, Y+48	; 0x30
     61a:	c9 a8       	ldd	r12, Y+49	; 0x31
     61c:	da a8       	ldd	r13, Y+50	; 0x32
     61e:	eb a8       	ldd	r14, Y+51	; 0x33
     620:	fc a8       	ldd	r15, Y+52	; 0x34
     622:	09 81       	ldd	r16, Y+1	; 0x01
     624:	1a 81       	ldd	r17, Y+2	; 0x02
     626:	2b 81       	ldd	r18, Y+3	; 0x03
     628:	3c 81       	ldd	r19, Y+4	; 0x04
     62a:	4d 81       	ldd	r20, Y+5	; 0x05
     62c:	5e 81       	ldd	r21, Y+6	; 0x06
     62e:	6f 81       	ldd	r22, Y+7	; 0x07
     630:	78 85       	ldd	r23, Y+8	; 0x08
     632:	c1 01       	movw	r24, r2
     634:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_>
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
	}
}
     642:	68 96       	adiw	r28, 0x18	; 24
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	7f 90       	pop	r7
     668:	6f 90       	pop	r6
     66a:	5f 90       	pop	r5
     66c:	4f 90       	pop	r4
     66e:	3f 90       	pop	r3
     670:	2f 90       	pop	r2
     672:	08 95       	ret

00000674 <_ZN18PositionTranslator9TranslateEjj>:
PositionTranslator::PositionTranslator()
{
} //PositionTranslator

uint8_t PositionTranslator::Translate(uint16_t xPos, uint16_t yPos)
{
     674:	6f 92       	push	r6
     676:	7f 92       	push	r7
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	6c 97       	sbiw	r28, 0x1c	; 28
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	3c 01       	movw	r6, r24
	Vector highStart = {0.9239, 0.3827};//22.5 degree from x-axis
     6a2:	88 e0       	ldi	r24, 0x08	; 8
     6a4:	e0 e0       	ldi	r30, 0x00	; 0
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	de 01       	movw	r26, r28
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	01 90       	ld	r0, Z+
     6ae:	0d 92       	st	X+, r0
     6b0:	8a 95       	dec	r24
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <_ZN18PositionTranslator9TranslateEjj+0x38>
	Vector lowStart = {0.9239, -0.3827};//-22.5 degree from x-axis
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	e8 e0       	ldi	r30, 0x08	; 8
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	de 01       	movw	r26, r28
     6bc:	19 96       	adiw	r26, 0x09	; 9
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	8a 95       	dec	r24
     6c4:	e1 f7       	brne	.-8      	; 0x6be <_ZN18PositionTranslator9TranslateEjj+0x4a>
	
	Vector fromADC = normalize(xPos, yPos);
     6c6:	c3 01       	movw	r24, r6
     6c8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN18PositionTranslator9normalizeEjj>
     6cc:	29 8b       	std	Y+17, r18	; 0x11
     6ce:	3a 8b       	std	Y+18, r19	; 0x12
     6d0:	4b 8b       	std	Y+19, r20	; 0x13
     6d2:	5c 8b       	std	Y+20, r21	; 0x14
     6d4:	6d 8b       	std	Y+21, r22	; 0x15
     6d6:	7e 8b       	std	Y+22, r23	; 0x16
     6d8:	8f 8b       	std	Y+23, r24	; 0x17
     6da:	98 8f       	std	Y+24, r25	; 0x18
     6dc:	89 88       	ldd	r8, Y+17	; 0x11
     6de:	9a 88       	ldd	r9, Y+18	; 0x12
     6e0:	ab 88       	ldd	r10, Y+19	; 0x13
     6e2:	bc 88       	ldd	r11, Y+20	; 0x14
     6e4:	cd 88       	ldd	r12, Y+21	; 0x15
     6e6:	de 88       	ldd	r13, Y+22	; 0x16
     6e8:	ef 88       	ldd	r14, Y+23	; 0x17
     6ea:	f8 8c       	ldd	r15, Y+24	; 0x18
	}
}

float PositionTranslator::length(Vector v)
{
	return sqrt((v.x*v.x)+(v.y*v.y));
     6ec:	a5 01       	movw	r20, r10
     6ee:	94 01       	movw	r18, r8
     6f0:	c5 01       	movw	r24, r10
     6f2:	b4 01       	movw	r22, r8
     6f4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     6f8:	69 8f       	std	Y+25, r22	; 0x19
     6fa:	7a 8f       	std	Y+26, r23	; 0x1a
     6fc:	8b 8f       	std	Y+27, r24	; 0x1b
     6fe:	9c 8f       	std	Y+28, r25	; 0x1c
     700:	a5 01       	movw	r20, r10
     702:	94 01       	movw	r18, r8
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	a7 01       	movw	r20, r14
     712:	96 01       	movw	r18, r12
     714:	c7 01       	movw	r24, r14
     716:	b6 01       	movw	r22, r12
     718:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsf3>
     71c:	9b 01       	movw	r18, r22
     71e:	ac 01       	movw	r20, r24
     720:	c5 01       	movw	r24, r10
     722:	b4 01       	movw	r22, r8
     724:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3>
     728:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <sqrt>
	Vector highStart = {0.9239, 0.3827};//22.5 degree from x-axis
	Vector lowStart = {0.9239, -0.3827};//-22.5 degree from x-axis
	
	Vector fromADC = normalize(xPos, yPos);
	
	if(length(fromADC) >= 0.4)
     72c:	2d ec       	ldi	r18, 0xCD	; 205
     72e:	3c ec       	ldi	r19, 0xCC	; 204
     730:	4c ec       	ldi	r20, 0xCC	; 204
     732:	5e e3       	ldi	r21, 0x3E	; 62
     734:	0e 94 73 05 	call	0xae6	; 0xae6 <__gesf2>
     738:	88 23       	and	r24, r24
     73a:	64 f1       	brlt	.+88     	; 0x794 <_ZN18PositionTranslator9TranslateEjj+0x120>
		return angleToData(fromADC, lowStart, highStart); 
     73c:	2d b7       	in	r18, 0x3d	; 61
     73e:	3e b7       	in	r19, 0x3e	; 62
     740:	28 50       	subi	r18, 0x08	; 8
     742:	31 09       	sbc	r19, r1
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	3e bf       	out	0x3e, r19	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	2d bf       	out	0x3d, r18	; 61
     74e:	ad b7       	in	r26, 0x3d	; 61
     750:	be b7       	in	r27, 0x3e	; 62
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	88 e0       	ldi	r24, 0x08	; 8
     756:	fe 01       	movw	r30, r28
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	8a 95       	dec	r24
     760:	e1 f7       	brne	.-8      	; 0x75a <_ZN18PositionTranslator9TranslateEjj+0xe6>
     762:	89 84       	ldd	r8, Y+9	; 0x09
     764:	9a 84       	ldd	r9, Y+10	; 0x0a
     766:	ab 84       	ldd	r10, Y+11	; 0x0b
     768:	bc 84       	ldd	r11, Y+12	; 0x0c
     76a:	cd 84       	ldd	r12, Y+13	; 0x0d
     76c:	de 84       	ldd	r13, Y+14	; 0x0e
     76e:	ef 84       	ldd	r14, Y+15	; 0x0f
     770:	f8 88       	ldd	r15, Y+16	; 0x10
     772:	09 89       	ldd	r16, Y+17	; 0x11
     774:	1a 89       	ldd	r17, Y+18	; 0x12
     776:	2b 89       	ldd	r18, Y+19	; 0x13
     778:	3c 89       	ldd	r19, Y+20	; 0x14
     77a:	4d 89       	ldd	r20, Y+21	; 0x15
     77c:	5e 89       	ldd	r21, Y+22	; 0x16
     77e:	6f 89       	ldd	r22, Y+23	; 0x17
     780:	78 8d       	ldd	r23, Y+24	; 0x18
     782:	c3 01       	movw	r24, r6
     784:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN18PositionTranslator11angleToDataE6VectorS0_S0_>
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	01 c0       	rjmp	.+2      	; 0x796 <_ZN18PositionTranslator9TranslateEjj+0x122>
	else
		return 4;
     794:	84 e0       	ldi	r24, 0x04	; 4
}
     796:	6c 96       	adiw	r28, 0x1c	; 28
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	08 95       	ret

000007c0 <_Z8InitUARTjmhc>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     7c0:	0f 93       	push	r16
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
     7c8:	db 01       	movw	r26, r22
     7ca:	ca 01       	movw	r24, r20
     7cc:	8c 52       	subi	r24, 0x2C	; 44
     7ce:	91 40       	sbci	r25, 0x01	; 1
     7d0:	a1 09       	sbc	r26, r1
     7d2:	b1 09       	sbc	r27, r1
     7d4:	85 3d       	cpi	r24, 0xD5	; 213
     7d6:	90 4c       	sbci	r25, 0xC0	; 192
     7d8:	a1 40       	sbci	r26, 0x01	; 1
     7da:	b1 05       	cpc	r27, r1
     7dc:	08 f0       	brcs	.+2      	; 0x7e0 <_Z8InitUARTjmhc+0x20>
     7de:	40 c0       	rjmp	.+128    	; 0x860 <_Z8InitUARTjmhc+0xa0>
     7e0:	25 50       	subi	r18, 0x05	; 5
     7e2:	24 30       	cpi	r18, 0x04	; 4
     7e4:	e8 f5       	brcc	.+122    	; 0x860 <_Z8InitUARTjmhc+0xa0>
     7e6:	80 e2       	ldi	r24, 0x20	; 32
     7e8:	88 83       	st	Y, r24
     7ea:	88 e1       	ldi	r24, 0x18	; 24
     7ec:	89 83       	std	Y+1, r24	; 0x01
     7ee:	22 0f       	add	r18, r18
     7f0:	2a 83       	std	Y+2, r18	; 0x02
     7f2:	05 34       	cpi	r16, 0x45	; 69
     7f4:	21 f4       	brne	.+8      	; 0x7fe <_Z8InitUARTjmhc+0x3e>
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	80 62       	ori	r24, 0x20	; 32
     7fa:	8a 83       	std	Y+2, r24	; 0x02
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <_Z8InitUARTjmhc+0x48>
     7fe:	0f 34       	cpi	r16, 0x4F	; 79
     800:	19 f4       	brne	.+6      	; 0x808 <_Z8InitUARTjmhc+0x48>
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	80 63       	ori	r24, 0x30	; 48
     806:	8a 83       	std	Y+2, r24	; 0x02
     808:	db 01       	movw	r26, r22
     80a:	ca 01       	movw	r24, r20
     80c:	80 58       	subi	r24, 0x80	; 128
     80e:	9b 47       	sbci	r25, 0x7B	; 123
     810:	a1 4e       	sbci	r26, 0xE1	; 225
     812:	bf 4f       	sbci	r27, 0xFF	; 255
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	aa 1f       	adc	r26, r26
     81a:	bb 1f       	adc	r27, r27
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	aa 1f       	adc	r26, r26
     822:	bb 1f       	adc	r27, r27
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	aa 1f       	adc	r26, r26
     82a:	bb 1f       	adc	r27, r27
     82c:	44 0f       	add	r20, r20
     82e:	55 1f       	adc	r21, r21
     830:	66 1f       	adc	r22, r22
     832:	77 1f       	adc	r23, r23
     834:	44 0f       	add	r20, r20
     836:	55 1f       	adc	r21, r21
     838:	66 1f       	adc	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	9a 01       	movw	r18, r20
     83e:	ab 01       	movw	r20, r22
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	44 1f       	adc	r20, r20
     846:	55 1f       	adc	r21, r21
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	44 1f       	adc	r20, r20
     84e:	55 1f       	adc	r21, r21
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0e 94 40 06 	call	0xc80	; 0xc80 <__udivmodsi4>
     858:	21 50       	subi	r18, 0x01	; 1
     85a:	31 09       	sbc	r19, r1
     85c:	3d 83       	std	Y+5, r19	; 0x05
     85e:	2c 83       	std	Y+4, r18	; 0x04
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <_Z8SendCharjc>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     868:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     86a:	90 81       	ld	r25, Z
     86c:	95 ff       	sbrs	r25, 5
     86e:	fd cf       	rjmp	.-6      	; 0x86a <_Z8SendCharjc+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     870:	66 83       	std	Z+6, r22	; 0x06
     872:	08 95       	ret

00000874 <_Z10SendStringjPKc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     87e:	68 81       	ld	r22, Y
     880:	66 23       	and	r22, r22
     882:	41 f0       	breq	.+16     	; 0x894 <_Z10SendStringjPKc+0x20>
     884:	8c 01       	movw	r16, r24
     886:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 34 04 	call	0x868	; 0x868 <_Z8SendCharjc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     88e:	69 91       	ld	r22, Y+
     890:	61 11       	cpse	r22, r1
     892:	fa cf       	rjmp	.-12     	; 0x888 <_Z10SendStringjPKc+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <__subsf3>:
     89e:	50 58       	subi	r21, 0x80	; 128

000008a0 <__addsf3>:
     8a0:	bb 27       	eor	r27, r27
     8a2:	aa 27       	eor	r26, r26
     8a4:	0e 94 67 04 	call	0x8ce	; 0x8ce <__addsf3x>
     8a8:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_round>
     8ac:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscA>
     8b0:	38 f0       	brcs	.+14     	; 0x8c0 <__addsf3+0x20>
     8b2:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_pscB>
     8b6:	20 f0       	brcs	.+8      	; 0x8c0 <__addsf3+0x20>
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <__addsf3+0x28>
     8ba:	9f 3f       	cpi	r25, 0xFF	; 255
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <__addsf3+0x24>
     8be:	26 f4       	brtc	.+8      	; 0x8c8 <__addsf3+0x28>
     8c0:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_nan>
     8c4:	0e f4       	brtc	.+2      	; 0x8c8 <__addsf3+0x28>
     8c6:	e0 95       	com	r30
     8c8:	e7 fb       	bst	r30, 7
     8ca:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>

000008ce <__addsf3x>:
     8ce:	e9 2f       	mov	r30, r25
     8d0:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_split3>
     8d4:	58 f3       	brcs	.-42     	; 0x8ac <__addsf3+0xc>
     8d6:	ba 17       	cp	r27, r26
     8d8:	62 07       	cpc	r22, r18
     8da:	73 07       	cpc	r23, r19
     8dc:	84 07       	cpc	r24, r20
     8de:	95 07       	cpc	r25, r21
     8e0:	20 f0       	brcs	.+8      	; 0x8ea <__addsf3x+0x1c>
     8e2:	79 f4       	brne	.+30     	; 0x902 <__stack+0x3>
     8e4:	a6 f5       	brtc	.+104    	; 0x94e <__stack+0x4f>
     8e6:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__fp_zero>
     8ea:	0e f4       	brtc	.+2      	; 0x8ee <__addsf3x+0x20>
     8ec:	e0 95       	com	r30
     8ee:	0b 2e       	mov	r0, r27
     8f0:	ba 2f       	mov	r27, r26
     8f2:	a0 2d       	mov	r26, r0
     8f4:	0b 01       	movw	r0, r22
     8f6:	b9 01       	movw	r22, r18
     8f8:	90 01       	movw	r18, r0
     8fa:	0c 01       	movw	r0, r24
     8fc:	ca 01       	movw	r24, r20
     8fe:	a0 01       	movw	r20, r0
     900:	11 24       	eor	r1, r1
     902:	ff 27       	eor	r31, r31
     904:	59 1b       	sub	r21, r25
     906:	99 f0       	breq	.+38     	; 0x92e <__stack+0x2f>
     908:	59 3f       	cpi	r21, 0xF9	; 249
     90a:	50 f4       	brcc	.+20     	; 0x920 <__stack+0x21>
     90c:	50 3e       	cpi	r21, 0xE0	; 224
     90e:	68 f1       	brcs	.+90     	; 0x96a <__stack+0x6b>
     910:	1a 16       	cp	r1, r26
     912:	f0 40       	sbci	r31, 0x00	; 0
     914:	a2 2f       	mov	r26, r18
     916:	23 2f       	mov	r18, r19
     918:	34 2f       	mov	r19, r20
     91a:	44 27       	eor	r20, r20
     91c:	58 5f       	subi	r21, 0xF8	; 248
     91e:	f3 cf       	rjmp	.-26     	; 0x906 <__stack+0x7>
     920:	46 95       	lsr	r20
     922:	37 95       	ror	r19
     924:	27 95       	ror	r18
     926:	a7 95       	ror	r26
     928:	f0 40       	sbci	r31, 0x00	; 0
     92a:	53 95       	inc	r21
     92c:	c9 f7       	brne	.-14     	; 0x920 <__stack+0x21>
     92e:	7e f4       	brtc	.+30     	; 0x94e <__stack+0x4f>
     930:	1f 16       	cp	r1, r31
     932:	ba 0b       	sbc	r27, r26
     934:	62 0b       	sbc	r22, r18
     936:	73 0b       	sbc	r23, r19
     938:	84 0b       	sbc	r24, r20
     93a:	ba f0       	brmi	.+46     	; 0x96a <__stack+0x6b>
     93c:	91 50       	subi	r25, 0x01	; 1
     93e:	a1 f0       	breq	.+40     	; 0x968 <__stack+0x69>
     940:	ff 0f       	add	r31, r31
     942:	bb 1f       	adc	r27, r27
     944:	66 1f       	adc	r22, r22
     946:	77 1f       	adc	r23, r23
     948:	88 1f       	adc	r24, r24
     94a:	c2 f7       	brpl	.-16     	; 0x93c <__stack+0x3d>
     94c:	0e c0       	rjmp	.+28     	; 0x96a <__stack+0x6b>
     94e:	ba 0f       	add	r27, r26
     950:	62 1f       	adc	r22, r18
     952:	73 1f       	adc	r23, r19
     954:	84 1f       	adc	r24, r20
     956:	48 f4       	brcc	.+18     	; 0x96a <__stack+0x6b>
     958:	87 95       	ror	r24
     95a:	77 95       	ror	r23
     95c:	67 95       	ror	r22
     95e:	b7 95       	ror	r27
     960:	f7 95       	ror	r31
     962:	9e 3f       	cpi	r25, 0xFE	; 254
     964:	08 f0       	brcs	.+2      	; 0x968 <__stack+0x69>
     966:	b0 cf       	rjmp	.-160    	; 0x8c8 <__addsf3+0x28>
     968:	93 95       	inc	r25
     96a:	88 0f       	add	r24, r24
     96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x71>
     96e:	99 27       	eor	r25, r25
     970:	ee 0f       	add	r30, r30
     972:	97 95       	ror	r25
     974:	87 95       	ror	r24
     976:	08 95       	ret

00000978 <__cmpsf2>:
     978:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_cmp>
     97c:	08 f4       	brcc	.+2      	; 0x980 <__cmpsf2+0x8>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	08 95       	ret

00000982 <__floatunsisf>:
     982:	e8 94       	clt
     984:	09 c0       	rjmp	.+18     	; 0x998 <__floatsisf+0x12>

00000986 <__floatsisf>:
     986:	97 fb       	bst	r25, 7
     988:	3e f4       	brtc	.+14     	; 0x998 <__floatsisf+0x12>
     98a:	90 95       	com	r25
     98c:	80 95       	com	r24
     98e:	70 95       	com	r23
     990:	61 95       	neg	r22
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	8f 4f       	sbci	r24, 0xFF	; 255
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	99 23       	and	r25, r25
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <__floatsisf+0x40>
     99c:	f9 2f       	mov	r31, r25
     99e:	96 e9       	ldi	r25, 0x96	; 150
     9a0:	bb 27       	eor	r27, r27
     9a2:	93 95       	inc	r25
     9a4:	f6 95       	lsr	r31
     9a6:	87 95       	ror	r24
     9a8:	77 95       	ror	r23
     9aa:	67 95       	ror	r22
     9ac:	b7 95       	ror	r27
     9ae:	f1 11       	cpse	r31, r1
     9b0:	f8 cf       	rjmp	.-16     	; 0x9a2 <__floatsisf+0x1c>
     9b2:	fa f4       	brpl	.+62     	; 0x9f2 <__floatsisf+0x6c>
     9b4:	bb 0f       	add	r27, r27
     9b6:	11 f4       	brne	.+4      	; 0x9bc <__floatsisf+0x36>
     9b8:	60 ff       	sbrs	r22, 0
     9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <__floatsisf+0x6c>
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	8f 4f       	sbci	r24, 0xFF	; 255
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <__floatsisf+0x6c>
     9c6:	88 23       	and	r24, r24
     9c8:	11 f0       	breq	.+4      	; 0x9ce <__floatsisf+0x48>
     9ca:	96 e9       	ldi	r25, 0x96	; 150
     9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <__floatsisf+0x6a>
     9ce:	77 23       	and	r23, r23
     9d0:	21 f0       	breq	.+8      	; 0x9da <__floatsisf+0x54>
     9d2:	9e e8       	ldi	r25, 0x8E	; 142
     9d4:	87 2f       	mov	r24, r23
     9d6:	76 2f       	mov	r23, r22
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <__floatsisf+0x5e>
     9da:	66 23       	and	r22, r22
     9dc:	71 f0       	breq	.+28     	; 0x9fa <__floatsisf+0x74>
     9de:	96 e8       	ldi	r25, 0x86	; 134
     9e0:	86 2f       	mov	r24, r22
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	2a f0       	brmi	.+10     	; 0x9f2 <__floatsisf+0x6c>
     9e8:	9a 95       	dec	r25
     9ea:	66 0f       	add	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	88 1f       	adc	r24, r24
     9f0:	da f7       	brpl	.-10     	; 0x9e8 <__floatsisf+0x62>
     9f2:	88 0f       	add	r24, r24
     9f4:	96 95       	lsr	r25
     9f6:	87 95       	ror	r24
     9f8:	97 f9       	bld	r25, 7
     9fa:	08 95       	ret

000009fc <__fp_cmp>:
     9fc:	99 0f       	add	r25, r25
     9fe:	00 08       	sbc	r0, r0
     a00:	55 0f       	add	r21, r21
     a02:	aa 0b       	sbc	r26, r26
     a04:	e0 e8       	ldi	r30, 0x80	; 128
     a06:	fe ef       	ldi	r31, 0xFE	; 254
     a08:	16 16       	cp	r1, r22
     a0a:	17 06       	cpc	r1, r23
     a0c:	e8 07       	cpc	r30, r24
     a0e:	f9 07       	cpc	r31, r25
     a10:	c0 f0       	brcs	.+48     	; 0xa42 <__fp_cmp+0x46>
     a12:	12 16       	cp	r1, r18
     a14:	13 06       	cpc	r1, r19
     a16:	e4 07       	cpc	r30, r20
     a18:	f5 07       	cpc	r31, r21
     a1a:	98 f0       	brcs	.+38     	; 0xa42 <__fp_cmp+0x46>
     a1c:	62 1b       	sub	r22, r18
     a1e:	73 0b       	sbc	r23, r19
     a20:	84 0b       	sbc	r24, r20
     a22:	95 0b       	sbc	r25, r21
     a24:	39 f4       	brne	.+14     	; 0xa34 <__fp_cmp+0x38>
     a26:	0a 26       	eor	r0, r26
     a28:	61 f0       	breq	.+24     	; 0xa42 <__fp_cmp+0x46>
     a2a:	23 2b       	or	r18, r19
     a2c:	24 2b       	or	r18, r20
     a2e:	25 2b       	or	r18, r21
     a30:	21 f4       	brne	.+8      	; 0xa3a <__fp_cmp+0x3e>
     a32:	08 95       	ret
     a34:	0a 26       	eor	r0, r26
     a36:	09 f4       	brne	.+2      	; 0xa3a <__fp_cmp+0x3e>
     a38:	a1 40       	sbci	r26, 0x01	; 1
     a3a:	a6 95       	lsr	r26
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	81 1d       	adc	r24, r1
     a40:	81 1d       	adc	r24, r1
     a42:	08 95       	ret

00000a44 <__fp_inf>:
     a44:	97 f9       	bld	r25, 7
     a46:	9f 67       	ori	r25, 0x7F	; 127
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	08 95       	ret

00000a50 <__fp_nan>:
     a50:	9f ef       	ldi	r25, 0xFF	; 255
     a52:	80 ec       	ldi	r24, 0xC0	; 192
     a54:	08 95       	ret

00000a56 <__fp_pscA>:
     a56:	00 24       	eor	r0, r0
     a58:	0a 94       	dec	r0
     a5a:	16 16       	cp	r1, r22
     a5c:	17 06       	cpc	r1, r23
     a5e:	18 06       	cpc	r1, r24
     a60:	09 06       	cpc	r0, r25
     a62:	08 95       	ret

00000a64 <__fp_pscB>:
     a64:	00 24       	eor	r0, r0
     a66:	0a 94       	dec	r0
     a68:	12 16       	cp	r1, r18
     a6a:	13 06       	cpc	r1, r19
     a6c:	14 06       	cpc	r1, r20
     a6e:	05 06       	cpc	r0, r21
     a70:	08 95       	ret

00000a72 <__fp_round>:
     a72:	09 2e       	mov	r0, r25
     a74:	03 94       	inc	r0
     a76:	00 0c       	add	r0, r0
     a78:	11 f4       	brne	.+4      	; 0xa7e <__fp_round+0xc>
     a7a:	88 23       	and	r24, r24
     a7c:	52 f0       	brmi	.+20     	; 0xa92 <__fp_round+0x20>
     a7e:	bb 0f       	add	r27, r27
     a80:	40 f4       	brcc	.+16     	; 0xa92 <__fp_round+0x20>
     a82:	bf 2b       	or	r27, r31
     a84:	11 f4       	brne	.+4      	; 0xa8a <__fp_round+0x18>
     a86:	60 ff       	sbrs	r22, 0
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <__fp_round+0x20>
     a8a:	6f 5f       	subi	r22, 0xFF	; 255
     a8c:	7f 4f       	sbci	r23, 0xFF	; 255
     a8e:	8f 4f       	sbci	r24, 0xFF	; 255
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	08 95       	ret

00000a94 <__fp_split3>:
     a94:	57 fd       	sbrc	r21, 7
     a96:	90 58       	subi	r25, 0x80	; 128
     a98:	44 0f       	add	r20, r20
     a9a:	55 1f       	adc	r21, r21
     a9c:	59 f0       	breq	.+22     	; 0xab4 <__fp_splitA+0x10>
     a9e:	5f 3f       	cpi	r21, 0xFF	; 255
     aa0:	71 f0       	breq	.+28     	; 0xabe <__fp_splitA+0x1a>
     aa2:	47 95       	ror	r20

00000aa4 <__fp_splitA>:
     aa4:	88 0f       	add	r24, r24
     aa6:	97 fb       	bst	r25, 7
     aa8:	99 1f       	adc	r25, r25
     aaa:	61 f0       	breq	.+24     	; 0xac4 <__fp_splitA+0x20>
     aac:	9f 3f       	cpi	r25, 0xFF	; 255
     aae:	79 f0       	breq	.+30     	; 0xace <__fp_splitA+0x2a>
     ab0:	87 95       	ror	r24
     ab2:	08 95       	ret
     ab4:	12 16       	cp	r1, r18
     ab6:	13 06       	cpc	r1, r19
     ab8:	14 06       	cpc	r1, r20
     aba:	55 1f       	adc	r21, r21
     abc:	f2 cf       	rjmp	.-28     	; 0xaa2 <__fp_split3+0xe>
     abe:	46 95       	lsr	r20
     ac0:	f1 df       	rcall	.-30     	; 0xaa4 <__fp_splitA>
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <__fp_splitA+0x30>
     ac4:	16 16       	cp	r1, r22
     ac6:	17 06       	cpc	r1, r23
     ac8:	18 06       	cpc	r1, r24
     aca:	99 1f       	adc	r25, r25
     acc:	f1 cf       	rjmp	.-30     	; 0xab0 <__fp_splitA+0xc>
     ace:	86 95       	lsr	r24
     ad0:	71 05       	cpc	r23, r1
     ad2:	61 05       	cpc	r22, r1
     ad4:	08 94       	sec
     ad6:	08 95       	ret

00000ad8 <__fp_zero>:
     ad8:	e8 94       	clt

00000ada <__fp_szero>:
     ada:	bb 27       	eor	r27, r27
     adc:	66 27       	eor	r22, r22
     ade:	77 27       	eor	r23, r23
     ae0:	cb 01       	movw	r24, r22
     ae2:	97 f9       	bld	r25, 7
     ae4:	08 95       	ret

00000ae6 <__gesf2>:
     ae6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_cmp>
     aea:	08 f4       	brcc	.+2      	; 0xaee <__gesf2+0x8>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	08 95       	ret

00000af0 <__mulsf3>:
     af0:	0e 94 8b 05 	call	0xb16	; 0xb16 <__mulsf3x>
     af4:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_round>
     af8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_pscA>
     afc:	38 f0       	brcs	.+14     	; 0xb0c <__mulsf3+0x1c>
     afe:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_pscB>
     b02:	20 f0       	brcs	.+8      	; 0xb0c <__mulsf3+0x1c>
     b04:	95 23       	and	r25, r21
     b06:	11 f0       	breq	.+4      	; 0xb0c <__mulsf3+0x1c>
     b08:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>
     b0c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_nan>
     b10:	11 24       	eor	r1, r1
     b12:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_szero>

00000b16 <__mulsf3x>:
     b16:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_split3>
     b1a:	70 f3       	brcs	.-36     	; 0xaf8 <__mulsf3+0x8>

00000b1c <__mulsf3_pse>:
     b1c:	95 9f       	mul	r25, r21
     b1e:	c1 f3       	breq	.-16     	; 0xb10 <__mulsf3+0x20>
     b20:	95 0f       	add	r25, r21
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	55 1f       	adc	r21, r21
     b26:	62 9f       	mul	r22, r18
     b28:	f0 01       	movw	r30, r0
     b2a:	72 9f       	mul	r23, r18
     b2c:	bb 27       	eor	r27, r27
     b2e:	f0 0d       	add	r31, r0
     b30:	b1 1d       	adc	r27, r1
     b32:	63 9f       	mul	r22, r19
     b34:	aa 27       	eor	r26, r26
     b36:	f0 0d       	add	r31, r0
     b38:	b1 1d       	adc	r27, r1
     b3a:	aa 1f       	adc	r26, r26
     b3c:	64 9f       	mul	r22, r20
     b3e:	66 27       	eor	r22, r22
     b40:	b0 0d       	add	r27, r0
     b42:	a1 1d       	adc	r26, r1
     b44:	66 1f       	adc	r22, r22
     b46:	82 9f       	mul	r24, r18
     b48:	22 27       	eor	r18, r18
     b4a:	b0 0d       	add	r27, r0
     b4c:	a1 1d       	adc	r26, r1
     b4e:	62 1f       	adc	r22, r18
     b50:	73 9f       	mul	r23, r19
     b52:	b0 0d       	add	r27, r0
     b54:	a1 1d       	adc	r26, r1
     b56:	62 1f       	adc	r22, r18
     b58:	83 9f       	mul	r24, r19
     b5a:	a0 0d       	add	r26, r0
     b5c:	61 1d       	adc	r22, r1
     b5e:	22 1f       	adc	r18, r18
     b60:	74 9f       	mul	r23, r20
     b62:	33 27       	eor	r19, r19
     b64:	a0 0d       	add	r26, r0
     b66:	61 1d       	adc	r22, r1
     b68:	23 1f       	adc	r18, r19
     b6a:	84 9f       	mul	r24, r20
     b6c:	60 0d       	add	r22, r0
     b6e:	21 1d       	adc	r18, r1
     b70:	82 2f       	mov	r24, r18
     b72:	76 2f       	mov	r23, r22
     b74:	6a 2f       	mov	r22, r26
     b76:	11 24       	eor	r1, r1
     b78:	9f 57       	subi	r25, 0x7F	; 127
     b7a:	50 40       	sbci	r21, 0x00	; 0
     b7c:	9a f0       	brmi	.+38     	; 0xba4 <__mulsf3_pse+0x88>
     b7e:	f1 f0       	breq	.+60     	; 0xbbc <__mulsf3_pse+0xa0>
     b80:	88 23       	and	r24, r24
     b82:	4a f0       	brmi	.+18     	; 0xb96 <__mulsf3_pse+0x7a>
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	bb 1f       	adc	r27, r27
     b8a:	66 1f       	adc	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	50 40       	sbci	r21, 0x00	; 0
     b94:	a9 f7       	brne	.-22     	; 0xb80 <__mulsf3_pse+0x64>
     b96:	9e 3f       	cpi	r25, 0xFE	; 254
     b98:	51 05       	cpc	r21, r1
     b9a:	80 f0       	brcs	.+32     	; 0xbbc <__mulsf3_pse+0xa0>
     b9c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_inf>
     ba0:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_szero>
     ba4:	5f 3f       	cpi	r21, 0xFF	; 255
     ba6:	e4 f3       	brlt	.-8      	; 0xba0 <__mulsf3_pse+0x84>
     ba8:	98 3e       	cpi	r25, 0xE8	; 232
     baa:	d4 f3       	brlt	.-12     	; 0xba0 <__mulsf3_pse+0x84>
     bac:	86 95       	lsr	r24
     bae:	77 95       	ror	r23
     bb0:	67 95       	ror	r22
     bb2:	b7 95       	ror	r27
     bb4:	f7 95       	ror	r31
     bb6:	e7 95       	ror	r30
     bb8:	9f 5f       	subi	r25, 0xFF	; 255
     bba:	c1 f7       	brne	.-16     	; 0xbac <__mulsf3_pse+0x90>
     bbc:	fe 2b       	or	r31, r30
     bbe:	88 0f       	add	r24, r24
     bc0:	91 1d       	adc	r25, r1
     bc2:	96 95       	lsr	r25
     bc4:	87 95       	ror	r24
     bc6:	97 f9       	bld	r25, 7
     bc8:	08 95       	ret
     bca:	19 f4       	brne	.+6      	; 0xbd2 <__mulsf3_pse+0xb6>
     bcc:	16 f4       	brtc	.+4      	; 0xbd2 <__mulsf3_pse+0xb6>
     bce:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_nan>
     bd2:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_mpack>

00000bd6 <sqrt>:
     bd6:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_splitA>
     bda:	b8 f3       	brcs	.-18     	; 0xbca <__mulsf3_pse+0xae>
     bdc:	99 23       	and	r25, r25
     bde:	c9 f3       	breq	.-14     	; 0xbd2 <__mulsf3_pse+0xb6>
     be0:	b6 f3       	brts	.-20     	; 0xbce <__mulsf3_pse+0xb2>
     be2:	9f 57       	subi	r25, 0x7F	; 127
     be4:	55 0b       	sbc	r21, r21
     be6:	87 ff       	sbrs	r24, 7
     be8:	0e 94 39 06 	call	0xc72	; 0xc72 <__fp_norm2>
     bec:	00 24       	eor	r0, r0
     bee:	a0 e6       	ldi	r26, 0x60	; 96
     bf0:	40 ea       	ldi	r20, 0xA0	; 160
     bf2:	90 01       	movw	r18, r0
     bf4:	80 58       	subi	r24, 0x80	; 128
     bf6:	56 95       	lsr	r21
     bf8:	97 95       	ror	r25
     bfa:	28 f4       	brcc	.+10     	; 0xc06 <sqrt+0x30>
     bfc:	80 5c       	subi	r24, 0xC0	; 192
     bfe:	66 0f       	add	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	88 1f       	adc	r24, r24
     c04:	20 f0       	brcs	.+8      	; 0xc0e <sqrt+0x38>
     c06:	26 17       	cp	r18, r22
     c08:	37 07       	cpc	r19, r23
     c0a:	48 07       	cpc	r20, r24
     c0c:	30 f4       	brcc	.+12     	; 0xc1a <sqrt+0x44>
     c0e:	62 1b       	sub	r22, r18
     c10:	73 0b       	sbc	r23, r19
     c12:	84 0b       	sbc	r24, r20
     c14:	20 29       	or	r18, r0
     c16:	31 29       	or	r19, r1
     c18:	4a 2b       	or	r20, r26
     c1a:	a6 95       	lsr	r26
     c1c:	17 94       	ror	r1
     c1e:	07 94       	ror	r0
     c20:	20 25       	eor	r18, r0
     c22:	31 25       	eor	r19, r1
     c24:	4a 27       	eor	r20, r26
     c26:	58 f7       	brcc	.-42     	; 0xbfe <sqrt+0x28>
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	88 1f       	adc	r24, r24
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <sqrt+0x62>
     c30:	26 17       	cp	r18, r22
     c32:	37 07       	cpc	r19, r23
     c34:	48 07       	cpc	r20, r24
     c36:	30 f4       	brcc	.+12     	; 0xc44 <sqrt+0x6e>
     c38:	62 0b       	sbc	r22, r18
     c3a:	73 0b       	sbc	r23, r19
     c3c:	84 0b       	sbc	r24, r20
     c3e:	20 0d       	add	r18, r0
     c40:	31 1d       	adc	r19, r1
     c42:	41 1d       	adc	r20, r1
     c44:	a0 95       	com	r26
     c46:	81 f7       	brne	.-32     	; 0xc28 <sqrt+0x52>
     c48:	b9 01       	movw	r22, r18
     c4a:	84 2f       	mov	r24, r20
     c4c:	91 58       	subi	r25, 0x81	; 129
     c4e:	88 0f       	add	r24, r24
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	08 95       	ret

00000c56 <__fp_mpack>:
     c56:	9f 3f       	cpi	r25, 0xFF	; 255
     c58:	31 f0       	breq	.+12     	; 0xc66 <__fp_mpack_finite+0xc>

00000c5a <__fp_mpack_finite>:
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	20 f4       	brcc	.+8      	; 0xc66 <__fp_mpack_finite+0xc>
     c5e:	87 95       	ror	r24
     c60:	77 95       	ror	r23
     c62:	67 95       	ror	r22
     c64:	b7 95       	ror	r27
     c66:	88 0f       	add	r24, r24
     c68:	91 1d       	adc	r25, r1
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	97 f9       	bld	r25, 7
     c70:	08 95       	ret

00000c72 <__fp_norm2>:
     c72:	91 50       	subi	r25, 0x01	; 1
     c74:	50 40       	sbci	r21, 0x00	; 0
     c76:	66 0f       	add	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	88 1f       	adc	r24, r24
     c7c:	d2 f7       	brpl	.-12     	; 0xc72 <__fp_norm2>
     c7e:	08 95       	ret

00000c80 <__udivmodsi4>:
     c80:	a1 e2       	ldi	r26, 0x21	; 33
     c82:	1a 2e       	mov	r1, r26
     c84:	aa 1b       	sub	r26, r26
     c86:	bb 1b       	sub	r27, r27
     c88:	fd 01       	movw	r30, r26
     c8a:	0d c0       	rjmp	.+26     	; 0xca6 <__udivmodsi4_ep>

00000c8c <__udivmodsi4_loop>:
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	ee 1f       	adc	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	a2 17       	cp	r26, r18
     c96:	b3 07       	cpc	r27, r19
     c98:	e4 07       	cpc	r30, r20
     c9a:	f5 07       	cpc	r31, r21
     c9c:	20 f0       	brcs	.+8      	; 0xca6 <__udivmodsi4_ep>
     c9e:	a2 1b       	sub	r26, r18
     ca0:	b3 0b       	sbc	r27, r19
     ca2:	e4 0b       	sbc	r30, r20
     ca4:	f5 0b       	sbc	r31, r21

00000ca6 <__udivmodsi4_ep>:
     ca6:	66 1f       	adc	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	88 1f       	adc	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	1a 94       	dec	r1
     cb0:	69 f7       	brne	.-38     	; 0xc8c <__udivmodsi4_loop>
     cb2:	60 95       	com	r22
     cb4:	70 95       	com	r23
     cb6:	80 95       	com	r24
     cb8:	90 95       	com	r25
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	bd 01       	movw	r22, r26
     cc0:	cf 01       	movw	r24, r30
     cc2:	08 95       	ret

00000cc4 <__tablejump2__>:
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	05 90       	lpm	r0, Z+
     cca:	f4 91       	lpm	r31, Z
     ccc:	e0 2d       	mov	r30, r0
     cce:	09 94       	ijmp

00000cd0 <sprintf>:
     cd0:	ae e0       	ldi	r26, 0x0E	; 14
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__prologue_saves__+0x1c>
     cdc:	0d 89       	ldd	r16, Y+21	; 0x15
     cde:	1e 89       	ldd	r17, Y+22	; 0x16
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	8c 83       	std	Y+4, r24	; 0x04
     ce4:	1a 83       	std	Y+2, r17	; 0x02
     ce6:	09 83       	std	Y+1, r16	; 0x01
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	9f e7       	ldi	r25, 0x7F	; 127
     cec:	9e 83       	std	Y+6, r25	; 0x06
     cee:	8d 83       	std	Y+5, r24	; 0x05
     cf0:	ae 01       	movw	r20, r28
     cf2:	47 5e       	subi	r20, 0xE7	; 231
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	6f 89       	ldd	r22, Y+23	; 0x17
     cf8:	78 8d       	ldd	r23, Y+24	; 0x18
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 8a 06 	call	0xd14	; 0xd14 <vfprintf>
     d02:	ef 81       	ldd	r30, Y+7	; 0x07
     d04:	f8 85       	ldd	r31, Y+8	; 0x08
     d06:	e0 0f       	add	r30, r16
     d08:	f1 1f       	adc	r31, r17
     d0a:	10 82       	st	Z, r1
     d0c:	2e 96       	adiw	r28, 0x0e	; 14
     d0e:	e4 e0       	ldi	r30, 0x04	; 4
     d10:	0c 94 45 09 	jmp	0x128a	; 0x128a <__epilogue_restores__+0x1c>

00000d14 <vfprintf>:
     d14:	ab e0       	ldi	r26, 0x0B	; 11
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e0 e9       	ldi	r30, 0x90	; 144
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__prologue_saves__>
     d20:	6c 01       	movw	r12, r24
     d22:	7b 01       	movw	r14, r22
     d24:	8a 01       	movw	r16, r20
     d26:	fc 01       	movw	r30, r24
     d28:	17 82       	std	Z+7, r1	; 0x07
     d2a:	16 82       	std	Z+6, r1	; 0x06
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
     d2e:	81 ff       	sbrs	r24, 1
     d30:	cc c1       	rjmp	.+920    	; 0x10ca <vfprintf+0x3b6>
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	3c 01       	movw	r6, r24
     d38:	f6 01       	movw	r30, r12
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	f7 01       	movw	r30, r14
     d3e:	93 fd       	sbrc	r25, 3
     d40:	85 91       	lpm	r24, Z+
     d42:	93 ff       	sbrs	r25, 3
     d44:	81 91       	ld	r24, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <vfprintf+0x3a>
     d4c:	ba c1       	rjmp	.+884    	; 0x10c2 <vfprintf+0x3ae>
     d4e:	85 32       	cpi	r24, 0x25	; 37
     d50:	39 f4       	brne	.+14     	; 0xd60 <vfprintf+0x4c>
     d52:	93 fd       	sbrc	r25, 3
     d54:	85 91       	lpm	r24, Z+
     d56:	93 ff       	sbrs	r25, 3
     d58:	81 91       	ld	r24, Z+
     d5a:	7f 01       	movw	r14, r30
     d5c:	85 32       	cpi	r24, 0x25	; 37
     d5e:	29 f4       	brne	.+10     	; 0xd6a <vfprintf+0x56>
     d60:	b6 01       	movw	r22, r12
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
     d68:	e7 cf       	rjmp	.-50     	; 0xd38 <vfprintf+0x24>
     d6a:	91 2c       	mov	r9, r1
     d6c:	21 2c       	mov	r2, r1
     d6e:	31 2c       	mov	r3, r1
     d70:	ff e1       	ldi	r31, 0x1F	; 31
     d72:	f3 15       	cp	r31, r3
     d74:	d8 f0       	brcs	.+54     	; 0xdac <vfprintf+0x98>
     d76:	8b 32       	cpi	r24, 0x2B	; 43
     d78:	79 f0       	breq	.+30     	; 0xd98 <vfprintf+0x84>
     d7a:	38 f4       	brcc	.+14     	; 0xd8a <vfprintf+0x76>
     d7c:	80 32       	cpi	r24, 0x20	; 32
     d7e:	79 f0       	breq	.+30     	; 0xd9e <vfprintf+0x8a>
     d80:	83 32       	cpi	r24, 0x23	; 35
     d82:	a1 f4       	brne	.+40     	; 0xdac <vfprintf+0x98>
     d84:	23 2d       	mov	r18, r3
     d86:	20 61       	ori	r18, 0x10	; 16
     d88:	1d c0       	rjmp	.+58     	; 0xdc4 <vfprintf+0xb0>
     d8a:	8d 32       	cpi	r24, 0x2D	; 45
     d8c:	61 f0       	breq	.+24     	; 0xda6 <vfprintf+0x92>
     d8e:	80 33       	cpi	r24, 0x30	; 48
     d90:	69 f4       	brne	.+26     	; 0xdac <vfprintf+0x98>
     d92:	23 2d       	mov	r18, r3
     d94:	21 60       	ori	r18, 0x01	; 1
     d96:	16 c0       	rjmp	.+44     	; 0xdc4 <vfprintf+0xb0>
     d98:	83 2d       	mov	r24, r3
     d9a:	82 60       	ori	r24, 0x02	; 2
     d9c:	38 2e       	mov	r3, r24
     d9e:	e3 2d       	mov	r30, r3
     da0:	e4 60       	ori	r30, 0x04	; 4
     da2:	3e 2e       	mov	r3, r30
     da4:	2a c0       	rjmp	.+84     	; 0xdfa <vfprintf+0xe6>
     da6:	f3 2d       	mov	r31, r3
     da8:	f8 60       	ori	r31, 0x08	; 8
     daa:	1d c0       	rjmp	.+58     	; 0xde6 <vfprintf+0xd2>
     dac:	37 fc       	sbrc	r3, 7
     dae:	2d c0       	rjmp	.+90     	; 0xe0a <vfprintf+0xf6>
     db0:	20 ed       	ldi	r18, 0xD0	; 208
     db2:	28 0f       	add	r18, r24
     db4:	2a 30       	cpi	r18, 0x0A	; 10
     db6:	40 f0       	brcs	.+16     	; 0xdc8 <vfprintf+0xb4>
     db8:	8e 32       	cpi	r24, 0x2E	; 46
     dba:	b9 f4       	brne	.+46     	; 0xdea <vfprintf+0xd6>
     dbc:	36 fc       	sbrc	r3, 6
     dbe:	81 c1       	rjmp	.+770    	; 0x10c2 <vfprintf+0x3ae>
     dc0:	23 2d       	mov	r18, r3
     dc2:	20 64       	ori	r18, 0x40	; 64
     dc4:	32 2e       	mov	r3, r18
     dc6:	19 c0       	rjmp	.+50     	; 0xdfa <vfprintf+0xe6>
     dc8:	36 fe       	sbrs	r3, 6
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <vfprintf+0xc4>
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	98 9e       	mul	r9, r24
     dd0:	20 0d       	add	r18, r0
     dd2:	11 24       	eor	r1, r1
     dd4:	92 2e       	mov	r9, r18
     dd6:	11 c0       	rjmp	.+34     	; 0xdfa <vfprintf+0xe6>
     dd8:	ea e0       	ldi	r30, 0x0A	; 10
     dda:	2e 9e       	mul	r2, r30
     ddc:	20 0d       	add	r18, r0
     dde:	11 24       	eor	r1, r1
     de0:	22 2e       	mov	r2, r18
     de2:	f3 2d       	mov	r31, r3
     de4:	f0 62       	ori	r31, 0x20	; 32
     de6:	3f 2e       	mov	r3, r31
     de8:	08 c0       	rjmp	.+16     	; 0xdfa <vfprintf+0xe6>
     dea:	8c 36       	cpi	r24, 0x6C	; 108
     dec:	21 f4       	brne	.+8      	; 0xdf6 <vfprintf+0xe2>
     dee:	83 2d       	mov	r24, r3
     df0:	80 68       	ori	r24, 0x80	; 128
     df2:	38 2e       	mov	r3, r24
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <vfprintf+0xe6>
     df6:	88 36       	cpi	r24, 0x68	; 104
     df8:	41 f4       	brne	.+16     	; 0xe0a <vfprintf+0xf6>
     dfa:	f7 01       	movw	r30, r14
     dfc:	93 fd       	sbrc	r25, 3
     dfe:	85 91       	lpm	r24, Z+
     e00:	93 ff       	sbrs	r25, 3
     e02:	81 91       	ld	r24, Z+
     e04:	7f 01       	movw	r14, r30
     e06:	81 11       	cpse	r24, r1
     e08:	b3 cf       	rjmp	.-154    	; 0xd70 <vfprintf+0x5c>
     e0a:	98 2f       	mov	r25, r24
     e0c:	9f 7d       	andi	r25, 0xDF	; 223
     e0e:	95 54       	subi	r25, 0x45	; 69
     e10:	93 30       	cpi	r25, 0x03	; 3
     e12:	28 f4       	brcc	.+10     	; 0xe1e <vfprintf+0x10a>
     e14:	0c 5f       	subi	r16, 0xFC	; 252
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	9f e3       	ldi	r25, 0x3F	; 63
     e1a:	99 83       	std	Y+1, r25	; 0x01
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <vfprintf+0x124>
     e1e:	83 36       	cpi	r24, 0x63	; 99
     e20:	31 f0       	breq	.+12     	; 0xe2e <vfprintf+0x11a>
     e22:	83 37       	cpi	r24, 0x73	; 115
     e24:	71 f0       	breq	.+28     	; 0xe42 <vfprintf+0x12e>
     e26:	83 35       	cpi	r24, 0x53	; 83
     e28:	09 f0       	breq	.+2      	; 0xe2c <vfprintf+0x118>
     e2a:	59 c0       	rjmp	.+178    	; 0xede <vfprintf+0x1ca>
     e2c:	21 c0       	rjmp	.+66     	; 0xe70 <vfprintf+0x15c>
     e2e:	f8 01       	movw	r30, r16
     e30:	80 81       	ld	r24, Z
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	0e 5f       	subi	r16, 0xFE	; 254
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	88 24       	eor	r8, r8
     e3a:	83 94       	inc	r8
     e3c:	91 2c       	mov	r9, r1
     e3e:	53 01       	movw	r10, r6
     e40:	13 c0       	rjmp	.+38     	; 0xe68 <vfprintf+0x154>
     e42:	28 01       	movw	r4, r16
     e44:	f2 e0       	ldi	r31, 0x02	; 2
     e46:	4f 0e       	add	r4, r31
     e48:	51 1c       	adc	r5, r1
     e4a:	f8 01       	movw	r30, r16
     e4c:	a0 80       	ld	r10, Z
     e4e:	b1 80       	ldd	r11, Z+1	; 0x01
     e50:	36 fe       	sbrs	r3, 6
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x146>
     e54:	69 2d       	mov	r22, r9
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x14a>
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	7f ef       	ldi	r23, 0xFF	; 255
     e5e:	c5 01       	movw	r24, r10
     e60:	0e 94 76 08 	call	0x10ec	; 0x10ec <strnlen>
     e64:	4c 01       	movw	r8, r24
     e66:	82 01       	movw	r16, r4
     e68:	f3 2d       	mov	r31, r3
     e6a:	ff 77       	andi	r31, 0x7F	; 127
     e6c:	3f 2e       	mov	r3, r31
     e6e:	16 c0       	rjmp	.+44     	; 0xe9c <vfprintf+0x188>
     e70:	28 01       	movw	r4, r16
     e72:	22 e0       	ldi	r18, 0x02	; 2
     e74:	42 0e       	add	r4, r18
     e76:	51 1c       	adc	r5, r1
     e78:	f8 01       	movw	r30, r16
     e7a:	a0 80       	ld	r10, Z
     e7c:	b1 80       	ldd	r11, Z+1	; 0x01
     e7e:	36 fe       	sbrs	r3, 6
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <vfprintf+0x174>
     e82:	69 2d       	mov	r22, r9
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x178>
     e88:	6f ef       	ldi	r22, 0xFF	; 255
     e8a:	7f ef       	ldi	r23, 0xFF	; 255
     e8c:	c5 01       	movw	r24, r10
     e8e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <strnlen_P>
     e92:	4c 01       	movw	r8, r24
     e94:	f3 2d       	mov	r31, r3
     e96:	f0 68       	ori	r31, 0x80	; 128
     e98:	3f 2e       	mov	r3, r31
     e9a:	82 01       	movw	r16, r4
     e9c:	33 fc       	sbrc	r3, 3
     e9e:	1b c0       	rjmp	.+54     	; 0xed6 <vfprintf+0x1c2>
     ea0:	82 2d       	mov	r24, r2
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	88 16       	cp	r8, r24
     ea6:	99 06       	cpc	r9, r25
     ea8:	b0 f4       	brcc	.+44     	; 0xed6 <vfprintf+0x1c2>
     eaa:	b6 01       	movw	r22, r12
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
     eb4:	2a 94       	dec	r2
     eb6:	f4 cf       	rjmp	.-24     	; 0xea0 <vfprintf+0x18c>
     eb8:	f5 01       	movw	r30, r10
     eba:	37 fc       	sbrc	r3, 7
     ebc:	85 91       	lpm	r24, Z+
     ebe:	37 fe       	sbrs	r3, 7
     ec0:	81 91       	ld	r24, Z+
     ec2:	5f 01       	movw	r10, r30
     ec4:	b6 01       	movw	r22, r12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
     ecc:	21 10       	cpse	r2, r1
     ece:	2a 94       	dec	r2
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	82 1a       	sub	r8, r18
     ed4:	91 08       	sbc	r9, r1
     ed6:	81 14       	cp	r8, r1
     ed8:	91 04       	cpc	r9, r1
     eda:	71 f7       	brne	.-36     	; 0xeb8 <vfprintf+0x1a4>
     edc:	e8 c0       	rjmp	.+464    	; 0x10ae <vfprintf+0x39a>
     ede:	84 36       	cpi	r24, 0x64	; 100
     ee0:	11 f0       	breq	.+4      	; 0xee6 <vfprintf+0x1d2>
     ee2:	89 36       	cpi	r24, 0x69	; 105
     ee4:	41 f5       	brne	.+80     	; 0xf36 <vfprintf+0x222>
     ee6:	f8 01       	movw	r30, r16
     ee8:	37 fe       	sbrs	r3, 7
     eea:	07 c0       	rjmp	.+14     	; 0xefa <vfprintf+0x1e6>
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	0c 5f       	subi	r16, 0xFC	; 252
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <vfprintf+0x1f6>
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	07 2e       	mov	r0, r23
     f00:	00 0c       	add	r0, r0
     f02:	88 0b       	sbc	r24, r24
     f04:	99 0b       	sbc	r25, r25
     f06:	0e 5f       	subi	r16, 0xFE	; 254
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	f3 2d       	mov	r31, r3
     f0c:	ff 76       	andi	r31, 0x6F	; 111
     f0e:	3f 2e       	mov	r3, r31
     f10:	97 ff       	sbrs	r25, 7
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <vfprintf+0x212>
     f14:	90 95       	com	r25
     f16:	80 95       	com	r24
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	f0 68       	ori	r31, 0x80	; 128
     f24:	3f 2e       	mov	r3, r31
     f26:	2a e0       	ldi	r18, 0x0A	; 10
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	a3 01       	movw	r20, r6
     f2c:	0e 94 bd 08 	call	0x117a	; 0x117a <__ultoa_invert>
     f30:	88 2e       	mov	r8, r24
     f32:	86 18       	sub	r8, r6
     f34:	45 c0       	rjmp	.+138    	; 0xfc0 <vfprintf+0x2ac>
     f36:	85 37       	cpi	r24, 0x75	; 117
     f38:	31 f4       	brne	.+12     	; 0xf46 <vfprintf+0x232>
     f3a:	23 2d       	mov	r18, r3
     f3c:	2f 7e       	andi	r18, 0xEF	; 239
     f3e:	b2 2e       	mov	r11, r18
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	25 c0       	rjmp	.+74     	; 0xf90 <vfprintf+0x27c>
     f46:	93 2d       	mov	r25, r3
     f48:	99 7f       	andi	r25, 0xF9	; 249
     f4a:	b9 2e       	mov	r11, r25
     f4c:	8f 36       	cpi	r24, 0x6F	; 111
     f4e:	c1 f0       	breq	.+48     	; 0xf80 <vfprintf+0x26c>
     f50:	18 f4       	brcc	.+6      	; 0xf58 <vfprintf+0x244>
     f52:	88 35       	cpi	r24, 0x58	; 88
     f54:	79 f0       	breq	.+30     	; 0xf74 <vfprintf+0x260>
     f56:	b5 c0       	rjmp	.+362    	; 0x10c2 <vfprintf+0x3ae>
     f58:	80 37       	cpi	r24, 0x70	; 112
     f5a:	19 f0       	breq	.+6      	; 0xf62 <vfprintf+0x24e>
     f5c:	88 37       	cpi	r24, 0x78	; 120
     f5e:	21 f0       	breq	.+8      	; 0xf68 <vfprintf+0x254>
     f60:	b0 c0       	rjmp	.+352    	; 0x10c2 <vfprintf+0x3ae>
     f62:	e9 2f       	mov	r30, r25
     f64:	e0 61       	ori	r30, 0x10	; 16
     f66:	be 2e       	mov	r11, r30
     f68:	b4 fe       	sbrs	r11, 4
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <vfprintf+0x272>
     f6c:	fb 2d       	mov	r31, r11
     f6e:	f4 60       	ori	r31, 0x04	; 4
     f70:	bf 2e       	mov	r11, r31
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <vfprintf+0x272>
     f74:	34 fe       	sbrs	r3, 4
     f76:	0a c0       	rjmp	.+20     	; 0xf8c <vfprintf+0x278>
     f78:	29 2f       	mov	r18, r25
     f7a:	26 60       	ori	r18, 0x06	; 6
     f7c:	b2 2e       	mov	r11, r18
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <vfprintf+0x278>
     f80:	28 e0       	ldi	r18, 0x08	; 8
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <vfprintf+0x27c>
     f86:	20 e1       	ldi	r18, 0x10	; 16
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x27c>
     f8c:	20 e1       	ldi	r18, 0x10	; 16
     f8e:	32 e0       	ldi	r19, 0x02	; 2
     f90:	f8 01       	movw	r30, r16
     f92:	b7 fe       	sbrs	r11, 7
     f94:	07 c0       	rjmp	.+14     	; 0xfa4 <vfprintf+0x290>
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	0c 5f       	subi	r16, 0xFC	; 252
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <vfprintf+0x29c>
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 5f       	subi	r16, 0xFE	; 254
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	a3 01       	movw	r20, r6
     fb2:	0e 94 bd 08 	call	0x117a	; 0x117a <__ultoa_invert>
     fb6:	88 2e       	mov	r8, r24
     fb8:	86 18       	sub	r8, r6
     fba:	fb 2d       	mov	r31, r11
     fbc:	ff 77       	andi	r31, 0x7F	; 127
     fbe:	3f 2e       	mov	r3, r31
     fc0:	36 fe       	sbrs	r3, 6
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <vfprintf+0x2ca>
     fc4:	23 2d       	mov	r18, r3
     fc6:	2e 7f       	andi	r18, 0xFE	; 254
     fc8:	a2 2e       	mov	r10, r18
     fca:	89 14       	cp	r8, r9
     fcc:	58 f4       	brcc	.+22     	; 0xfe4 <vfprintf+0x2d0>
     fce:	34 fe       	sbrs	r3, 4
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <vfprintf+0x2d4>
     fd2:	32 fc       	sbrc	r3, 2
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <vfprintf+0x2d4>
     fd6:	83 2d       	mov	r24, r3
     fd8:	8e 7e       	andi	r24, 0xEE	; 238
     fda:	a8 2e       	mov	r10, r24
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <vfprintf+0x2d4>
     fde:	b8 2c       	mov	r11, r8
     fe0:	a3 2c       	mov	r10, r3
     fe2:	03 c0       	rjmp	.+6      	; 0xfea <vfprintf+0x2d6>
     fe4:	b8 2c       	mov	r11, r8
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <vfprintf+0x2d6>
     fe8:	b9 2c       	mov	r11, r9
     fea:	a4 fe       	sbrs	r10, 4
     fec:	0f c0       	rjmp	.+30     	; 0x100c <vfprintf+0x2f8>
     fee:	fe 01       	movw	r30, r28
     ff0:	e8 0d       	add	r30, r8
     ff2:	f1 1d       	adc	r31, r1
     ff4:	80 81       	ld	r24, Z
     ff6:	80 33       	cpi	r24, 0x30	; 48
     ff8:	21 f4       	brne	.+8      	; 0x1002 <vfprintf+0x2ee>
     ffa:	9a 2d       	mov	r25, r10
     ffc:	99 7e       	andi	r25, 0xE9	; 233
     ffe:	a9 2e       	mov	r10, r25
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <vfprintf+0x300>
    1002:	a2 fe       	sbrs	r10, 2
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <vfprintf+0x2fe>
    1006:	b3 94       	inc	r11
    1008:	b3 94       	inc	r11
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <vfprintf+0x300>
    100c:	8a 2d       	mov	r24, r10
    100e:	86 78       	andi	r24, 0x86	; 134
    1010:	09 f0       	breq	.+2      	; 0x1014 <vfprintf+0x300>
    1012:	b3 94       	inc	r11
    1014:	a3 fc       	sbrc	r10, 3
    1016:	11 c0       	rjmp	.+34     	; 0x103a <vfprintf+0x326>
    1018:	a0 fe       	sbrs	r10, 0
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <vfprintf+0x314>
    101c:	b2 14       	cp	r11, r2
    101e:	88 f4       	brcc	.+34     	; 0x1042 <vfprintf+0x32e>
    1020:	28 0c       	add	r2, r8
    1022:	92 2c       	mov	r9, r2
    1024:	9b 18       	sub	r9, r11
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <vfprintf+0x330>
    1028:	b2 14       	cp	r11, r2
    102a:	60 f4       	brcc	.+24     	; 0x1044 <vfprintf+0x330>
    102c:	b6 01       	movw	r22, r12
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1036:	b3 94       	inc	r11
    1038:	f7 cf       	rjmp	.-18     	; 0x1028 <vfprintf+0x314>
    103a:	b2 14       	cp	r11, r2
    103c:	18 f4       	brcc	.+6      	; 0x1044 <vfprintf+0x330>
    103e:	2b 18       	sub	r2, r11
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x332>
    1042:	98 2c       	mov	r9, r8
    1044:	21 2c       	mov	r2, r1
    1046:	a4 fe       	sbrs	r10, 4
    1048:	10 c0       	rjmp	.+32     	; 0x106a <vfprintf+0x356>
    104a:	b6 01       	movw	r22, r12
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1054:	a2 fe       	sbrs	r10, 2
    1056:	17 c0       	rjmp	.+46     	; 0x1086 <vfprintf+0x372>
    1058:	a1 fc       	sbrc	r10, 1
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <vfprintf+0x34e>
    105c:	88 e7       	ldi	r24, 0x78	; 120
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x352>
    1062:	88 e5       	ldi	r24, 0x58	; 88
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	b6 01       	movw	r22, r12
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <vfprintf+0x36e>
    106a:	8a 2d       	mov	r24, r10
    106c:	86 78       	andi	r24, 0x86	; 134
    106e:	59 f0       	breq	.+22     	; 0x1086 <vfprintf+0x372>
    1070:	a1 fe       	sbrs	r10, 1
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x364>
    1074:	8b e2       	ldi	r24, 0x2B	; 43
    1076:	01 c0       	rjmp	.+2      	; 0x107a <vfprintf+0x366>
    1078:	80 e2       	ldi	r24, 0x20	; 32
    107a:	a7 fc       	sbrc	r10, 7
    107c:	8d e2       	ldi	r24, 0x2D	; 45
    107e:	b6 01       	movw	r22, r12
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1086:	89 14       	cp	r8, r9
    1088:	38 f4       	brcc	.+14     	; 0x1098 <vfprintf+0x384>
    108a:	b6 01       	movw	r22, r12
    108c:	80 e3       	ldi	r24, 0x30	; 48
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1094:	9a 94       	dec	r9
    1096:	f7 cf       	rjmp	.-18     	; 0x1086 <vfprintf+0x372>
    1098:	8a 94       	dec	r8
    109a:	f3 01       	movw	r30, r6
    109c:	e8 0d       	add	r30, r8
    109e:	f1 1d       	adc	r31, r1
    10a0:	80 81       	ld	r24, Z
    10a2:	b6 01       	movw	r22, r12
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    10aa:	81 10       	cpse	r8, r1
    10ac:	f5 cf       	rjmp	.-22     	; 0x1098 <vfprintf+0x384>
    10ae:	22 20       	and	r2, r2
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <vfprintf+0x3a0>
    10b2:	42 ce       	rjmp	.-892    	; 0xd38 <vfprintf+0x24>
    10b4:	b6 01       	movw	r22, r12
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    10be:	2a 94       	dec	r2
    10c0:	f6 cf       	rjmp	.-20     	; 0x10ae <vfprintf+0x39a>
    10c2:	f6 01       	movw	r30, r12
    10c4:	86 81       	ldd	r24, Z+6	; 0x06
    10c6:	97 81       	ldd	r25, Z+7	; 0x07
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <vfprintf+0x3ba>
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	9f ef       	ldi	r25, 0xFF	; 255
    10ce:	2b 96       	adiw	r28, 0x0b	; 11
    10d0:	e2 e1       	ldi	r30, 0x12	; 18
    10d2:	0c 94 37 09 	jmp	0x126e	; 0x126e <__epilogue_restores__>

000010d6 <strnlen_P>:
    10d6:	fc 01       	movw	r30, r24
    10d8:	05 90       	lpm	r0, Z+
    10da:	61 50       	subi	r22, 0x01	; 1
    10dc:	70 40       	sbci	r23, 0x00	; 0
    10de:	01 10       	cpse	r0, r1
    10e0:	d8 f7       	brcc	.-10     	; 0x10d8 <strnlen_P+0x2>
    10e2:	80 95       	com	r24
    10e4:	90 95       	com	r25
    10e6:	8e 0f       	add	r24, r30
    10e8:	9f 1f       	adc	r25, r31
    10ea:	08 95       	ret

000010ec <strnlen>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	61 50       	subi	r22, 0x01	; 1
    10f0:	70 40       	sbci	r23, 0x00	; 0
    10f2:	01 90       	ld	r0, Z+
    10f4:	01 10       	cpse	r0, r1
    10f6:	d8 f7       	brcc	.-10     	; 0x10ee <strnlen+0x2>
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	8e 0f       	add	r24, r30
    10fe:	9f 1f       	adc	r25, r31
    1100:	08 95       	ret

00001102 <fputc>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	fb 01       	movw	r30, r22
    110c:	23 81       	ldd	r18, Z+3	; 0x03
    110e:	21 fd       	sbrc	r18, 1
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <fputc+0x16>
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	9f ef       	ldi	r25, 0xFF	; 255
    1116:	2c c0       	rjmp	.+88     	; 0x1170 <fputc+0x6e>
    1118:	22 ff       	sbrs	r18, 2
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <fputc+0x46>
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	24 81       	ldd	r18, Z+4	; 0x04
    1122:	35 81       	ldd	r19, Z+5	; 0x05
    1124:	42 17       	cp	r20, r18
    1126:	53 07       	cpc	r21, r19
    1128:	44 f4       	brge	.+16     	; 0x113a <fputc+0x38>
    112a:	a0 81       	ld	r26, Z
    112c:	b1 81       	ldd	r27, Z+1	; 0x01
    112e:	9d 01       	movw	r18, r26
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    1138:	8c 93       	st	X, r24
    113a:	26 81       	ldd	r18, Z+6	; 0x06
    113c:	37 81       	ldd	r19, Z+7	; 0x07
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	37 83       	std	Z+7, r19	; 0x07
    1144:	26 83       	std	Z+6, r18	; 0x06
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <fputc+0x6e>
    1148:	8b 01       	movw	r16, r22
    114a:	ec 01       	movw	r28, r24
    114c:	fb 01       	movw	r30, r22
    114e:	00 84       	ldd	r0, Z+8	; 0x08
    1150:	f1 85       	ldd	r31, Z+9	; 0x09
    1152:	e0 2d       	mov	r30, r0
    1154:	09 95       	icall
    1156:	89 2b       	or	r24, r25
    1158:	e1 f6       	brne	.-72     	; 0x1112 <fputc+0x10>
    115a:	d8 01       	movw	r26, r16
    115c:	16 96       	adiw	r26, 0x06	; 6
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	17 97       	sbiw	r26, 0x07	; 7
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	17 96       	adiw	r26, 0x07	; 7
    1168:	9c 93       	st	X, r25
    116a:	8e 93       	st	-X, r24
    116c:	16 97       	sbiw	r26, 0x06	; 6
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <__ultoa_invert>:
    117a:	fa 01       	movw	r30, r20
    117c:	aa 27       	eor	r26, r26
    117e:	28 30       	cpi	r18, 0x08	; 8
    1180:	51 f1       	breq	.+84     	; 0x11d6 <__ultoa_invert+0x5c>
    1182:	20 31       	cpi	r18, 0x10	; 16
    1184:	81 f1       	breq	.+96     	; 0x11e6 <__ultoa_invert+0x6c>
    1186:	e8 94       	clt
    1188:	6f 93       	push	r22
    118a:	6e 7f       	andi	r22, 0xFE	; 254
    118c:	6e 5f       	subi	r22, 0xFE	; 254
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	af 4f       	sbci	r26, 0xFF	; 255
    1196:	b1 e0       	ldi	r27, 0x01	; 1
    1198:	3e d0       	rcall	.+124    	; 0x1216 <__ultoa_invert+0x9c>
    119a:	b4 e0       	ldi	r27, 0x04	; 4
    119c:	3c d0       	rcall	.+120    	; 0x1216 <__ultoa_invert+0x9c>
    119e:	67 0f       	add	r22, r23
    11a0:	78 1f       	adc	r23, r24
    11a2:	89 1f       	adc	r24, r25
    11a4:	9a 1f       	adc	r25, r26
    11a6:	a1 1d       	adc	r26, r1
    11a8:	68 0f       	add	r22, r24
    11aa:	79 1f       	adc	r23, r25
    11ac:	8a 1f       	adc	r24, r26
    11ae:	91 1d       	adc	r25, r1
    11b0:	a1 1d       	adc	r26, r1
    11b2:	6a 0f       	add	r22, r26
    11b4:	71 1d       	adc	r23, r1
    11b6:	81 1d       	adc	r24, r1
    11b8:	91 1d       	adc	r25, r1
    11ba:	a1 1d       	adc	r26, r1
    11bc:	20 d0       	rcall	.+64     	; 0x11fe <__ultoa_invert+0x84>
    11be:	09 f4       	brne	.+2      	; 0x11c2 <__ultoa_invert+0x48>
    11c0:	68 94       	set
    11c2:	3f 91       	pop	r19
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	26 9f       	mul	r18, r22
    11c8:	11 24       	eor	r1, r1
    11ca:	30 19       	sub	r19, r0
    11cc:	30 5d       	subi	r19, 0xD0	; 208
    11ce:	31 93       	st	Z+, r19
    11d0:	de f6       	brtc	.-74     	; 0x1188 <__ultoa_invert+0xe>
    11d2:	cf 01       	movw	r24, r30
    11d4:	08 95       	ret
    11d6:	46 2f       	mov	r20, r22
    11d8:	47 70       	andi	r20, 0x07	; 7
    11da:	40 5d       	subi	r20, 0xD0	; 208
    11dc:	41 93       	st	Z+, r20
    11de:	b3 e0       	ldi	r27, 0x03	; 3
    11e0:	0f d0       	rcall	.+30     	; 0x1200 <__ultoa_invert+0x86>
    11e2:	c9 f7       	brne	.-14     	; 0x11d6 <__ultoa_invert+0x5c>
    11e4:	f6 cf       	rjmp	.-20     	; 0x11d2 <__ultoa_invert+0x58>
    11e6:	46 2f       	mov	r20, r22
    11e8:	4f 70       	andi	r20, 0x0F	; 15
    11ea:	40 5d       	subi	r20, 0xD0	; 208
    11ec:	4a 33       	cpi	r20, 0x3A	; 58
    11ee:	18 f0       	brcs	.+6      	; 0x11f6 <__ultoa_invert+0x7c>
    11f0:	49 5d       	subi	r20, 0xD9	; 217
    11f2:	31 fd       	sbrc	r19, 1
    11f4:	40 52       	subi	r20, 0x20	; 32
    11f6:	41 93       	st	Z+, r20
    11f8:	02 d0       	rcall	.+4      	; 0x11fe <__ultoa_invert+0x84>
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__ultoa_invert+0x6c>
    11fc:	ea cf       	rjmp	.-44     	; 0x11d2 <__ultoa_invert+0x58>
    11fe:	b4 e0       	ldi	r27, 0x04	; 4
    1200:	a6 95       	lsr	r26
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	ba 95       	dec	r27
    120c:	c9 f7       	brne	.-14     	; 0x1200 <__ultoa_invert+0x86>
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	61 05       	cpc	r22, r1
    1212:	71 05       	cpc	r23, r1
    1214:	08 95       	ret
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	0a 2e       	mov	r0, r26
    121c:	06 94       	lsr	r0
    121e:	57 95       	ror	r21
    1220:	47 95       	ror	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	ba 95       	dec	r27
    1228:	c9 f7       	brne	.-14     	; 0x121c <__ultoa_invert+0xa2>
    122a:	62 0f       	add	r22, r18
    122c:	73 1f       	adc	r23, r19
    122e:	84 1f       	adc	r24, r20
    1230:	95 1f       	adc	r25, r21
    1232:	a0 1d       	adc	r26, r0
    1234:	08 95       	ret

00001236 <__prologue_saves__>:
    1236:	2f 92       	push	r2
    1238:	3f 92       	push	r3
    123a:	4f 92       	push	r4
    123c:	5f 92       	push	r5
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	ca 1b       	sub	r28, r26
    1260:	db 0b       	sbc	r29, r27
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	09 94       	ijmp

0000126e <__epilogue_restores__>:
    126e:	2a 88       	ldd	r2, Y+18	; 0x12
    1270:	39 88       	ldd	r3, Y+17	; 0x11
    1272:	48 88       	ldd	r4, Y+16	; 0x10
    1274:	5f 84       	ldd	r5, Y+15	; 0x0f
    1276:	6e 84       	ldd	r6, Y+14	; 0x0e
    1278:	7d 84       	ldd	r7, Y+13	; 0x0d
    127a:	8c 84       	ldd	r8, Y+12	; 0x0c
    127c:	9b 84       	ldd	r9, Y+11	; 0x0b
    127e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1280:	b9 84       	ldd	r11, Y+9	; 0x09
    1282:	c8 84       	ldd	r12, Y+8	; 0x08
    1284:	df 80       	ldd	r13, Y+7	; 0x07
    1286:	ee 80       	ldd	r14, Y+6	; 0x06
    1288:	fd 80       	ldd	r15, Y+5	; 0x05
    128a:	0c 81       	ldd	r16, Y+4	; 0x04
    128c:	1b 81       	ldd	r17, Y+3	; 0x03
    128e:	aa 81       	ldd	r26, Y+2	; 0x02
    1290:	b9 81       	ldd	r27, Y+1	; 0x01
    1292:	ce 0f       	add	r28, r30
    1294:	d1 1d       	adc	r29, r1
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	ed 01       	movw	r28, r26
    12a2:	08 95       	ret

000012a4 <_exit>:
    12a4:	f8 94       	cli

000012a6 <__stop_program>:
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <__stop_program>

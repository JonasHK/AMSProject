
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080012e  0080012e  000005ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6d  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001200  00000000  00000000  00002361  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f5  00000000  00000000  00003561  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00003f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a54  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e86  00000000  00000000  00004d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005bb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	c3 01       	movw	r24, r6

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e2       	ldi	r30, 0x2A	; 42
  7e:	f5 e0       	ldi	r31, 0x05	; 5
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ae 32       	cpi	r26, 0x2E	; 46
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ae e2       	ldi	r26, 0x2E	; 46
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a8 33       	cpi	r26, 0x38	; 56
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 8d 02 	call	0x51a	; 0x51a <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  b6:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN11ADConverterC1Ev>:
#include "ADC.h"


ADConverter::ADConverter()
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <_ZN11ADConverter4ReadEh>:
}
uint16_t ADConverter::Read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	6f 70       	andi	r22, 0x0F	; 15
  de:	68 2b       	or	r22, r24
  e0:	60 83       	st	Z, r22
	
	ADCSRA |= (1 << ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
  ec:	80 81       	ld	r24, Z
  ee:	86 fd       	sbrc	r24, 6
  f0:	fd cf       	rjmp	.-6      	; 0xec <_ZN11ADConverter4ReadEh+0x18>
	return ADC;
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fa:	08 95       	ret

000000fc <_ZN13BaseDataClass8ContinueEv>:
} //BaseDataClass

bool BaseDataClass::Continue()
{
	return true;
}
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret

00000100 <_ZN13BaseDataClass7GetDataEPc>:

void BaseDataClass::GetData(char* string)
{
 100:	08 95       	ret

00000102 <_ZN13BaseDataClassC1Ev>:


#include "BaseDataClass.h"

// default constructor
BaseDataClass::BaseDataClass()
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	fc 01       	movw	r30, r24
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <_ZN21DoubleClickDataToSend7GetDataEPc>:
{
} //DoubleClickDataToSend

void DoubleClickDataToSend::GetData(char* string)
{
	string[0] = 10;
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	fb 01       	movw	r30, r22
 112:	80 83       	st	Z, r24
	string[1] = '\0';
 114:	11 82       	std	Z+1, r1	; 0x01
 116:	08 95       	ret

00000118 <_ZN21DoubleClickDataToSend8ContinueEv>:
}

bool DoubleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 118:	89 b1       	in	r24, 0x09	; 9
 11a:	82 fb       	bst	r24, 2
 11c:	88 27       	eor	r24, r24
 11e:	80 f9       	bld	r24, 0
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	89 27       	eor	r24, r25
 124:	08 95       	ret

00000126 <_ZN21DoubleClickDataToSendC1Ev>:
#include <string.h>
#include <avr/io.h>


// default constructor
DoubleClickDataToSend::DoubleClickDataToSend()
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
 12c:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	99 83       	std	Y+1, r25	; 0x01
 136:	88 83       	st	Y, r24
{
} //DoubleClickDataToSend
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <_ZN18PositionDataToSend8ContinueEv>:
} //PositionDataToSend

bool PositionDataToSend::Continue()
{
	return true;
}
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret

00000142 <_ZN18PositionDataToSend7GetDataEPc>:

void PositionDataToSend::GetData(char* string)
{
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	1f 92       	push	r1
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	8b 01       	movw	r16, r22
	uint16_t xPos = voltageReader.Read(0);
 15a:	02 96       	adiw	r24, 0x02	; 2
 15c:	7c 01       	movw	r14, r24
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 164:	6c 01       	movw	r12, r24
	uint16_t yPos = voltageReader.Read(1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	c7 01       	movw	r24, r14
 16a:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 16e:	7c 01       	movw	r14, r24
	
	PositionTranslator t;
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN18PositionTranslatorC1Ev>
	
	string[0] = t.Translate(xPos, yPos);
 178:	a7 01       	movw	r20, r14
 17a:	b6 01       	movw	r22, r12
 17c:	ce 01       	movw	r24, r28
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN18PositionTranslator9TranslateEjj>
 184:	f8 01       	movw	r30, r16
 186:	80 83       	st	Z, r24
	string[1] = '\0';
 188:	11 82       	std	Z+1, r1	; 0x01
}
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <_ZN18PositionDataToSendC1Ev>:
#include "../PositionTranslator.h"
#include <string.h>
#include <stdio.h>

// default constructor
PositionDataToSend::PositionDataToSend()
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	d8 2f       	mov	r29, r24
 1a4:	c9 2f       	mov	r28, r25
 1a6:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 1aa:	8d 2f       	mov	r24, r29
 1ac:	9c 2f       	mov	r25, r28
 1ae:	24 e1       	ldi	r18, 0x14	; 20
 1b0:	31 e0       	ldi	r19, 0x01	; 1
 1b2:	fc 01       	movw	r30, r24
 1b4:	21 93       	st	Z+, r18
 1b6:	31 93       	st	Z+, r19
 1b8:	cf 01       	movw	r24, r30
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN11ADConverterC1Ev>
{
} //PositionDataToSend
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <_ZN21SingleClickDataToSend8ContinueEv>:
{
} //SingleClickDataToSend

bool SingleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 1c4:	89 b1       	in	r24, 0x09	; 9
 1c6:	82 fb       	bst	r24, 2
 1c8:	88 27       	eor	r24, r24
 1ca:	80 f9       	bld	r24, 0
}
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	89 27       	eor	r24, r25
 1d0:	08 95       	ret

000001d2 <_ZN21SingleClickDataToSend7GetDataEPc>:
void SingleClickDataToSend::GetData(char* string)
{
	string[0] = 9;
 1d2:	89 e0       	ldi	r24, 0x09	; 9
 1d4:	fb 01       	movw	r30, r22
 1d6:	80 83       	st	Z, r24
	string[1] = '\0';
 1d8:	11 82       	std	Z+1, r1	; 0x01
 1da:	08 95       	ret

000001dc <_ZN21SingleClickDataToSendC1Ev>:
#include "SingleClickDataToSend.h"
#include <string.h>
#include <avr/io.h>

// default constructor
SingleClickDataToSend::SingleClickDataToSend()
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 1e6:	8c e1       	ldi	r24, 0x1C	; 28
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	99 83       	std	Y+1, r25	; 0x01
 1ec:	88 83       	st	Y, r24
{
} //SingleClickDataToSend
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <_Z11resetTimer1v>:


// External interrupt 0/PORTD Pin 2
void resetTimer1()
{
	TCNT1H = TIMER1_HIGH_VALUE; //Reset counter
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = TIMER1_LOW_VALUE;
 1fa:	8c ed       	ldi	r24, 0xDC	; 220
 1fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 200:	08 95       	ret

00000202 <__vector_1>:
}

bool doubleClickFlag = false;//Flag used for double click timing, not an indicator of double click
ISR(INT0_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	if(doubleClickFlag)
 224:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 228:	88 23       	and	r24, r24
 22a:	81 f0       	breq	.+32     	; 0x24c <__vector_1+0x4a>
	{
		//Timer interrupted, double click
		
		TCCR1B &= 0b11111000; //Stop timer
 22c:	e1 e8       	ldi	r30, 0x81	; 129
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	80 83       	st	Z, r24
		resetTimer1();
 236:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z11resetTimer1v>
		doubleClickFlag = false;
 23a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		dataController = &doubleClickClass;
 23e:	81 e3       	ldi	r24, 0x31	; 49
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <dataController+0x1>
 246:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <dataController>
 24a:	06 c0       	rjmp	.+12     	; 0x258 <__vector_1+0x56>
	}
	else
	{
		//Start the timer to wait for double click
		doubleClickFlag = true;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
		TCCR1B = (1<<CS10) | (1<<CS11);;  // Timer mode with 64 prescler
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	4f 91       	pop	r20
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_13>:

// Timer 1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	//Timer timed out, single click
	TCCR1B &= 0b11111000; //Stop timer
 29c:	e1 e8       	ldi	r30, 0x81	; 129
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 7f       	andi	r24, 0xF8	; 248
 2a4:	80 83       	st	Z, r24
	resetTimer1();
 2a6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z11resetTimer1v>
	doubleClickFlag = false;//No double click
 2aa:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	dataController = &singleClickClass;
 2ae:	8f e2       	ldi	r24, 0x2F	; 47
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <dataController+0x1>
 2b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <dataController>
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:


int main(void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	65 97       	sbiw	r28, 0x15	; 21
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	UART sender(16e6, 9600);
 2f0:	00 e8       	ldi	r16, 0x80	; 128
 2f2:	15 e2       	ldi	r17, 0x25	; 37
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	54 e2       	ldi	r21, 0x24	; 36
 2fc:	64 ef       	ldi	r22, 0xF4	; 244
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 42 02 	call	0x484	; 0x484 <_ZN4UARTC1Emm>
	EICRA |= 0b00000010; //Falling edge of PORTD pin 2
 308:	e9 e6       	ldi	r30, 0x69	; 105
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
	EIMSK |= 1; //Enable INT0 - PORTD pin 2	
 312:	e8 9a       	sbi	0x1d, 0	; 29
	
	
	DDRD = (0x01 << 4);
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	8a b9       	out	0x0a, r24	; 10
	resetTimer1();
 318:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z11resetTimer1v>

	TCCR1A = 0x00;
 31c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 326:	78 94       	sei
	
	char buffer[20];
    while (1) 
    {
		dataController = &postionClass;
 328:	03 e3       	ldi	r16, 0x33	; 51
 32a:	11 e0       	ldi	r17, 0x01	; 1
 32c:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <dataController+0x1>
 330:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <dataController>
		while(dataController->Continue())
 334:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <dataController>
 338:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <dataController+0x1>
 33c:	dc 01       	movw	r26, r24
 33e:	ed 91       	ld	r30, X+
 340:	fc 91       	ld	r31, X
 342:	01 90       	ld	r0, Z+
 344:	f0 81       	ld	r31, Z
 346:	e0 2d       	mov	r30, r0
 348:	09 95       	icall
 34a:	88 23       	and	r24, r24
 34c:	79 f3       	breq	.-34     	; 0x32c <main+0x50>
		{
			dataController->GetData(buffer);
 34e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <dataController>
 352:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <dataController+0x1>
 356:	dc 01       	movw	r26, r24
 358:	ed 91       	ld	r30, X+
 35a:	fc 91       	ld	r31, X
 35c:	02 80       	ldd	r0, Z+2	; 0x02
 35e:	f3 81       	ldd	r31, Z+3	; 0x03
 360:	e0 2d       	mov	r30, r0
 362:	be 01       	movw	r22, r28
 364:	6e 5f       	subi	r22, 0xFE	; 254
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	09 95       	icall
			sender.Write(buffer);
 36a:	be 01       	movw	r22, r28
 36c:	6e 5f       	subi	r22, 0xFE	; 254
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4UART5WriteEPKc>
			sender.Write("\n");
 378:	6b e2       	ldi	r22, 0x2B	; 43
 37a:	71 e0       	ldi	r23, 0x01	; 1
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4UART5WriteEPKc>
	
	char buffer[20];
    while (1) 
    {
		dataController = &postionClass;
		while(dataController->Continue())
 384:	d7 cf       	rjmp	.-82     	; 0x334 <main+0x58>

00000386 <_GLOBAL__sub_I_dataController>:
#define TIMER1_HIGH_VALUE 0b00001011
#define TIMER1_LOW_VALUE  0b11011100 //15540 in total, 250 ms 

//Data classes for switching
BaseDataClass *dataController;
PositionDataToSend postionClass;
 386:	83 e3       	ldi	r24, 0x33	; 51
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN18PositionDataToSendC1Ev>
DoubleClickDataToSend doubleClickClass;
 38e:	81 e3       	ldi	r24, 0x31	; 49
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 93 00 	call	0x126	; 0x126 <_ZN21DoubleClickDataToSendC1Ev>
SingleClickDataToSend singleClickClass;
 396:	8f e2       	ldi	r24, 0x2F	; 47
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_ZN21SingleClickDataToSendC1Ev>
 39e:	08 95       	ret

000003a0 <_ZN18PositionTranslatorC1Ev>:

#include "PositionTranslator.h"
#include <avr/io.h>

// default constructor
PositionTranslator::PositionTranslator()
 3a0:	08 95       	ret

000003a2 <_ZN18PositionTranslator9TranslateEjj>:
{
} //PositionTranslator

uint8_t PositionTranslator::Translate(uint16_t xPos, uint16_t yPos)
{
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	ca 01       	movw	r24, r20
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	48 0f       	add	r20, r24
 3b2:	59 1f       	adc	r21, r25
 3b4:	46 0f       	add	r20, r22
 3b6:	57 1f       	adc	r21, r23
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 3b8:	ca 01       	movw	r24, r20
 3ba:	8a 5b       	subi	r24, 0xBA	; 186
 3bc:	93 40       	sbci	r25, 0x03	; 3
 3be:	85 36       	cpi	r24, 0x65	; 101
 3c0:	91 05       	cpc	r25, r1
 3c2:	80 f4       	brcc	.+32     	; 0x3e4 <_ZN18PositionTranslator9TranslateEjj+0x42>
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
	
	if(InRange(mappedProduct, 0, 400))
		return 0;
	else if (InRange(mappedProduct,954, 1054))
		return 1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	08 95       	ret
	else if(InRange(mappedProduct, 1946, 2150))
		return 2;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	08 95       	ret
	else if(InRange(mappedProduct, 2385, 2636))
		return 3;
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	08 95       	ret
	else if(InRange(mappedProduct, 3338, 3690))
		return 4;
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	08 95       	ret
	else if(InRange(mappedProduct, 4330, 4786))
		return 5;
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	08 95       	ret
	else if(InRange(mappedProduct, 4864, 5376))
		return 6;
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	08 95       	ret
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	08 95       	ret
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
 3e0:	87 e0       	ldi	r24, 0x07	; 7
 3e2:	08 95       	ret
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 3e4:	ca 01       	movw	r24, r20
 3e6:	8a 59       	subi	r24, 0x9A	; 154
 3e8:	97 40       	sbci	r25, 0x07	; 7
 3ea:	8d 3c       	cpi	r24, 0xCD	; 205
 3ec:	91 05       	cpc	r25, r1
 3ee:	60 f3       	brcs	.-40     	; 0x3c8 <_ZN18PositionTranslator9TranslateEjj+0x26>
 3f0:	87 5b       	subi	r24, 0xB7	; 183
 3f2:	91 40       	sbci	r25, 0x01	; 1
 3f4:	8c 3f       	cpi	r24, 0xFC	; 252
 3f6:	91 05       	cpc	r25, r1
 3f8:	48 f3       	brcs	.-46     	; 0x3cc <_ZN18PositionTranslator9TranslateEjj+0x2a>
 3fa:	89 5b       	subi	r24, 0xB9	; 185
 3fc:	93 40       	sbci	r25, 0x03	; 3
 3fe:	81 36       	cpi	r24, 0x61	; 97
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	92 07       	cpc	r25, r18
 404:	28 f3       	brcs	.-54     	; 0x3d0 <_ZN18PositionTranslator9TranslateEjj+0x2e>
 406:	80 5e       	subi	r24, 0xE0	; 224
 408:	93 40       	sbci	r25, 0x03	; 3
 40a:	89 3c       	cpi	r24, 0xC9	; 201
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	92 07       	cpc	r25, r18
 410:	08 f3       	brcs	.-62     	; 0x3d4 <_ZN18PositionTranslator9TranslateEjj+0x32>
 412:	86 51       	subi	r24, 0x16	; 22
 414:	92 40       	sbci	r25, 0x02	; 2
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	22 e0       	ldi	r18, 0x02	; 2
 41a:	92 07       	cpc	r25, r18
 41c:	e8 f2       	brcs	.-70     	; 0x3d8 <_ZN18PositionTranslator9TranslateEjj+0x36>
 41e:	8a 5b       	subi	r24, 0xBA	; 186
 420:	93 40       	sbci	r25, 0x03	; 3
 422:	85 36       	cpi	r24, 0x65	; 101
 424:	92 40       	sbci	r25, 0x02	; 2
 426:	d0 f2       	brcs	.-76     	; 0x3dc <_ZN18PositionTranslator9TranslateEjj+0x3a>
 428:	4a 59       	subi	r20, 0x9A	; 154
 42a:	5a 41       	sbci	r21, 0x1A	; 26
 42c:	4d 3c       	cpi	r20, 0xCD	; 205
 42e:	52 40       	sbci	r21, 0x02	; 2
 430:	b8 f2       	brcs	.-82     	; 0x3e0 <_ZN18PositionTranslator9TranslateEjj+0x3e>
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
	else
		return 4;
 432:	84 e0       	ldi	r24, 0x04	; 4
	
}
 434:	08 95       	ret

00000436 <_ZN4UART8sendCharEc>:
	}
	Write("\n");
	return line;
}
uint8_t UART::sendChar(char c)
{
 436:	cf 93       	push	r28
 438:	c6 2f       	mov	r28, r22
	if (c == '\n')
 43a:	6a 30       	cpi	r22, 0x0A	; 10
 43c:	19 f4       	brne	.+6      	; 0x444 <_ZN4UART8sendCharEc+0xe>
	{
		sendChar('\r');
 43e:	6d e0       	ldi	r22, 0x0D	; 13
 440:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN4UART8sendCharEc>
	}
	while (!(UCSR0A & (1<<UDRE0))); //waits between transmissions
 444:	e0 ec       	ldi	r30, 0xC0	; 192
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	85 ff       	sbrs	r24, 5
 44c:	fd cf       	rjmp	.-6      	; 0x448 <_ZN4UART8sendCharEc+0x12>
	UDR0 = c; //Sends the UART transmission
 44e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <_ZN4UART5WriteEPKc>:
	Write("Initialized\n");
	//Test

}
uint8_t UART::Write(const char* string)
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	eb 01       	movw	r28, r22
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 462:	68 81       	ld	r22, Y
 464:	66 23       	and	r22, r22
 466:	41 f0       	breq	.+16     	; 0x478 <_ZN4UART5WriteEPKc+0x20>
 468:	8c 01       	movw	r16, r24
 46a:	21 96       	adiw	r28, 0x01	; 1
	{
		sendChar(*(string + i));
 46c:	c8 01       	movw	r24, r16
 46e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN4UART8sendCharEc>
}
uint8_t UART::Write(const char* string)
{
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 472:	69 91       	ld	r22, Y+
 474:	61 11       	cpse	r22, r1
 476:	fa cf       	rjmp	.-12     	; 0x46c <_ZN4UART5WriteEPKc+0x14>
		sendChar(*(string + i));
		++i;
	}
	
	return 0;
}
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <_ZN4UARTC1Emm>:
 * Created: 27-02-2020 20:43:18
 *  Author: troel
 */ 
#include "UART.h"

UART::UART(uint32_t fcpu, uint32_t BAUDRATE)
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
{
	UBRR0 = fcpu/16/BAUDRATE-1; //Sets the Baudrate
 48e:	cb 01       	movw	r24, r22
 490:	ba 01       	movw	r22, r20
 492:	68 94       	set
 494:	13 f8       	bld	r1, 3
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	16 94       	lsr	r1
 4a0:	d1 f7       	brne	.-12     	; 0x496 <_ZN4UARTC1Emm+0x12>
 4a2:	a9 01       	movw	r20, r18
 4a4:	98 01       	movw	r18, r16
 4a6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__udivmodsi4>
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	31 09       	sbc	r19, r1
 4ae:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4b2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enables input and output
 4b6:	88 e1       	ldi	r24, 0x18	; 24
 4b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00); 	//Set communication as 8bit(And 1 stop bit is default.)
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	Write("Initialized\n");
 4c2:	60 e2       	ldi	r22, 0x20	; 32
 4c4:	71 e0       	ldi	r23, 0x01	; 1
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4UART5WriteEPKc>
	//Test

}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <__udivmodsi4>:
 4d6:	a1 e2       	ldi	r26, 0x21	; 33
 4d8:	1a 2e       	mov	r1, r26
 4da:	aa 1b       	sub	r26, r26
 4dc:	bb 1b       	sub	r27, r27
 4de:	fd 01       	movw	r30, r26
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <__udivmodsi4_ep>

000004e2 <__udivmodsi4_loop>:
 4e2:	aa 1f       	adc	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	ee 1f       	adc	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	a2 17       	cp	r26, r18
 4ec:	b3 07       	cpc	r27, r19
 4ee:	e4 07       	cpc	r30, r20
 4f0:	f5 07       	cpc	r31, r21
 4f2:	20 f0       	brcs	.+8      	; 0x4fc <__udivmodsi4_ep>
 4f4:	a2 1b       	sub	r26, r18
 4f6:	b3 0b       	sbc	r27, r19
 4f8:	e4 0b       	sbc	r30, r20
 4fa:	f5 0b       	sbc	r31, r21

000004fc <__udivmodsi4_ep>:
 4fc:	66 1f       	adc	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	1a 94       	dec	r1
 506:	69 f7       	brne	.-38     	; 0x4e2 <__udivmodsi4_loop>
 508:	60 95       	com	r22
 50a:	70 95       	com	r23
 50c:	80 95       	com	r24
 50e:	90 95       	com	r25
 510:	9b 01       	movw	r18, r22
 512:	ac 01       	movw	r20, r24
 514:	bd 01       	movw	r22, r26
 516:	cf 01       	movw	r24, r30
 518:	08 95       	ret

0000051a <__tablejump2__>:
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	05 90       	lpm	r0, Z+
 520:	f4 91       	lpm	r31, Z
 522:	e0 2d       	mov	r30, r0
 524:	09 94       	ijmp

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>

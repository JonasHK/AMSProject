
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000b64  00000bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  00000c1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b81  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f7  00000000  00000000  000029e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9f  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00004678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b06  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5d  00000000  00000000  00005536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d7 01       	movw	r26, r14

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 e6       	ldi	r30, 0x64	; 100
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a4 32       	cpi	r26, 0x24	; 36
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a4 e2       	ldi	r26, 0x24	; 36
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 32       	cpi	r26, 0x2E	; 46
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 c0 02 	call	0x580	; 0x580 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 80 01 	call	0x300	; 0x300 <main>
  b6:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN11ADConverterC1Ev>:
#include "ADC.h"


ADConverter::ADConverter()
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <_ZN11ADConverter4ReadEh>:
}
uint16_t ADConverter::Read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	6f 70       	andi	r22, 0x0F	; 15
  de:	68 2b       	or	r22, r24
  e0:	60 83       	st	Z, r22
	
	ADCSRA |= (1 << ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
  ec:	80 81       	ld	r24, Z
  ee:	86 fd       	sbrc	r24, 6
  f0:	fd cf       	rjmp	.-6      	; 0xec <_ZN11ADConverter4ReadEh+0x18>
	return ADC;
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fa:	08 95       	ret

000000fc <_ZN13BaseDataClass8ContinueEv>:
} //BaseDataClass

bool BaseDataClass::Continue()
{
	return true;
}
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret

00000100 <_ZN13BaseDataClass7GetDataEPc>:

void BaseDataClass::GetData(char* string)
{
 100:	08 95       	ret

00000102 <_ZN13BaseDataClassC1Ev>:


#include "BaseDataClass.h"

// default constructor
BaseDataClass::BaseDataClass()
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	fc 01       	movw	r30, r24
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <_ZN21DoubleClickDataToSend8ContinueEv>:
	strcpy(string, "A");
}

bool DoubleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 10e:	89 b1       	in	r24, 0x09	; 9
 110:	82 fb       	bst	r24, 2
 112:	88 27       	eor	r24, r24
 114:	80 f9       	bld	r24, 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	89 27       	eor	r24, r25
 11a:	08 95       	ret

0000011c <_ZN21DoubleClickDataToSend7GetDataEPc>:
{
} //DoubleClickDataToSend

void DoubleClickDataToSend::GetData(char* string)
{
	strcpy(string, "A");
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fb 01       	movw	r30, r22
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <_ZN21DoubleClickDataToSendC1Ev>:
#include <string.h>
#include <avr/io.h>


// default constructor
DoubleClickDataToSend::DoubleClickDataToSend()
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	88 83       	st	Y, r24
{
} //DoubleClickDataToSend
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_ZN18PositionDataToSend8ContinueEv>:
} //PositionDataToSend

bool PositionDataToSend::Continue()
{
	return true;
}
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret

00000144 <_ZN18PositionDataToSend7GetDataEPc>:

void PositionDataToSend::GetData(char* string)
{
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	f6 2e       	mov	r15, r22
 15c:	e7 2e       	mov	r14, r23
	uint16_t xPos = voltageReader.Read(0);//ADC channel 0
 15e:	8c 01       	movw	r16, r24
 160:	0e 5f       	subi	r16, 0xFE	; 254
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	c8 01       	movw	r24, r16
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 16c:	6c 01       	movw	r12, r24
	uint16_t yPos = voltageReader.Read(1);//ADC channel 1
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	c8 01       	movw	r24, r16
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 176:	8c 01       	movw	r16, r24
	
	PositionTranslator t;
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN18PositionTranslatorC1Ev>
	
	sprintf(string, "%d", t.Translate(xPos, yPos));
 180:	a8 01       	movw	r20, r16
 182:	b6 01       	movw	r22, r12
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN18PositionTranslator9TranslateEjj>
 18c:	1f 92       	push	r1
 18e:	8f 93       	push	r24
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	9f 93       	push	r25
 196:	8f 93       	push	r24
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0e 94 c6 02 	call	0x58c	; 0x58c <sprintf>
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <_ZN18PositionDataToSendC1Ev>:
#include "../PositionTranslator.h"
#include <string.h>
#include <stdio.h>

// default constructor
PositionDataToSend::PositionDataToSend()
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	c9 2f       	mov	r28, r25
 1c8:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 1cc:	8d 2f       	mov	r24, r29
 1ce:	9c 2f       	mov	r25, r28
 1d0:	27 e1       	ldi	r18, 0x17	; 23
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	fc 01       	movw	r30, r24
 1d6:	21 93       	st	Z+, r18
 1d8:	31 93       	st	Z+, r19
 1da:	cf 01       	movw	r24, r30
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN11ADConverterC1Ev>
{
} //PositionDataToSend
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <_ZN21SingleClickDataToSend8ContinueEv>:
{
} //SingleClickDataToSend

bool SingleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 1e6:	89 b1       	in	r24, 0x09	; 9
 1e8:	82 fb       	bst	r24, 2
 1ea:	88 27       	eor	r24, r24
 1ec:	80 f9       	bld	r24, 0
}
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	89 27       	eor	r24, r25
 1f2:	08 95       	ret

000001f4 <_ZN21SingleClickDataToSend7GetDataEPc>:
void SingleClickDataToSend::GetData(char* string)
{
	strcpy(string, "9");
 1f4:	89 e3       	ldi	r24, 0x39	; 57
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fb 01       	movw	r30, r22
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <_ZN21SingleClickDataToSendC1Ev>:
#include "SingleClickDataToSend.h"
#include <string.h>
#include <avr/io.h>

// default constructor
SingleClickDataToSend::SingleClickDataToSend()
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	99 83       	std	Y+1, r25	; 0x01
 210:	88 83       	st	Y, r24
{
} //SingleClickDataToSend
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_Z11resetTimer1v>:


// External interrupt 0/PORTD Pin 2
void resetTimer1()
{
	TCNT1H = TIMER1_HIGH_VALUE; //Reset counter
 218:	8b e0       	ldi	r24, 0x0B	; 11
 21a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = TIMER1_LOW_VALUE;
 21e:	8c ed       	ldi	r24, 0xDC	; 220
 220:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 224:	08 95       	ret

00000226 <__vector_1>:
}

bool doubleClickFlag = false;//Flag used for double click timing, not an indicator of double click
ISR(INT0_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	if(doubleClickFlag) 
 248:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 24c:	88 23       	and	r24, r24
 24e:	81 f0       	breq	.+32     	; 0x270 <__vector_1+0x4a>
	{
		//Timer interrupted, double click
		TCCR1B &= 0b11111000; //Stop timer
 250:	e1 e8       	ldi	r30, 0x81	; 129
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 83       	st	Z, r24
		resetTimer1();
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
		doubleClickFlag = false;
 25e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
		dataController = &doubleClickClass;
 262:	87 e2       	ldi	r24, 0x27	; 39
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <dataController+0x1>
 26a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dataController>
 26e:	06 c0       	rjmp	.+12     	; 0x27c <__vector_1+0x56>
	}
	else
	{
		//Start the timer to wait for double click
		doubleClickFlag = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
		TCCR1B = (1<<CS10) | (1<<CS11);;  // Timer mode with 64 prescaler
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_13>:

// Timer 1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	//Timer timed out, single click
	TCCR1B &= 0b11111000; //Stop timer
 2c0:	e1 e8       	ldi	r30, 0x81	; 129
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	88 7f       	andi	r24, 0xF8	; 248
 2c8:	80 83       	st	Z, r24
	resetTimer1();
 2ca:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
	doubleClickFlag = false;//No double click
 2ce:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	dataController = &singleClickClass;
 2d2:	85 e2       	ldi	r24, 0x25	; 37
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <dataController+0x1>
 2da:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dataController>
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:


int main(void)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	64 97       	sbiw	r28, 0x14	; 20
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	InitUART(UART0, 9600, 8, 0);
 314:	00 e0       	ldi	r16, 0x00	; 0
 316:	28 e0       	ldi	r18, 0x08	; 8
 318:	40 e8       	ldi	r20, 0x80	; 128
 31a:	55 e2       	ldi	r21, 0x25	; 37
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z8InitUARTjmhc>
	EICRA |= 0b00000010; //Falling edge of PORTD pin 2
 328:	e9 e6       	ldi	r30, 0x69	; 105
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	80 83       	st	Z, r24
	EIMSK |= 1; //Enable INT0 - PORTD pin 2	
 332:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRD = 0;
 334:	1a b8       	out	0x0a, r1	; 10
	DDRD = (0x01 << 4);
 336:	80 e1       	ldi	r24, 0x10	; 16
 338:	8a b9       	out	0x0a, r24	; 10
	resetTimer1();
 33a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>

	TCCR1A = 0x00;
 33e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 348:	78 94       	sei

	
	char buffer[20];
	while (1)
	{
		dataController = &postionClass;
 34a:	09 e2       	ldi	r16, 0x29	; 41
 34c:	11 e0       	ldi	r17, 0x01	; 1
 34e:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <dataController+0x1>
 352:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <dataController>
		while(dataController->Continue())
 356:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dataController>
 35a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dataController+0x1>
 35e:	dc 01       	movw	r26, r24
 360:	ed 91       	ld	r30, X+
 362:	fc 91       	ld	r31, X
 364:	01 90       	ld	r0, Z+
 366:	f0 81       	ld	r31, Z
 368:	e0 2d       	mov	r30, r0
 36a:	09 95       	icall
 36c:	88 23       	and	r24, r24
 36e:	79 f3       	breq	.-34     	; 0x34e <main+0x4e>
		{
			dataController->GetData(buffer);
 370:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dataController>
 374:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <dataController+0x1>
 378:	dc 01       	movw	r26, r24
 37a:	ed 91       	ld	r30, X+
 37c:	fc 91       	ld	r31, X
 37e:	02 80       	ldd	r0, Z+2	; 0x02
 380:	f3 81       	ldd	r31, Z+3	; 0x03
 382:	e0 2d       	mov	r30, r0
 384:	be 01       	movw	r22, r28
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	09 95       	icall
			SendString(UART0, buffer);
 38c:	be 01       	movw	r22, r28
 38e:	6f 5f       	subi	r22, 0xFF	; 255
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	80 ec       	ldi	r24, 0xC0	; 192
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 89 02 	call	0x512	; 0x512 <_Z10SendStringjPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	bf ef       	ldi	r27, 0xFF	; 255
 39c:	20 e7       	ldi	r18, 0x70	; 112
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	b1 50       	subi	r27, 0x01	; 1
 3a2:	20 40       	sbci	r18, 0x00	; 0
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xa0>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xaa>
 3aa:	00 00       	nop
 3ac:	d4 cf       	rjmp	.-88     	; 0x356 <main+0x56>

000003ae <_GLOBAL__sub_I_dataController>:
#define TIMER1_HIGH_VALUE 0b00001011
#define TIMER1_LOW_VALUE  0b11011100 //15540 in total, 250 ms to overflow

//Data classes for switching
BaseDataClass *dataController;
PositionDataToSend postionClass;
 3ae:	89 e2       	ldi	r24, 0x29	; 41
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN18PositionDataToSendC1Ev>
DoubleClickDataToSend doubleClickClass;
 3b6:	87 e2       	ldi	r24, 0x27	; 39
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 94 00 	call	0x128	; 0x128 <_ZN21DoubleClickDataToSendC1Ev>
SingleClickDataToSend singleClickClass;
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 00 01 	call	0x200	; 0x200 <_ZN21SingleClickDataToSendC1Ev>
 3c6:	08 95       	ret

000003c8 <_ZN18PositionTranslatorC1Ev>:

#include "PositionTranslator.h"
#include <avr/io.h>

// default constructor
PositionTranslator::PositionTranslator()
 3c8:	08 95       	ret

000003ca <_ZN18PositionTranslator9TranslateEjj>:
{
} //PositionTranslator

uint8_t PositionTranslator::Translate(uint16_t xPos, uint16_t yPos)
{
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	ca 01       	movw	r24, r20
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	48 0f       	add	r20, r24
 3da:	59 1f       	adc	r21, r25
 3dc:	46 0f       	add	r20, r22
 3de:	57 1f       	adc	r21, r23
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 3e0:	ca 01       	movw	r24, r20
 3e2:	8a 5b       	subi	r24, 0xBA	; 186
 3e4:	93 40       	sbci	r25, 0x03	; 3
 3e6:	85 36       	cpi	r24, 0x65	; 101
 3e8:	91 05       	cpc	r25, r1
 3ea:	80 f4       	brcc	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
	
	if(InRange(mappedProduct, 0, 400))
		return 0;
	else if (InRange(mappedProduct,954, 1054))
		return 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
	else if(InRange(mappedProduct, 1946, 2150))
		return 2;
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	08 95       	ret
	else if(InRange(mappedProduct, 2385, 2636))
		return 3;
 3f4:	83 e0       	ldi	r24, 0x03	; 3
 3f6:	08 95       	ret
	else if(InRange(mappedProduct, 3338, 3690))
		return 4;
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	08 95       	ret
	else if(InRange(mappedProduct, 4330, 4786))
		return 5;
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	08 95       	ret
	else if(InRange(mappedProduct, 4864, 5376))
		return 6;
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	08 95       	ret
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	08 95       	ret
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
 408:	87 e0       	ldi	r24, 0x07	; 7
 40a:	08 95       	ret
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 40c:	ca 01       	movw	r24, r20
 40e:	8a 59       	subi	r24, 0x9A	; 154
 410:	97 40       	sbci	r25, 0x07	; 7
 412:	8d 3c       	cpi	r24, 0xCD	; 205
 414:	91 05       	cpc	r25, r1
 416:	60 f3       	brcs	.-40     	; 0x3f0 <_ZN18PositionTranslator9TranslateEjj+0x26>
 418:	87 5b       	subi	r24, 0xB7	; 183
 41a:	91 40       	sbci	r25, 0x01	; 1
 41c:	8c 3f       	cpi	r24, 0xFC	; 252
 41e:	91 05       	cpc	r25, r1
 420:	48 f3       	brcs	.-46     	; 0x3f4 <_ZN18PositionTranslator9TranslateEjj+0x2a>
 422:	89 5b       	subi	r24, 0xB9	; 185
 424:	93 40       	sbci	r25, 0x03	; 3
 426:	81 36       	cpi	r24, 0x61	; 97
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	92 07       	cpc	r25, r18
 42c:	28 f3       	brcs	.-54     	; 0x3f8 <_ZN18PositionTranslator9TranslateEjj+0x2e>
 42e:	80 5e       	subi	r24, 0xE0	; 224
 430:	93 40       	sbci	r25, 0x03	; 3
 432:	89 3c       	cpi	r24, 0xC9	; 201
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	92 07       	cpc	r25, r18
 438:	08 f3       	brcs	.-62     	; 0x3fc <_ZN18PositionTranslator9TranslateEjj+0x32>
 43a:	86 51       	subi	r24, 0x16	; 22
 43c:	92 40       	sbci	r25, 0x02	; 2
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	22 e0       	ldi	r18, 0x02	; 2
 442:	92 07       	cpc	r25, r18
 444:	e8 f2       	brcs	.-70     	; 0x400 <__LOCK_REGION_LENGTH__>
 446:	8a 5b       	subi	r24, 0xBA	; 186
 448:	93 40       	sbci	r25, 0x03	; 3
 44a:	85 36       	cpi	r24, 0x65	; 101
 44c:	92 40       	sbci	r25, 0x02	; 2
 44e:	d0 f2       	brcs	.-76     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 450:	4a 59       	subi	r20, 0x9A	; 154
 452:	5a 41       	sbci	r21, 0x1A	; 26
 454:	4d 3c       	cpi	r20, 0xCD	; 205
 456:	52 40       	sbci	r21, 0x02	; 2
 458:	b8 f2       	brcs	.-82     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
	else
		return 4;
 45a:	84 e0       	ldi	r24, 0x04	; 4
	
}
 45c:	08 95       	ret

0000045e <_Z8InitUARTjmhc>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 45e:	0f 93       	push	r16
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
 466:	db 01       	movw	r26, r22
 468:	ca 01       	movw	r24, r20
 46a:	8c 52       	subi	r24, 0x2C	; 44
 46c:	91 40       	sbci	r25, 0x01	; 1
 46e:	a1 09       	sbc	r26, r1
 470:	b1 09       	sbc	r27, r1
 472:	85 3d       	cpi	r24, 0xD5	; 213
 474:	90 4c       	sbci	r25, 0xC0	; 192
 476:	a1 40       	sbci	r26, 0x01	; 1
 478:	b1 05       	cpc	r27, r1
 47a:	08 f0       	brcs	.+2      	; 0x47e <_Z8InitUARTjmhc+0x20>
 47c:	40 c0       	rjmp	.+128    	; 0x4fe <_Z8InitUARTjmhc+0xa0>
 47e:	25 50       	subi	r18, 0x05	; 5
 480:	24 30       	cpi	r18, 0x04	; 4
 482:	e8 f5       	brcc	.+122    	; 0x4fe <_Z8InitUARTjmhc+0xa0>
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	88 83       	st	Y, r24
 488:	88 e1       	ldi	r24, 0x18	; 24
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	22 0f       	add	r18, r18
 48e:	2a 83       	std	Y+2, r18	; 0x02
 490:	05 34       	cpi	r16, 0x45	; 69
 492:	21 f4       	brne	.+8      	; 0x49c <_Z8InitUARTjmhc+0x3e>
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	80 62       	ori	r24, 0x20	; 32
 498:	8a 83       	std	Y+2, r24	; 0x02
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <_Z8InitUARTjmhc+0x48>
 49c:	0f 34       	cpi	r16, 0x4F	; 79
 49e:	19 f4       	brne	.+6      	; 0x4a6 <_Z8InitUARTjmhc+0x48>
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	80 63       	ori	r24, 0x30	; 48
 4a4:	8a 83       	std	Y+2, r24	; 0x02
 4a6:	db 01       	movw	r26, r22
 4a8:	ca 01       	movw	r24, r20
 4aa:	80 58       	subi	r24, 0x80	; 128
 4ac:	9b 47       	sbci	r25, 0x7B	; 123
 4ae:	a1 4e       	sbci	r26, 0xE1	; 225
 4b0:	bf 4f       	sbci	r27, 0xFF	; 255
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	66 1f       	adc	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	9a 01       	movw	r18, r20
 4dc:	ab 01       	movw	r20, r22
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	44 1f       	adc	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	44 1f       	adc	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	bc 01       	movw	r22, r24
 4f0:	cd 01       	movw	r24, r26
 4f2:	0e 94 9e 02 	call	0x53c	; 0x53c <__udivmodsi4>
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	31 09       	sbc	r19, r1
 4fa:	3d 83       	std	Y+5, r19	; 0x05
 4fc:	2c 83       	std	Y+4, r18	; 0x04
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <_Z8SendCharjc>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 506:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 508:	90 81       	ld	r25, Z
 50a:	95 ff       	sbrs	r25, 5
 50c:	fd cf       	rjmp	.-6      	; 0x508 <_Z8SendCharjc+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 50e:	66 83       	std	Z+6, r22	; 0x06
 510:	08 95       	ret

00000512 <_Z10SendStringjPKc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 51c:	68 81       	ld	r22, Y
 51e:	66 23       	and	r22, r22
 520:	41 f0       	breq	.+16     	; 0x532 <_Z10SendStringjPKc+0x20>
 522:	8c 01       	movw	r16, r24
 524:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 526:	c8 01       	movw	r24, r16
 528:	0e 94 83 02 	call	0x506	; 0x506 <_Z8SendCharjc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 52c:	69 91       	ld	r22, Y+
 52e:	61 11       	cpse	r22, r1
 530:	fa cf       	rjmp	.-12     	; 0x526 <_Z10SendStringjPKc+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <__udivmodsi4>:
 53c:	a1 e2       	ldi	r26, 0x21	; 33
 53e:	1a 2e       	mov	r1, r26
 540:	aa 1b       	sub	r26, r26
 542:	bb 1b       	sub	r27, r27
 544:	fd 01       	movw	r30, r26
 546:	0d c0       	rjmp	.+26     	; 0x562 <__udivmodsi4_ep>

00000548 <__udivmodsi4_loop>:
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	ee 1f       	adc	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	a2 17       	cp	r26, r18
 552:	b3 07       	cpc	r27, r19
 554:	e4 07       	cpc	r30, r20
 556:	f5 07       	cpc	r31, r21
 558:	20 f0       	brcs	.+8      	; 0x562 <__udivmodsi4_ep>
 55a:	a2 1b       	sub	r26, r18
 55c:	b3 0b       	sbc	r27, r19
 55e:	e4 0b       	sbc	r30, r20
 560:	f5 0b       	sbc	r31, r21

00000562 <__udivmodsi4_ep>:
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	1a 94       	dec	r1
 56c:	69 f7       	brne	.-38     	; 0x548 <__udivmodsi4_loop>
 56e:	60 95       	com	r22
 570:	70 95       	com	r23
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	bd 01       	movw	r22, r26
 57c:	cf 01       	movw	r24, r30
 57e:	08 95       	ret

00000580 <__tablejump2__>:
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	05 90       	lpm	r0, Z+
 586:	f4 91       	lpm	r31, Z
 588:	e0 2d       	mov	r30, r0
 58a:	09 94       	ijmp

0000058c <sprintf>:
 58c:	ae e0       	ldi	r26, 0x0E	; 14
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	ec ec       	ldi	r30, 0xCC	; 204
 592:	f2 e0       	ldi	r31, 0x02	; 2
 594:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__prologue_saves__+0x1c>
 598:	0d 89       	ldd	r16, Y+21	; 0x15
 59a:	1e 89       	ldd	r17, Y+22	; 0x16
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	8c 83       	std	Y+4, r24	; 0x04
 5a0:	1a 83       	std	Y+2, r17	; 0x02
 5a2:	09 83       	std	Y+1, r16	; 0x01
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f e7       	ldi	r25, 0x7F	; 127
 5a8:	9e 83       	std	Y+6, r25	; 0x06
 5aa:	8d 83       	std	Y+5, r24	; 0x05
 5ac:	ae 01       	movw	r20, r28
 5ae:	47 5e       	subi	r20, 0xE7	; 231
 5b0:	5f 4f       	sbci	r21, 0xFF	; 255
 5b2:	6f 89       	ldd	r22, Y+23	; 0x17
 5b4:	78 8d       	ldd	r23, Y+24	; 0x18
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <vfprintf>
 5be:	ef 81       	ldd	r30, Y+7	; 0x07
 5c0:	f8 85       	ldd	r31, Y+8	; 0x08
 5c2:	e0 0f       	add	r30, r16
 5c4:	f1 1f       	adc	r31, r17
 5c6:	10 82       	st	Z, r1
 5c8:	2e 96       	adiw	r28, 0x0e	; 14
 5ca:	e4 e0       	ldi	r30, 0x04	; 4
 5cc:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__epilogue_restores__+0x1c>

000005d0 <vfprintf>:
 5d0:	ab e0       	ldi	r26, 0x0B	; 11
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	ee ee       	ldi	r30, 0xEE	; 238
 5d6:	f2 e0       	ldi	r31, 0x02	; 2
 5d8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__prologue_saves__>
 5dc:	6c 01       	movw	r12, r24
 5de:	7b 01       	movw	r14, r22
 5e0:	8a 01       	movw	r16, r20
 5e2:	fc 01       	movw	r30, r24
 5e4:	17 82       	std	Z+7, r1	; 0x07
 5e6:	16 82       	std	Z+6, r1	; 0x06
 5e8:	83 81       	ldd	r24, Z+3	; 0x03
 5ea:	81 ff       	sbrs	r24, 1
 5ec:	cc c1       	rjmp	.+920    	; 0x986 <__stack+0x87>
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	3c 01       	movw	r6, r24
 5f4:	f6 01       	movw	r30, r12
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	f7 01       	movw	r30, r14
 5fa:	93 fd       	sbrc	r25, 3
 5fc:	85 91       	lpm	r24, Z+
 5fe:	93 ff       	sbrs	r25, 3
 600:	81 91       	ld	r24, Z+
 602:	7f 01       	movw	r14, r30
 604:	88 23       	and	r24, r24
 606:	09 f4       	brne	.+2      	; 0x60a <vfprintf+0x3a>
 608:	ba c1       	rjmp	.+884    	; 0x97e <__stack+0x7f>
 60a:	85 32       	cpi	r24, 0x25	; 37
 60c:	39 f4       	brne	.+14     	; 0x61c <vfprintf+0x4c>
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	85 32       	cpi	r24, 0x25	; 37
 61a:	29 f4       	brne	.+10     	; 0x626 <vfprintf+0x56>
 61c:	b6 01       	movw	r22, r12
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 624:	e7 cf       	rjmp	.-50     	; 0x5f4 <vfprintf+0x24>
 626:	91 2c       	mov	r9, r1
 628:	21 2c       	mov	r2, r1
 62a:	31 2c       	mov	r3, r1
 62c:	ff e1       	ldi	r31, 0x1F	; 31
 62e:	f3 15       	cp	r31, r3
 630:	d8 f0       	brcs	.+54     	; 0x668 <vfprintf+0x98>
 632:	8b 32       	cpi	r24, 0x2B	; 43
 634:	79 f0       	breq	.+30     	; 0x654 <vfprintf+0x84>
 636:	38 f4       	brcc	.+14     	; 0x646 <vfprintf+0x76>
 638:	80 32       	cpi	r24, 0x20	; 32
 63a:	79 f0       	breq	.+30     	; 0x65a <vfprintf+0x8a>
 63c:	83 32       	cpi	r24, 0x23	; 35
 63e:	a1 f4       	brne	.+40     	; 0x668 <vfprintf+0x98>
 640:	23 2d       	mov	r18, r3
 642:	20 61       	ori	r18, 0x10	; 16
 644:	1d c0       	rjmp	.+58     	; 0x680 <vfprintf+0xb0>
 646:	8d 32       	cpi	r24, 0x2D	; 45
 648:	61 f0       	breq	.+24     	; 0x662 <vfprintf+0x92>
 64a:	80 33       	cpi	r24, 0x30	; 48
 64c:	69 f4       	brne	.+26     	; 0x668 <vfprintf+0x98>
 64e:	23 2d       	mov	r18, r3
 650:	21 60       	ori	r18, 0x01	; 1
 652:	16 c0       	rjmp	.+44     	; 0x680 <vfprintf+0xb0>
 654:	83 2d       	mov	r24, r3
 656:	82 60       	ori	r24, 0x02	; 2
 658:	38 2e       	mov	r3, r24
 65a:	e3 2d       	mov	r30, r3
 65c:	e4 60       	ori	r30, 0x04	; 4
 65e:	3e 2e       	mov	r3, r30
 660:	2a c0       	rjmp	.+84     	; 0x6b6 <vfprintf+0xe6>
 662:	f3 2d       	mov	r31, r3
 664:	f8 60       	ori	r31, 0x08	; 8
 666:	1d c0       	rjmp	.+58     	; 0x6a2 <vfprintf+0xd2>
 668:	37 fc       	sbrc	r3, 7
 66a:	2d c0       	rjmp	.+90     	; 0x6c6 <vfprintf+0xf6>
 66c:	20 ed       	ldi	r18, 0xD0	; 208
 66e:	28 0f       	add	r18, r24
 670:	2a 30       	cpi	r18, 0x0A	; 10
 672:	40 f0       	brcs	.+16     	; 0x684 <vfprintf+0xb4>
 674:	8e 32       	cpi	r24, 0x2E	; 46
 676:	b9 f4       	brne	.+46     	; 0x6a6 <vfprintf+0xd6>
 678:	36 fc       	sbrc	r3, 6
 67a:	81 c1       	rjmp	.+770    	; 0x97e <__stack+0x7f>
 67c:	23 2d       	mov	r18, r3
 67e:	20 64       	ori	r18, 0x40	; 64
 680:	32 2e       	mov	r3, r18
 682:	19 c0       	rjmp	.+50     	; 0x6b6 <vfprintf+0xe6>
 684:	36 fe       	sbrs	r3, 6
 686:	06 c0       	rjmp	.+12     	; 0x694 <vfprintf+0xc4>
 688:	8a e0       	ldi	r24, 0x0A	; 10
 68a:	98 9e       	mul	r9, r24
 68c:	20 0d       	add	r18, r0
 68e:	11 24       	eor	r1, r1
 690:	92 2e       	mov	r9, r18
 692:	11 c0       	rjmp	.+34     	; 0x6b6 <vfprintf+0xe6>
 694:	ea e0       	ldi	r30, 0x0A	; 10
 696:	2e 9e       	mul	r2, r30
 698:	20 0d       	add	r18, r0
 69a:	11 24       	eor	r1, r1
 69c:	22 2e       	mov	r2, r18
 69e:	f3 2d       	mov	r31, r3
 6a0:	f0 62       	ori	r31, 0x20	; 32
 6a2:	3f 2e       	mov	r3, r31
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <vfprintf+0xe6>
 6a6:	8c 36       	cpi	r24, 0x6C	; 108
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <vfprintf+0xe2>
 6aa:	83 2d       	mov	r24, r3
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	38 2e       	mov	r3, r24
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0xe6>
 6b2:	88 36       	cpi	r24, 0x68	; 104
 6b4:	41 f4       	brne	.+16     	; 0x6c6 <vfprintf+0xf6>
 6b6:	f7 01       	movw	r30, r14
 6b8:	93 fd       	sbrc	r25, 3
 6ba:	85 91       	lpm	r24, Z+
 6bc:	93 ff       	sbrs	r25, 3
 6be:	81 91       	ld	r24, Z+
 6c0:	7f 01       	movw	r14, r30
 6c2:	81 11       	cpse	r24, r1
 6c4:	b3 cf       	rjmp	.-154    	; 0x62c <vfprintf+0x5c>
 6c6:	98 2f       	mov	r25, r24
 6c8:	9f 7d       	andi	r25, 0xDF	; 223
 6ca:	95 54       	subi	r25, 0x45	; 69
 6cc:	93 30       	cpi	r25, 0x03	; 3
 6ce:	28 f4       	brcc	.+10     	; 0x6da <vfprintf+0x10a>
 6d0:	0c 5f       	subi	r16, 0xFC	; 252
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	9f e3       	ldi	r25, 0x3F	; 63
 6d6:	99 83       	std	Y+1, r25	; 0x01
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <vfprintf+0x124>
 6da:	83 36       	cpi	r24, 0x63	; 99
 6dc:	31 f0       	breq	.+12     	; 0x6ea <vfprintf+0x11a>
 6de:	83 37       	cpi	r24, 0x73	; 115
 6e0:	71 f0       	breq	.+28     	; 0x6fe <vfprintf+0x12e>
 6e2:	83 35       	cpi	r24, 0x53	; 83
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <vfprintf+0x118>
 6e6:	59 c0       	rjmp	.+178    	; 0x79a <vfprintf+0x1ca>
 6e8:	21 c0       	rjmp	.+66     	; 0x72c <vfprintf+0x15c>
 6ea:	f8 01       	movw	r30, r16
 6ec:	80 81       	ld	r24, Z
 6ee:	89 83       	std	Y+1, r24	; 0x01
 6f0:	0e 5f       	subi	r16, 0xFE	; 254
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	88 24       	eor	r8, r8
 6f6:	83 94       	inc	r8
 6f8:	91 2c       	mov	r9, r1
 6fa:	53 01       	movw	r10, r6
 6fc:	13 c0       	rjmp	.+38     	; 0x724 <vfprintf+0x154>
 6fe:	28 01       	movw	r4, r16
 700:	f2 e0       	ldi	r31, 0x02	; 2
 702:	4f 0e       	add	r4, r31
 704:	51 1c       	adc	r5, r1
 706:	f8 01       	movw	r30, r16
 708:	a0 80       	ld	r10, Z
 70a:	b1 80       	ldd	r11, Z+1	; 0x01
 70c:	36 fe       	sbrs	r3, 6
 70e:	03 c0       	rjmp	.+6      	; 0x716 <vfprintf+0x146>
 710:	69 2d       	mov	r22, r9
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <vfprintf+0x14a>
 716:	6f ef       	ldi	r22, 0xFF	; 255
 718:	7f ef       	ldi	r23, 0xFF	; 255
 71a:	c5 01       	movw	r24, r10
 71c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strnlen>
 720:	4c 01       	movw	r8, r24
 722:	82 01       	movw	r16, r4
 724:	f3 2d       	mov	r31, r3
 726:	ff 77       	andi	r31, 0x7F	; 127
 728:	3f 2e       	mov	r3, r31
 72a:	16 c0       	rjmp	.+44     	; 0x758 <vfprintf+0x188>
 72c:	28 01       	movw	r4, r16
 72e:	22 e0       	ldi	r18, 0x02	; 2
 730:	42 0e       	add	r4, r18
 732:	51 1c       	adc	r5, r1
 734:	f8 01       	movw	r30, r16
 736:	a0 80       	ld	r10, Z
 738:	b1 80       	ldd	r11, Z+1	; 0x01
 73a:	36 fe       	sbrs	r3, 6
 73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x174>
 73e:	69 2d       	mov	r22, r9
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x178>
 744:	6f ef       	ldi	r22, 0xFF	; 255
 746:	7f ef       	ldi	r23, 0xFF	; 255
 748:	c5 01       	movw	r24, r10
 74a:	0e 94 c9 04 	call	0x992	; 0x992 <strnlen_P>
 74e:	4c 01       	movw	r8, r24
 750:	f3 2d       	mov	r31, r3
 752:	f0 68       	ori	r31, 0x80	; 128
 754:	3f 2e       	mov	r3, r31
 756:	82 01       	movw	r16, r4
 758:	33 fc       	sbrc	r3, 3
 75a:	1b c0       	rjmp	.+54     	; 0x792 <vfprintf+0x1c2>
 75c:	82 2d       	mov	r24, r2
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	88 16       	cp	r8, r24
 762:	99 06       	cpc	r9, r25
 764:	b0 f4       	brcc	.+44     	; 0x792 <vfprintf+0x1c2>
 766:	b6 01       	movw	r22, r12
 768:	80 e2       	ldi	r24, 0x20	; 32
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 770:	2a 94       	dec	r2
 772:	f4 cf       	rjmp	.-24     	; 0x75c <vfprintf+0x18c>
 774:	f5 01       	movw	r30, r10
 776:	37 fc       	sbrc	r3, 7
 778:	85 91       	lpm	r24, Z+
 77a:	37 fe       	sbrs	r3, 7
 77c:	81 91       	ld	r24, Z+
 77e:	5f 01       	movw	r10, r30
 780:	b6 01       	movw	r22, r12
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 788:	21 10       	cpse	r2, r1
 78a:	2a 94       	dec	r2
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	82 1a       	sub	r8, r18
 790:	91 08       	sbc	r9, r1
 792:	81 14       	cp	r8, r1
 794:	91 04       	cpc	r9, r1
 796:	71 f7       	brne	.-36     	; 0x774 <vfprintf+0x1a4>
 798:	e8 c0       	rjmp	.+464    	; 0x96a <__stack+0x6b>
 79a:	84 36       	cpi	r24, 0x64	; 100
 79c:	11 f0       	breq	.+4      	; 0x7a2 <vfprintf+0x1d2>
 79e:	89 36       	cpi	r24, 0x69	; 105
 7a0:	41 f5       	brne	.+80     	; 0x7f2 <vfprintf+0x222>
 7a2:	f8 01       	movw	r30, r16
 7a4:	37 fe       	sbrs	r3, 7
 7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <vfprintf+0x1e6>
 7a8:	60 81       	ld	r22, Z
 7aa:	71 81       	ldd	r23, Z+1	; 0x01
 7ac:	82 81       	ldd	r24, Z+2	; 0x02
 7ae:	93 81       	ldd	r25, Z+3	; 0x03
 7b0:	0c 5f       	subi	r16, 0xFC	; 252
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <vfprintf+0x1f6>
 7b6:	60 81       	ld	r22, Z
 7b8:	71 81       	ldd	r23, Z+1	; 0x01
 7ba:	07 2e       	mov	r0, r23
 7bc:	00 0c       	add	r0, r0
 7be:	88 0b       	sbc	r24, r24
 7c0:	99 0b       	sbc	r25, r25
 7c2:	0e 5f       	subi	r16, 0xFE	; 254
 7c4:	1f 4f       	sbci	r17, 0xFF	; 255
 7c6:	f3 2d       	mov	r31, r3
 7c8:	ff 76       	andi	r31, 0x6F	; 111
 7ca:	3f 2e       	mov	r3, r31
 7cc:	97 ff       	sbrs	r25, 7
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x212>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	f0 68       	ori	r31, 0x80	; 128
 7e0:	3f 2e       	mov	r3, r31
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	a3 01       	movw	r20, r6
 7e8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ultoa_invert>
 7ec:	88 2e       	mov	r8, r24
 7ee:	86 18       	sub	r8, r6
 7f0:	45 c0       	rjmp	.+138    	; 0x87c <vfprintf+0x2ac>
 7f2:	85 37       	cpi	r24, 0x75	; 117
 7f4:	31 f4       	brne	.+12     	; 0x802 <vfprintf+0x232>
 7f6:	23 2d       	mov	r18, r3
 7f8:	2f 7e       	andi	r18, 0xEF	; 239
 7fa:	b2 2e       	mov	r11, r18
 7fc:	2a e0       	ldi	r18, 0x0A	; 10
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	25 c0       	rjmp	.+74     	; 0x84c <vfprintf+0x27c>
 802:	93 2d       	mov	r25, r3
 804:	99 7f       	andi	r25, 0xF9	; 249
 806:	b9 2e       	mov	r11, r25
 808:	8f 36       	cpi	r24, 0x6F	; 111
 80a:	c1 f0       	breq	.+48     	; 0x83c <vfprintf+0x26c>
 80c:	18 f4       	brcc	.+6      	; 0x814 <vfprintf+0x244>
 80e:	88 35       	cpi	r24, 0x58	; 88
 810:	79 f0       	breq	.+30     	; 0x830 <vfprintf+0x260>
 812:	b5 c0       	rjmp	.+362    	; 0x97e <__stack+0x7f>
 814:	80 37       	cpi	r24, 0x70	; 112
 816:	19 f0       	breq	.+6      	; 0x81e <vfprintf+0x24e>
 818:	88 37       	cpi	r24, 0x78	; 120
 81a:	21 f0       	breq	.+8      	; 0x824 <vfprintf+0x254>
 81c:	b0 c0       	rjmp	.+352    	; 0x97e <__stack+0x7f>
 81e:	e9 2f       	mov	r30, r25
 820:	e0 61       	ori	r30, 0x10	; 16
 822:	be 2e       	mov	r11, r30
 824:	b4 fe       	sbrs	r11, 4
 826:	0d c0       	rjmp	.+26     	; 0x842 <vfprintf+0x272>
 828:	fb 2d       	mov	r31, r11
 82a:	f4 60       	ori	r31, 0x04	; 4
 82c:	bf 2e       	mov	r11, r31
 82e:	09 c0       	rjmp	.+18     	; 0x842 <vfprintf+0x272>
 830:	34 fe       	sbrs	r3, 4
 832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x278>
 834:	29 2f       	mov	r18, r25
 836:	26 60       	ori	r18, 0x06	; 6
 838:	b2 2e       	mov	r11, r18
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0x278>
 83c:	28 e0       	ldi	r18, 0x08	; 8
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	05 c0       	rjmp	.+10     	; 0x84c <vfprintf+0x27c>
 842:	20 e1       	ldi	r18, 0x10	; 16
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <vfprintf+0x27c>
 848:	20 e1       	ldi	r18, 0x10	; 16
 84a:	32 e0       	ldi	r19, 0x02	; 2
 84c:	f8 01       	movw	r30, r16
 84e:	b7 fe       	sbrs	r11, 7
 850:	07 c0       	rjmp	.+14     	; 0x860 <vfprintf+0x290>
 852:	60 81       	ld	r22, Z
 854:	71 81       	ldd	r23, Z+1	; 0x01
 856:	82 81       	ldd	r24, Z+2	; 0x02
 858:	93 81       	ldd	r25, Z+3	; 0x03
 85a:	0c 5f       	subi	r16, 0xFC	; 252
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x29c>
 860:	60 81       	ld	r22, Z
 862:	71 81       	ldd	r23, Z+1	; 0x01
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 5f       	subi	r16, 0xFE	; 254
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	a3 01       	movw	r20, r6
 86e:	0e 94 1b 05 	call	0xa36	; 0xa36 <__ultoa_invert>
 872:	88 2e       	mov	r8, r24
 874:	86 18       	sub	r8, r6
 876:	fb 2d       	mov	r31, r11
 878:	ff 77       	andi	r31, 0x7F	; 127
 87a:	3f 2e       	mov	r3, r31
 87c:	36 fe       	sbrs	r3, 6
 87e:	0d c0       	rjmp	.+26     	; 0x89a <vfprintf+0x2ca>
 880:	23 2d       	mov	r18, r3
 882:	2e 7f       	andi	r18, 0xFE	; 254
 884:	a2 2e       	mov	r10, r18
 886:	89 14       	cp	r8, r9
 888:	58 f4       	brcc	.+22     	; 0x8a0 <vfprintf+0x2d0>
 88a:	34 fe       	sbrs	r3, 4
 88c:	0b c0       	rjmp	.+22     	; 0x8a4 <vfprintf+0x2d4>
 88e:	32 fc       	sbrc	r3, 2
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <vfprintf+0x2d4>
 892:	83 2d       	mov	r24, r3
 894:	8e 7e       	andi	r24, 0xEE	; 238
 896:	a8 2e       	mov	r10, r24
 898:	05 c0       	rjmp	.+10     	; 0x8a4 <vfprintf+0x2d4>
 89a:	b8 2c       	mov	r11, r8
 89c:	a3 2c       	mov	r10, r3
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <vfprintf+0x2d6>
 8a0:	b8 2c       	mov	r11, r8
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <vfprintf+0x2d6>
 8a4:	b9 2c       	mov	r11, r9
 8a6:	a4 fe       	sbrs	r10, 4
 8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <vfprintf+0x2f8>
 8aa:	fe 01       	movw	r30, r28
 8ac:	e8 0d       	add	r30, r8
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	80 33       	cpi	r24, 0x30	; 48
 8b4:	21 f4       	brne	.+8      	; 0x8be <vfprintf+0x2ee>
 8b6:	9a 2d       	mov	r25, r10
 8b8:	99 7e       	andi	r25, 0xE9	; 233
 8ba:	a9 2e       	mov	r10, r25
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <vfprintf+0x300>
 8be:	a2 fe       	sbrs	r10, 2
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <vfprintf+0x2fe>
 8c2:	b3 94       	inc	r11
 8c4:	b3 94       	inc	r11
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <vfprintf+0x300>
 8c8:	8a 2d       	mov	r24, r10
 8ca:	86 78       	andi	r24, 0x86	; 134
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <vfprintf+0x300>
 8ce:	b3 94       	inc	r11
 8d0:	a3 fc       	sbrc	r10, 3
 8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <vfprintf+0x326>
 8d4:	a0 fe       	sbrs	r10, 0
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x314>
 8d8:	b2 14       	cp	r11, r2
 8da:	88 f4       	brcc	.+34     	; 0x8fe <vfprintf+0x32e>
 8dc:	28 0c       	add	r2, r8
 8de:	92 2c       	mov	r9, r2
 8e0:	9b 18       	sub	r9, r11
 8e2:	0e c0       	rjmp	.+28     	; 0x900 <__stack+0x1>
 8e4:	b2 14       	cp	r11, r2
 8e6:	60 f4       	brcc	.+24     	; 0x900 <__stack+0x1>
 8e8:	b6 01       	movw	r22, r12
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 8f2:	b3 94       	inc	r11
 8f4:	f7 cf       	rjmp	.-18     	; 0x8e4 <vfprintf+0x314>
 8f6:	b2 14       	cp	r11, r2
 8f8:	18 f4       	brcc	.+6      	; 0x900 <__stack+0x1>
 8fa:	2b 18       	sub	r2, r11
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
 8fe:	98 2c       	mov	r9, r8
 900:	21 2c       	mov	r2, r1
 902:	a4 fe       	sbrs	r10, 4
 904:	10 c0       	rjmp	.+32     	; 0x926 <__stack+0x27>
 906:	b6 01       	movw	r22, r12
 908:	80 e3       	ldi	r24, 0x30	; 48
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 910:	a2 fe       	sbrs	r10, 2
 912:	17 c0       	rjmp	.+46     	; 0x942 <__stack+0x43>
 914:	a1 fc       	sbrc	r10, 1
 916:	03 c0       	rjmp	.+6      	; 0x91e <__stack+0x1f>
 918:	88 e7       	ldi	r24, 0x78	; 120
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	88 e5       	ldi	r24, 0x58	; 88
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	b6 01       	movw	r22, r12
 924:	0c c0       	rjmp	.+24     	; 0x93e <__stack+0x3f>
 926:	8a 2d       	mov	r24, r10
 928:	86 78       	andi	r24, 0x86	; 134
 92a:	59 f0       	breq	.+22     	; 0x942 <__stack+0x43>
 92c:	a1 fe       	sbrs	r10, 1
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
 930:	8b e2       	ldi	r24, 0x2B	; 43
 932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
 934:	80 e2       	ldi	r24, 0x20	; 32
 936:	a7 fc       	sbrc	r10, 7
 938:	8d e2       	ldi	r24, 0x2D	; 45
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 942:	89 14       	cp	r8, r9
 944:	38 f4       	brcc	.+14     	; 0x954 <__stack+0x55>
 946:	b6 01       	movw	r22, r12
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 950:	9a 94       	dec	r9
 952:	f7 cf       	rjmp	.-18     	; 0x942 <__stack+0x43>
 954:	8a 94       	dec	r8
 956:	f3 01       	movw	r30, r6
 958:	e8 0d       	add	r30, r8
 95a:	f1 1d       	adc	r31, r1
 95c:	80 81       	ld	r24, Z
 95e:	b6 01       	movw	r22, r12
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 966:	81 10       	cpse	r8, r1
 968:	f5 cf       	rjmp	.-22     	; 0x954 <__stack+0x55>
 96a:	22 20       	and	r2, r2
 96c:	09 f4       	brne	.+2      	; 0x970 <__stack+0x71>
 96e:	42 ce       	rjmp	.-892    	; 0x5f4 <vfprintf+0x24>
 970:	b6 01       	movw	r22, r12
 972:	80 e2       	ldi	r24, 0x20	; 32
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 df 04 	call	0x9be	; 0x9be <fputc>
 97a:	2a 94       	dec	r2
 97c:	f6 cf       	rjmp	.-20     	; 0x96a <__stack+0x6b>
 97e:	f6 01       	movw	r30, r12
 980:	86 81       	ldd	r24, Z+6	; 0x06
 982:	97 81       	ldd	r25, Z+7	; 0x07
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
 986:	8f ef       	ldi	r24, 0xFF	; 255
 988:	9f ef       	ldi	r25, 0xFF	; 255
 98a:	2b 96       	adiw	r28, 0x0b	; 11
 98c:	e2 e1       	ldi	r30, 0x12	; 18
 98e:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__epilogue_restores__>

00000992 <strnlen_P>:
 992:	fc 01       	movw	r30, r24
 994:	05 90       	lpm	r0, Z+
 996:	61 50       	subi	r22, 0x01	; 1
 998:	70 40       	sbci	r23, 0x00	; 0
 99a:	01 10       	cpse	r0, r1
 99c:	d8 f7       	brcc	.-10     	; 0x994 <strnlen_P+0x2>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	8e 0f       	add	r24, r30
 9a4:	9f 1f       	adc	r25, r31
 9a6:	08 95       	ret

000009a8 <strnlen>:
 9a8:	fc 01       	movw	r30, r24
 9aa:	61 50       	subi	r22, 0x01	; 1
 9ac:	70 40       	sbci	r23, 0x00	; 0
 9ae:	01 90       	ld	r0, Z+
 9b0:	01 10       	cpse	r0, r1
 9b2:	d8 f7       	brcc	.-10     	; 0x9aa <strnlen+0x2>
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	8e 0f       	add	r24, r30
 9ba:	9f 1f       	adc	r25, r31
 9bc:	08 95       	ret

000009be <fputc>:
 9be:	0f 93       	push	r16
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	fb 01       	movw	r30, r22
 9c8:	23 81       	ldd	r18, Z+3	; 0x03
 9ca:	21 fd       	sbrc	r18, 1
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <fputc+0x16>
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	9f ef       	ldi	r25, 0xFF	; 255
 9d2:	2c c0       	rjmp	.+88     	; 0xa2c <fputc+0x6e>
 9d4:	22 ff       	sbrs	r18, 2
 9d6:	16 c0       	rjmp	.+44     	; 0xa04 <fputc+0x46>
 9d8:	46 81       	ldd	r20, Z+6	; 0x06
 9da:	57 81       	ldd	r21, Z+7	; 0x07
 9dc:	24 81       	ldd	r18, Z+4	; 0x04
 9de:	35 81       	ldd	r19, Z+5	; 0x05
 9e0:	42 17       	cp	r20, r18
 9e2:	53 07       	cpc	r21, r19
 9e4:	44 f4       	brge	.+16     	; 0x9f6 <fputc+0x38>
 9e6:	a0 81       	ld	r26, Z
 9e8:	b1 81       	ldd	r27, Z+1	; 0x01
 9ea:	9d 01       	movw	r18, r26
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	31 83       	std	Z+1, r19	; 0x01
 9f2:	20 83       	st	Z, r18
 9f4:	8c 93       	st	X, r24
 9f6:	26 81       	ldd	r18, Z+6	; 0x06
 9f8:	37 81       	ldd	r19, Z+7	; 0x07
 9fa:	2f 5f       	subi	r18, 0xFF	; 255
 9fc:	3f 4f       	sbci	r19, 0xFF	; 255
 9fe:	37 83       	std	Z+7, r19	; 0x07
 a00:	26 83       	std	Z+6, r18	; 0x06
 a02:	14 c0       	rjmp	.+40     	; 0xa2c <fputc+0x6e>
 a04:	8b 01       	movw	r16, r22
 a06:	ec 01       	movw	r28, r24
 a08:	fb 01       	movw	r30, r22
 a0a:	00 84       	ldd	r0, Z+8	; 0x08
 a0c:	f1 85       	ldd	r31, Z+9	; 0x09
 a0e:	e0 2d       	mov	r30, r0
 a10:	09 95       	icall
 a12:	89 2b       	or	r24, r25
 a14:	e1 f6       	brne	.-72     	; 0x9ce <fputc+0x10>
 a16:	d8 01       	movw	r26, r16
 a18:	16 96       	adiw	r26, 0x06	; 6
 a1a:	8d 91       	ld	r24, X+
 a1c:	9c 91       	ld	r25, X
 a1e:	17 97       	sbiw	r26, 0x07	; 7
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	17 96       	adiw	r26, 0x07	; 7
 a24:	9c 93       	st	X, r25
 a26:	8e 93       	st	-X, r24
 a28:	16 97       	sbiw	r26, 0x06	; 6
 a2a:	ce 01       	movw	r24, r28
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	08 95       	ret

00000a36 <__ultoa_invert>:
 a36:	fa 01       	movw	r30, r20
 a38:	aa 27       	eor	r26, r26
 a3a:	28 30       	cpi	r18, 0x08	; 8
 a3c:	51 f1       	breq	.+84     	; 0xa92 <__ultoa_invert+0x5c>
 a3e:	20 31       	cpi	r18, 0x10	; 16
 a40:	81 f1       	breq	.+96     	; 0xaa2 <__ultoa_invert+0x6c>
 a42:	e8 94       	clt
 a44:	6f 93       	push	r22
 a46:	6e 7f       	andi	r22, 0xFE	; 254
 a48:	6e 5f       	subi	r22, 0xFE	; 254
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	af 4f       	sbci	r26, 0xFF	; 255
 a52:	b1 e0       	ldi	r27, 0x01	; 1
 a54:	3e d0       	rcall	.+124    	; 0xad2 <__ultoa_invert+0x9c>
 a56:	b4 e0       	ldi	r27, 0x04	; 4
 a58:	3c d0       	rcall	.+120    	; 0xad2 <__ultoa_invert+0x9c>
 a5a:	67 0f       	add	r22, r23
 a5c:	78 1f       	adc	r23, r24
 a5e:	89 1f       	adc	r24, r25
 a60:	9a 1f       	adc	r25, r26
 a62:	a1 1d       	adc	r26, r1
 a64:	68 0f       	add	r22, r24
 a66:	79 1f       	adc	r23, r25
 a68:	8a 1f       	adc	r24, r26
 a6a:	91 1d       	adc	r25, r1
 a6c:	a1 1d       	adc	r26, r1
 a6e:	6a 0f       	add	r22, r26
 a70:	71 1d       	adc	r23, r1
 a72:	81 1d       	adc	r24, r1
 a74:	91 1d       	adc	r25, r1
 a76:	a1 1d       	adc	r26, r1
 a78:	20 d0       	rcall	.+64     	; 0xaba <__ultoa_invert+0x84>
 a7a:	09 f4       	brne	.+2      	; 0xa7e <__ultoa_invert+0x48>
 a7c:	68 94       	set
 a7e:	3f 91       	pop	r19
 a80:	2a e0       	ldi	r18, 0x0A	; 10
 a82:	26 9f       	mul	r18, r22
 a84:	11 24       	eor	r1, r1
 a86:	30 19       	sub	r19, r0
 a88:	30 5d       	subi	r19, 0xD0	; 208
 a8a:	31 93       	st	Z+, r19
 a8c:	de f6       	brtc	.-74     	; 0xa44 <__ultoa_invert+0xe>
 a8e:	cf 01       	movw	r24, r30
 a90:	08 95       	ret
 a92:	46 2f       	mov	r20, r22
 a94:	47 70       	andi	r20, 0x07	; 7
 a96:	40 5d       	subi	r20, 0xD0	; 208
 a98:	41 93       	st	Z+, r20
 a9a:	b3 e0       	ldi	r27, 0x03	; 3
 a9c:	0f d0       	rcall	.+30     	; 0xabc <__ultoa_invert+0x86>
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0x5c>
 aa0:	f6 cf       	rjmp	.-20     	; 0xa8e <__ultoa_invert+0x58>
 aa2:	46 2f       	mov	r20, r22
 aa4:	4f 70       	andi	r20, 0x0F	; 15
 aa6:	40 5d       	subi	r20, 0xD0	; 208
 aa8:	4a 33       	cpi	r20, 0x3A	; 58
 aaa:	18 f0       	brcs	.+6      	; 0xab2 <__ultoa_invert+0x7c>
 aac:	49 5d       	subi	r20, 0xD9	; 217
 aae:	31 fd       	sbrc	r19, 1
 ab0:	40 52       	subi	r20, 0x20	; 32
 ab2:	41 93       	st	Z+, r20
 ab4:	02 d0       	rcall	.+4      	; 0xaba <__ultoa_invert+0x84>
 ab6:	a9 f7       	brne	.-22     	; 0xaa2 <__ultoa_invert+0x6c>
 ab8:	ea cf       	rjmp	.-44     	; 0xa8e <__ultoa_invert+0x58>
 aba:	b4 e0       	ldi	r27, 0x04	; 4
 abc:	a6 95       	lsr	r26
 abe:	97 95       	ror	r25
 ac0:	87 95       	ror	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	ba 95       	dec	r27
 ac8:	c9 f7       	brne	.-14     	; 0xabc <__ultoa_invert+0x86>
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	61 05       	cpc	r22, r1
 ace:	71 05       	cpc	r23, r1
 ad0:	08 95       	ret
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	0a 2e       	mov	r0, r26
 ad8:	06 94       	lsr	r0
 ada:	57 95       	ror	r21
 adc:	47 95       	ror	r20
 ade:	37 95       	ror	r19
 ae0:	27 95       	ror	r18
 ae2:	ba 95       	dec	r27
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__ultoa_invert+0xa2>
 ae6:	62 0f       	add	r22, r18
 ae8:	73 1f       	adc	r23, r19
 aea:	84 1f       	adc	r24, r20
 aec:	95 1f       	adc	r25, r21
 aee:	a0 1d       	adc	r26, r0
 af0:	08 95       	ret

00000af2 <__prologue_saves__>:
 af2:	2f 92       	push	r2
 af4:	3f 92       	push	r3
 af6:	4f 92       	push	r4
 af8:	5f 92       	push	r5
 afa:	6f 92       	push	r6
 afc:	7f 92       	push	r7
 afe:	8f 92       	push	r8
 b00:	9f 92       	push	r9
 b02:	af 92       	push	r10
 b04:	bf 92       	push	r11
 b06:	cf 92       	push	r12
 b08:	df 92       	push	r13
 b0a:	ef 92       	push	r14
 b0c:	ff 92       	push	r15
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62
 b1a:	ca 1b       	sub	r28, r26
 b1c:	db 0b       	sbc	r29, r27
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	09 94       	ijmp

00000b2a <__epilogue_restores__>:
 b2a:	2a 88       	ldd	r2, Y+18	; 0x12
 b2c:	39 88       	ldd	r3, Y+17	; 0x11
 b2e:	48 88       	ldd	r4, Y+16	; 0x10
 b30:	5f 84       	ldd	r5, Y+15	; 0x0f
 b32:	6e 84       	ldd	r6, Y+14	; 0x0e
 b34:	7d 84       	ldd	r7, Y+13	; 0x0d
 b36:	8c 84       	ldd	r8, Y+12	; 0x0c
 b38:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b3c:	b9 84       	ldd	r11, Y+9	; 0x09
 b3e:	c8 84       	ldd	r12, Y+8	; 0x08
 b40:	df 80       	ldd	r13, Y+7	; 0x07
 b42:	ee 80       	ldd	r14, Y+6	; 0x06
 b44:	fd 80       	ldd	r15, Y+5	; 0x05
 b46:	0c 81       	ldd	r16, Y+4	; 0x04
 b48:	1b 81       	ldd	r17, Y+3	; 0x03
 b4a:	aa 81       	ldd	r26, Y+2	; 0x02
 b4c:	b9 81       	ldd	r27, Y+1	; 0x01
 b4e:	ce 0f       	add	r28, r30
 b50:	d1 1d       	adc	r29, r1
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	ed 01       	movw	r28, r26
 b5e:	08 95       	ret

00000b60 <_exit>:
 b60:	f8 94       	cli

00000b62 <__stop_program>:
 b62:	ff cf       	rjmp	.-2      	; 0xb62 <__stop_program>

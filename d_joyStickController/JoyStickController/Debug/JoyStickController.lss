
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000b70  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800126  00800126  00000c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba4  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f7  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa5  00000000  00000000  00003c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000046b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b06  00000000  00000000  00004a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5d  00000000  00000000  0000556e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000064cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	dd 01       	movw	r26, r26

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e7       	ldi	r30, 0x70	; 112
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 32       	cpi	r26, 0x26	; 38
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a6 e2       	ldi	r26, 0x26	; 38
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a0 33       	cpi	r26, 0x30	; 48
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 c6 02 	call	0x58c	; 0x58c <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  b6:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN11ADConverterC1Ev>:
#include "ADC.h"


ADConverter::ADConverter()
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <_ZN11ADConverter4ReadEh>:
}
uint16_t ADConverter::Read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	6f 70       	andi	r22, 0x0F	; 15
  de:	68 2b       	or	r22, r24
  e0:	60 83       	st	Z, r22
	
	ADCSRA |= (1 << ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
  ec:	80 81       	ld	r24, Z
  ee:	86 fd       	sbrc	r24, 6
  f0:	fd cf       	rjmp	.-6      	; 0xec <_ZN11ADConverter4ReadEh+0x18>
	return ADC;
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fa:	08 95       	ret

000000fc <_ZN13BaseDataClass8ContinueEv>:
} //BaseDataClass

bool BaseDataClass::Continue()
{
	return true;
}
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret

00000100 <_ZN13BaseDataClass7GetDataEPc>:

void BaseDataClass::GetData(char* string)
{
 100:	08 95       	ret

00000102 <_ZN13BaseDataClassC1Ev>:


#include "BaseDataClass.h"

// default constructor
BaseDataClass::BaseDataClass()
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	fc 01       	movw	r30, r24
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <_ZN21DoubleClickDataToSend8ContinueEv>:
	strcpy(string, "A");
}

bool DoubleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 10e:	89 b1       	in	r24, 0x09	; 9
 110:	82 fb       	bst	r24, 2
 112:	88 27       	eor	r24, r24
 114:	80 f9       	bld	r24, 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	89 27       	eor	r24, r25
 11a:	08 95       	ret

0000011c <_ZN21DoubleClickDataToSend7GetDataEPc>:
{
} //DoubleClickDataToSend

void DoubleClickDataToSend::GetData(char* string)
{
	strcpy(string, "A");
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fb 01       	movw	r30, r22
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <_ZN21DoubleClickDataToSendC1Ev>:
#include <string.h>
#include <avr/io.h>


// default constructor
DoubleClickDataToSend::DoubleClickDataToSend()
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	88 83       	st	Y, r24
{
} //DoubleClickDataToSend
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_ZN18PositionDataToSend8ContinueEv>:
} //PositionDataToSend

bool PositionDataToSend::Continue()
{
	return true;
}
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret

00000144 <_ZN18PositionDataToSend7GetDataEPc>:

void PositionDataToSend::GetData(char* string)
{
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	f6 2e       	mov	r15, r22
 15c:	e7 2e       	mov	r14, r23
	uint16_t xPos = voltageReader.Read(0);//ADC channel 0
 15e:	8c 01       	movw	r16, r24
 160:	0e 5f       	subi	r16, 0xFE	; 254
 162:	1f 4f       	sbci	r17, 0xFF	; 255
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	c8 01       	movw	r24, r16
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 16c:	6c 01       	movw	r12, r24
	uint16_t yPos = voltageReader.Read(1);//ADC channel 1
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	c8 01       	movw	r24, r16
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 176:	8c 01       	movw	r16, r24
	
	PositionTranslator t;
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN18PositionTranslatorC1Ev>
	
	sprintf(string, "%d", t.Translate(xPos, yPos));
 180:	a8 01       	movw	r20, r16
 182:	b6 01       	movw	r22, r12
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_ZN18PositionTranslator9TranslateEjj>
 18c:	1f 92       	push	r1
 18e:	8f 93       	push	r24
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	9f 93       	push	r25
 196:	8f 93       	push	r24
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0e 94 cc 02 	call	0x598	; 0x598 <sprintf>
}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <_ZN18PositionDataToSendC1Ev>:
#include "../PositionTranslator.h"
#include <string.h>
#include <stdio.h>

// default constructor
PositionDataToSend::PositionDataToSend()
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	d8 2f       	mov	r29, r24
 1c6:	c9 2f       	mov	r28, r25
 1c8:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 1cc:	8d 2f       	mov	r24, r29
 1ce:	9c 2f       	mov	r25, r28
 1d0:	27 e1       	ldi	r18, 0x17	; 23
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	fc 01       	movw	r30, r24
 1d6:	21 93       	st	Z+, r18
 1d8:	31 93       	st	Z+, r19
 1da:	cf 01       	movw	r24, r30
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN11ADConverterC1Ev>
{
} //PositionDataToSend
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <_ZN21SingleClickDataToSend8ContinueEv>:
{
} //SingleClickDataToSend

bool SingleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 1e6:	89 b1       	in	r24, 0x09	; 9
 1e8:	82 fb       	bst	r24, 2
 1ea:	88 27       	eor	r24, r24
 1ec:	80 f9       	bld	r24, 0
}
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	89 27       	eor	r24, r25
 1f2:	08 95       	ret

000001f4 <_ZN21SingleClickDataToSend7GetDataEPc>:
void SingleClickDataToSend::GetData(char* string)
{
	strcpy(string, "9");
 1f4:	89 e3       	ldi	r24, 0x39	; 57
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fb 01       	movw	r30, r22
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <_ZN21SingleClickDataToSendC1Ev>:
#include "SingleClickDataToSend.h"
#include <string.h>
#include <avr/io.h>

// default constructor
SingleClickDataToSend::SingleClickDataToSend()
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	99 83       	std	Y+1, r25	; 0x01
 210:	88 83       	st	Y, r24
{
} //SingleClickDataToSend
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_Z11resetTimer1v>:


// External interrupt 0/PORTD Pin 2
void resetTimer1()
{
	TCNT1H = TIMER1_HIGH_VALUE; //Reset counter
 218:	8b e0       	ldi	r24, 0x0B	; 11
 21a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = TIMER1_LOW_VALUE;
 21e:	8c ed       	ldi	r24, 0xDC	; 220
 220:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 224:	08 95       	ret

00000226 <__vector_1>:
}

bool doubleClickFlag = false;//Flag used for double click timing, not an indicator of double click
ISR(INT0_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	if(doubleClickFlag) 
 248:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 24c:	88 23       	and	r24, r24
 24e:	81 f0       	breq	.+32     	; 0x270 <__vector_1+0x4a>
	{
		//Timer interrupted, double click
		TCCR1B &= 0b11111000; //Stop timer
 250:	e1 e8       	ldi	r30, 0x81	; 129
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 83       	st	Z, r24
		resetTimer1();
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
		doubleClickFlag = false;
 25e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		dataController = &doubleClickClass;
 262:	89 e2       	ldi	r24, 0x29	; 41
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <dataController+0x1>
 26a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dataController>
 26e:	06 c0       	rjmp	.+12     	; 0x27c <__vector_1+0x56>
	}
	else
	{
		//Start the timer to wait for double click
		doubleClickFlag = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		TCCR1B = (1<<CS10) | (1<<CS11);;  // Timer mode with 64 prescaler
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_13>:

// Timer 1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	//Timer timed out, single click
	TCCR1B &= 0b11111000; //Stop timer
 2c0:	e1 e8       	ldi	r30, 0x81	; 129
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	88 7f       	andi	r24, 0xF8	; 248
 2c8:	80 83       	st	Z, r24
	resetTimer1();
 2ca:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
	doubleClickFlag = false;//No double click
 2ce:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	dataController = &singleClickClass;
 2d2:	87 e2       	ldi	r24, 0x27	; 39
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <dataController+0x1>
 2da:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dataController>
	SendString(UART0, "1\r");
 2de:	63 e2       	ldi	r22, 0x23	; 35
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	80 ec       	ldi	r24, 0xC0	; 192
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z10SendStringjPKc>
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <main>:


int main(void)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	64 97       	sbiw	r28, 0x14	; 20
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
	InitUART(UART0, 9600, 8, 0);
 320:	00 e0       	ldi	r16, 0x00	; 0
 322:	28 e0       	ldi	r18, 0x08	; 8
 324:	40 e8       	ldi	r20, 0x80	; 128
 326:	55 e2       	ldi	r21, 0x25	; 37
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 ec       	ldi	r24, 0xC0	; 192
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 35 02 	call	0x46a	; 0x46a <_Z8InitUARTjmhc>
	EICRA |= 0b00000010; //Falling edge of PORTD pin 2
 334:	e9 e6       	ldi	r30, 0x69	; 105
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	80 83       	st	Z, r24
	EIMSK |= 1; //Enable INT0 - PORTD pin 2	
 33e:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRD = 0;
 340:	1a b8       	out	0x0a, r1	; 10
	DDRD = (0x01 << 4);
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	8a b9       	out	0x0a, r24	; 10
	resetTimer1();
 346:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>

	TCCR1A = 0x00;
 34a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 354:	78 94       	sei

	
	char buffer[20];
	while (1)
	{
		dataController = &postionClass;
 356:	0b e2       	ldi	r16, 0x2B	; 43
 358:	11 e0       	ldi	r17, 0x01	; 1
 35a:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <dataController+0x1>
 35e:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <dataController>
		while(dataController->Continue())
 362:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dataController>
 366:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dataController+0x1>
 36a:	dc 01       	movw	r26, r24
 36c:	ed 91       	ld	r30, X+
 36e:	fc 91       	ld	r31, X
 370:	01 90       	ld	r0, Z+
 372:	f0 81       	ld	r31, Z
 374:	e0 2d       	mov	r30, r0
 376:	09 95       	icall
 378:	88 23       	and	r24, r24
 37a:	79 f3       	breq	.-34     	; 0x35a <main+0x4e>
		{
			dataController->GetData(buffer);
 37c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dataController>
 380:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <dataController+0x1>
 384:	dc 01       	movw	r26, r24
 386:	ed 91       	ld	r30, X+
 388:	fc 91       	ld	r31, X
 38a:	02 80       	ldd	r0, Z+2	; 0x02
 38c:	f3 81       	ldd	r31, Z+3	; 0x03
 38e:	e0 2d       	mov	r30, r0
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	09 95       	icall
			SendString(UART0, buffer);
 398:	be 01       	movw	r22, r28
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	80 ec       	ldi	r24, 0xC0	; 192
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z10SendStringjPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	bf ef       	ldi	r27, 0xFF	; 255
 3a8:	20 e7       	ldi	r18, 0x70	; 112
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	b1 50       	subi	r27, 0x01	; 1
 3ae:	20 40       	sbci	r18, 0x00	; 0
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0xa0>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0xaa>
 3b6:	00 00       	nop
 3b8:	d4 cf       	rjmp	.-88     	; 0x362 <main+0x56>

000003ba <_GLOBAL__sub_I_dataController>:
#define TIMER1_HIGH_VALUE 0b00001011
#define TIMER1_LOW_VALUE  0b11011100 //15540 in total, 250 ms to overflow

//Data classes for switching
BaseDataClass *dataController;
PositionDataToSend postionClass;
 3ba:	8b e2       	ldi	r24, 0x2B	; 43
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN18PositionDataToSendC1Ev>
DoubleClickDataToSend doubleClickClass;
 3c2:	89 e2       	ldi	r24, 0x29	; 41
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 94 00 	call	0x128	; 0x128 <_ZN21DoubleClickDataToSendC1Ev>
SingleClickDataToSend singleClickClass;
 3ca:	87 e2       	ldi	r24, 0x27	; 39
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 00 01 	call	0x200	; 0x200 <_ZN21SingleClickDataToSendC1Ev>
 3d2:	08 95       	ret

000003d4 <_ZN18PositionTranslatorC1Ev>:

#include "PositionTranslator.h"
#include <avr/io.h>

// default constructor
PositionTranslator::PositionTranslator()
 3d4:	08 95       	ret

000003d6 <_ZN18PositionTranslator9TranslateEjj>:
{
} //PositionTranslator

uint8_t PositionTranslator::Translate(uint16_t xPos, uint16_t yPos)
{
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	ca 01       	movw	r24, r20
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	48 0f       	add	r20, r24
 3e6:	59 1f       	adc	r21, r25
 3e8:	46 0f       	add	r20, r22
 3ea:	57 1f       	adc	r21, r23
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 3ec:	ca 01       	movw	r24, r20
 3ee:	8a 5b       	subi	r24, 0xBA	; 186
 3f0:	93 40       	sbci	r25, 0x03	; 3
 3f2:	85 36       	cpi	r24, 0x65	; 101
 3f4:	91 05       	cpc	r25, r1
 3f6:	80 f4       	brcc	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
	
	if(InRange(mappedProduct, 0, 400))
		return 0;
	else if (InRange(mappedProduct,954, 1054))
		return 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
	else if(InRange(mappedProduct, 1946, 2150))
		return 2;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	08 95       	ret
	else if(InRange(mappedProduct, 2385, 2636))
		return 3;
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	08 95       	ret
	else if(InRange(mappedProduct, 3338, 3690))
		return 4;
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	08 95       	ret
	else if(InRange(mappedProduct, 4330, 4786))
		return 5;
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	08 95       	ret
	else if(InRange(mappedProduct, 4864, 5376))
		return 6;
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	08 95       	ret
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
 410:	87 e0       	ldi	r24, 0x07	; 7
 412:	08 95       	ret
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	08 95       	ret
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 418:	ca 01       	movw	r24, r20
 41a:	8a 59       	subi	r24, 0x9A	; 154
 41c:	97 40       	sbci	r25, 0x07	; 7
 41e:	8d 3c       	cpi	r24, 0xCD	; 205
 420:	91 05       	cpc	r25, r1
 422:	60 f3       	brcs	.-40     	; 0x3fc <_ZN18PositionTranslator9TranslateEjj+0x26>
 424:	87 5b       	subi	r24, 0xB7	; 183
 426:	91 40       	sbci	r25, 0x01	; 1
 428:	8c 3f       	cpi	r24, 0xFC	; 252
 42a:	91 05       	cpc	r25, r1
 42c:	48 f3       	brcs	.-46     	; 0x400 <__LOCK_REGION_LENGTH__>
 42e:	89 5b       	subi	r24, 0xB9	; 185
 430:	93 40       	sbci	r25, 0x03	; 3
 432:	81 36       	cpi	r24, 0x61	; 97
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	92 07       	cpc	r25, r18
 438:	28 f3       	brcs	.-54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 43a:	80 5e       	subi	r24, 0xE0	; 224
 43c:	93 40       	sbci	r25, 0x03	; 3
 43e:	89 3c       	cpi	r24, 0xC9	; 201
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	92 07       	cpc	r25, r18
 444:	08 f3       	brcs	.-62     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 446:	86 51       	subi	r24, 0x16	; 22
 448:	92 40       	sbci	r25, 0x02	; 2
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	92 07       	cpc	r25, r18
 450:	e8 f2       	brcs	.-70     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 452:	8a 5b       	subi	r24, 0xBA	; 186
 454:	93 40       	sbci	r25, 0x03	; 3
 456:	85 36       	cpi	r24, 0x65	; 101
 458:	92 40       	sbci	r25, 0x02	; 2
 45a:	d0 f2       	brcs	.-76     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 45c:	4a 59       	subi	r20, 0x9A	; 154
 45e:	5a 41       	sbci	r21, 0x1A	; 26
 460:	4d 3c       	cpi	r20, 0xCD	; 205
 462:	52 40       	sbci	r21, 0x02	; 2
 464:	b8 f2       	brcs	.-82     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
	else
		return 4;
 466:	84 e0       	ldi	r24, 0x04	; 4
	
}
 468:	08 95       	ret

0000046a <_Z8InitUARTjmhc>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 46a:	0f 93       	push	r16
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
 472:	db 01       	movw	r26, r22
 474:	ca 01       	movw	r24, r20
 476:	8c 52       	subi	r24, 0x2C	; 44
 478:	91 40       	sbci	r25, 0x01	; 1
 47a:	a1 09       	sbc	r26, r1
 47c:	b1 09       	sbc	r27, r1
 47e:	85 3d       	cpi	r24, 0xD5	; 213
 480:	90 4c       	sbci	r25, 0xC0	; 192
 482:	a1 40       	sbci	r26, 0x01	; 1
 484:	b1 05       	cpc	r27, r1
 486:	08 f0       	brcs	.+2      	; 0x48a <_Z8InitUARTjmhc+0x20>
 488:	40 c0       	rjmp	.+128    	; 0x50a <_Z8InitUARTjmhc+0xa0>
 48a:	25 50       	subi	r18, 0x05	; 5
 48c:	24 30       	cpi	r18, 0x04	; 4
 48e:	e8 f5       	brcc	.+122    	; 0x50a <_Z8InitUARTjmhc+0xa0>
 490:	80 e2       	ldi	r24, 0x20	; 32
 492:	88 83       	st	Y, r24
 494:	88 e1       	ldi	r24, 0x18	; 24
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	22 0f       	add	r18, r18
 49a:	2a 83       	std	Y+2, r18	; 0x02
 49c:	05 34       	cpi	r16, 0x45	; 69
 49e:	21 f4       	brne	.+8      	; 0x4a8 <_Z8InitUARTjmhc+0x3e>
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	80 62       	ori	r24, 0x20	; 32
 4a4:	8a 83       	std	Y+2, r24	; 0x02
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <_Z8InitUARTjmhc+0x48>
 4a8:	0f 34       	cpi	r16, 0x4F	; 79
 4aa:	19 f4       	brne	.+6      	; 0x4b2 <_Z8InitUARTjmhc+0x48>
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	80 63       	ori	r24, 0x30	; 48
 4b0:	8a 83       	std	Y+2, r24	; 0x02
 4b2:	db 01       	movw	r26, r22
 4b4:	ca 01       	movw	r24, r20
 4b6:	80 58       	subi	r24, 0x80	; 128
 4b8:	9b 47       	sbci	r25, 0x7B	; 123
 4ba:	a1 4e       	sbci	r26, 0xE1	; 225
 4bc:	bf 4f       	sbci	r27, 0xFF	; 255
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	aa 1f       	adc	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	44 0f       	add	r20, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	66 1f       	adc	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	9a 01       	movw	r18, r20
 4e8:	ab 01       	movw	r20, r22
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	44 1f       	adc	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	44 1f       	adc	r20, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	bc 01       	movw	r22, r24
 4fc:	cd 01       	movw	r24, r26
 4fe:	0e 94 a4 02 	call	0x548	; 0x548 <__udivmodsi4>
 502:	21 50       	subi	r18, 0x01	; 1
 504:	31 09       	sbc	r19, r1
 506:	3d 83       	std	Y+5, r19	; 0x05
 508:	2c 83       	std	Y+4, r18	; 0x04
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <_Z8SendCharjc>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 512:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 514:	90 81       	ld	r25, Z
 516:	95 ff       	sbrs	r25, 5
 518:	fd cf       	rjmp	.-6      	; 0x514 <_Z8SendCharjc+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 51a:	66 83       	std	Z+6, r22	; 0x06
 51c:	08 95       	ret

0000051e <_Z10SendStringjPKc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 528:	68 81       	ld	r22, Y
 52a:	66 23       	and	r22, r22
 52c:	41 f0       	breq	.+16     	; 0x53e <_Z10SendStringjPKc+0x20>
 52e:	8c 01       	movw	r16, r24
 530:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 532:	c8 01       	movw	r24, r16
 534:	0e 94 89 02 	call	0x512	; 0x512 <_Z8SendCharjc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, const char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 538:	69 91       	ld	r22, Y+
 53a:	61 11       	cpse	r22, r1
 53c:	fa cf       	rjmp	.-12     	; 0x532 <_Z10SendStringjPKc+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <__udivmodsi4>:
 548:	a1 e2       	ldi	r26, 0x21	; 33
 54a:	1a 2e       	mov	r1, r26
 54c:	aa 1b       	sub	r26, r26
 54e:	bb 1b       	sub	r27, r27
 550:	fd 01       	movw	r30, r26
 552:	0d c0       	rjmp	.+26     	; 0x56e <__udivmodsi4_ep>

00000554 <__udivmodsi4_loop>:
 554:	aa 1f       	adc	r26, r26
 556:	bb 1f       	adc	r27, r27
 558:	ee 1f       	adc	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	a2 17       	cp	r26, r18
 55e:	b3 07       	cpc	r27, r19
 560:	e4 07       	cpc	r30, r20
 562:	f5 07       	cpc	r31, r21
 564:	20 f0       	brcs	.+8      	; 0x56e <__udivmodsi4_ep>
 566:	a2 1b       	sub	r26, r18
 568:	b3 0b       	sbc	r27, r19
 56a:	e4 0b       	sbc	r30, r20
 56c:	f5 0b       	sbc	r31, r21

0000056e <__udivmodsi4_ep>:
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	1a 94       	dec	r1
 578:	69 f7       	brne	.-38     	; 0x554 <__udivmodsi4_loop>
 57a:	60 95       	com	r22
 57c:	70 95       	com	r23
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	9b 01       	movw	r18, r22
 584:	ac 01       	movw	r20, r24
 586:	bd 01       	movw	r22, r26
 588:	cf 01       	movw	r24, r30
 58a:	08 95       	ret

0000058c <__tablejump2__>:
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	05 90       	lpm	r0, Z+
 592:	f4 91       	lpm	r31, Z
 594:	e0 2d       	mov	r30, r0
 596:	09 94       	ijmp

00000598 <sprintf>:
 598:	ae e0       	ldi	r26, 0x0E	; 14
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e2 ed       	ldi	r30, 0xD2	; 210
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__prologue_saves__+0x1c>
 5a4:	0d 89       	ldd	r16, Y+21	; 0x15
 5a6:	1e 89       	ldd	r17, Y+22	; 0x16
 5a8:	86 e0       	ldi	r24, 0x06	; 6
 5aa:	8c 83       	std	Y+4, r24	; 0x04
 5ac:	1a 83       	std	Y+2, r17	; 0x02
 5ae:	09 83       	std	Y+1, r16	; 0x01
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	9f e7       	ldi	r25, 0x7F	; 127
 5b4:	9e 83       	std	Y+6, r25	; 0x06
 5b6:	8d 83       	std	Y+5, r24	; 0x05
 5b8:	ae 01       	movw	r20, r28
 5ba:	47 5e       	subi	r20, 0xE7	; 231
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	6f 89       	ldd	r22, Y+23	; 0x17
 5c0:	78 8d       	ldd	r23, Y+24	; 0x18
 5c2:	ce 01       	movw	r24, r28
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <vfprintf>
 5ca:	ef 81       	ldd	r30, Y+7	; 0x07
 5cc:	f8 85       	ldd	r31, Y+8	; 0x08
 5ce:	e0 0f       	add	r30, r16
 5d0:	f1 1f       	adc	r31, r17
 5d2:	10 82       	st	Z, r1
 5d4:	2e 96       	adiw	r28, 0x0e	; 14
 5d6:	e4 e0       	ldi	r30, 0x04	; 4
 5d8:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__epilogue_restores__+0x1c>

000005dc <vfprintf>:
 5dc:	ab e0       	ldi	r26, 0x0B	; 11
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e4 ef       	ldi	r30, 0xF4	; 244
 5e2:	f2 e0       	ldi	r31, 0x02	; 2
 5e4:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__prologue_saves__>
 5e8:	6c 01       	movw	r12, r24
 5ea:	7b 01       	movw	r14, r22
 5ec:	8a 01       	movw	r16, r20
 5ee:	fc 01       	movw	r30, r24
 5f0:	17 82       	std	Z+7, r1	; 0x07
 5f2:	16 82       	std	Z+6, r1	; 0x06
 5f4:	83 81       	ldd	r24, Z+3	; 0x03
 5f6:	81 ff       	sbrs	r24, 1
 5f8:	cc c1       	rjmp	.+920    	; 0x992 <__stack+0x93>
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	3c 01       	movw	r6, r24
 600:	f6 01       	movw	r30, r12
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	f7 01       	movw	r30, r14
 606:	93 fd       	sbrc	r25, 3
 608:	85 91       	lpm	r24, Z+
 60a:	93 ff       	sbrs	r25, 3
 60c:	81 91       	ld	r24, Z+
 60e:	7f 01       	movw	r14, r30
 610:	88 23       	and	r24, r24
 612:	09 f4       	brne	.+2      	; 0x616 <vfprintf+0x3a>
 614:	ba c1       	rjmp	.+884    	; 0x98a <__stack+0x8b>
 616:	85 32       	cpi	r24, 0x25	; 37
 618:	39 f4       	brne	.+14     	; 0x628 <vfprintf+0x4c>
 61a:	93 fd       	sbrc	r25, 3
 61c:	85 91       	lpm	r24, Z+
 61e:	93 ff       	sbrs	r25, 3
 620:	81 91       	ld	r24, Z+
 622:	7f 01       	movw	r14, r30
 624:	85 32       	cpi	r24, 0x25	; 37
 626:	29 f4       	brne	.+10     	; 0x632 <vfprintf+0x56>
 628:	b6 01       	movw	r22, r12
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 630:	e7 cf       	rjmp	.-50     	; 0x600 <vfprintf+0x24>
 632:	91 2c       	mov	r9, r1
 634:	21 2c       	mov	r2, r1
 636:	31 2c       	mov	r3, r1
 638:	ff e1       	ldi	r31, 0x1F	; 31
 63a:	f3 15       	cp	r31, r3
 63c:	d8 f0       	brcs	.+54     	; 0x674 <vfprintf+0x98>
 63e:	8b 32       	cpi	r24, 0x2B	; 43
 640:	79 f0       	breq	.+30     	; 0x660 <vfprintf+0x84>
 642:	38 f4       	brcc	.+14     	; 0x652 <vfprintf+0x76>
 644:	80 32       	cpi	r24, 0x20	; 32
 646:	79 f0       	breq	.+30     	; 0x666 <vfprintf+0x8a>
 648:	83 32       	cpi	r24, 0x23	; 35
 64a:	a1 f4       	brne	.+40     	; 0x674 <vfprintf+0x98>
 64c:	23 2d       	mov	r18, r3
 64e:	20 61       	ori	r18, 0x10	; 16
 650:	1d c0       	rjmp	.+58     	; 0x68c <vfprintf+0xb0>
 652:	8d 32       	cpi	r24, 0x2D	; 45
 654:	61 f0       	breq	.+24     	; 0x66e <vfprintf+0x92>
 656:	80 33       	cpi	r24, 0x30	; 48
 658:	69 f4       	brne	.+26     	; 0x674 <vfprintf+0x98>
 65a:	23 2d       	mov	r18, r3
 65c:	21 60       	ori	r18, 0x01	; 1
 65e:	16 c0       	rjmp	.+44     	; 0x68c <vfprintf+0xb0>
 660:	83 2d       	mov	r24, r3
 662:	82 60       	ori	r24, 0x02	; 2
 664:	38 2e       	mov	r3, r24
 666:	e3 2d       	mov	r30, r3
 668:	e4 60       	ori	r30, 0x04	; 4
 66a:	3e 2e       	mov	r3, r30
 66c:	2a c0       	rjmp	.+84     	; 0x6c2 <vfprintf+0xe6>
 66e:	f3 2d       	mov	r31, r3
 670:	f8 60       	ori	r31, 0x08	; 8
 672:	1d c0       	rjmp	.+58     	; 0x6ae <vfprintf+0xd2>
 674:	37 fc       	sbrc	r3, 7
 676:	2d c0       	rjmp	.+90     	; 0x6d2 <vfprintf+0xf6>
 678:	20 ed       	ldi	r18, 0xD0	; 208
 67a:	28 0f       	add	r18, r24
 67c:	2a 30       	cpi	r18, 0x0A	; 10
 67e:	40 f0       	brcs	.+16     	; 0x690 <vfprintf+0xb4>
 680:	8e 32       	cpi	r24, 0x2E	; 46
 682:	b9 f4       	brne	.+46     	; 0x6b2 <vfprintf+0xd6>
 684:	36 fc       	sbrc	r3, 6
 686:	81 c1       	rjmp	.+770    	; 0x98a <__stack+0x8b>
 688:	23 2d       	mov	r18, r3
 68a:	20 64       	ori	r18, 0x40	; 64
 68c:	32 2e       	mov	r3, r18
 68e:	19 c0       	rjmp	.+50     	; 0x6c2 <vfprintf+0xe6>
 690:	36 fe       	sbrs	r3, 6
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <vfprintf+0xc4>
 694:	8a e0       	ldi	r24, 0x0A	; 10
 696:	98 9e       	mul	r9, r24
 698:	20 0d       	add	r18, r0
 69a:	11 24       	eor	r1, r1
 69c:	92 2e       	mov	r9, r18
 69e:	11 c0       	rjmp	.+34     	; 0x6c2 <vfprintf+0xe6>
 6a0:	ea e0       	ldi	r30, 0x0A	; 10
 6a2:	2e 9e       	mul	r2, r30
 6a4:	20 0d       	add	r18, r0
 6a6:	11 24       	eor	r1, r1
 6a8:	22 2e       	mov	r2, r18
 6aa:	f3 2d       	mov	r31, r3
 6ac:	f0 62       	ori	r31, 0x20	; 32
 6ae:	3f 2e       	mov	r3, r31
 6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <vfprintf+0xe6>
 6b2:	8c 36       	cpi	r24, 0x6C	; 108
 6b4:	21 f4       	brne	.+8      	; 0x6be <vfprintf+0xe2>
 6b6:	83 2d       	mov	r24, r3
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	38 2e       	mov	r3, r24
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0xe6>
 6be:	88 36       	cpi	r24, 0x68	; 104
 6c0:	41 f4       	brne	.+16     	; 0x6d2 <vfprintf+0xf6>
 6c2:	f7 01       	movw	r30, r14
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	7f 01       	movw	r14, r30
 6ce:	81 11       	cpse	r24, r1
 6d0:	b3 cf       	rjmp	.-154    	; 0x638 <vfprintf+0x5c>
 6d2:	98 2f       	mov	r25, r24
 6d4:	9f 7d       	andi	r25, 0xDF	; 223
 6d6:	95 54       	subi	r25, 0x45	; 69
 6d8:	93 30       	cpi	r25, 0x03	; 3
 6da:	28 f4       	brcc	.+10     	; 0x6e6 <vfprintf+0x10a>
 6dc:	0c 5f       	subi	r16, 0xFC	; 252
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	9f e3       	ldi	r25, 0x3F	; 63
 6e2:	99 83       	std	Y+1, r25	; 0x01
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <vfprintf+0x124>
 6e6:	83 36       	cpi	r24, 0x63	; 99
 6e8:	31 f0       	breq	.+12     	; 0x6f6 <vfprintf+0x11a>
 6ea:	83 37       	cpi	r24, 0x73	; 115
 6ec:	71 f0       	breq	.+28     	; 0x70a <vfprintf+0x12e>
 6ee:	83 35       	cpi	r24, 0x53	; 83
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <vfprintf+0x118>
 6f2:	59 c0       	rjmp	.+178    	; 0x7a6 <vfprintf+0x1ca>
 6f4:	21 c0       	rjmp	.+66     	; 0x738 <vfprintf+0x15c>
 6f6:	f8 01       	movw	r30, r16
 6f8:	80 81       	ld	r24, Z
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	0e 5f       	subi	r16, 0xFE	; 254
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	88 24       	eor	r8, r8
 702:	83 94       	inc	r8
 704:	91 2c       	mov	r9, r1
 706:	53 01       	movw	r10, r6
 708:	13 c0       	rjmp	.+38     	; 0x730 <vfprintf+0x154>
 70a:	28 01       	movw	r4, r16
 70c:	f2 e0       	ldi	r31, 0x02	; 2
 70e:	4f 0e       	add	r4, r31
 710:	51 1c       	adc	r5, r1
 712:	f8 01       	movw	r30, r16
 714:	a0 80       	ld	r10, Z
 716:	b1 80       	ldd	r11, Z+1	; 0x01
 718:	36 fe       	sbrs	r3, 6
 71a:	03 c0       	rjmp	.+6      	; 0x722 <vfprintf+0x146>
 71c:	69 2d       	mov	r22, r9
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <vfprintf+0x14a>
 722:	6f ef       	ldi	r22, 0xFF	; 255
 724:	7f ef       	ldi	r23, 0xFF	; 255
 726:	c5 01       	movw	r24, r10
 728:	0e 94 da 04 	call	0x9b4	; 0x9b4 <strnlen>
 72c:	4c 01       	movw	r8, r24
 72e:	82 01       	movw	r16, r4
 730:	f3 2d       	mov	r31, r3
 732:	ff 77       	andi	r31, 0x7F	; 127
 734:	3f 2e       	mov	r3, r31
 736:	16 c0       	rjmp	.+44     	; 0x764 <vfprintf+0x188>
 738:	28 01       	movw	r4, r16
 73a:	22 e0       	ldi	r18, 0x02	; 2
 73c:	42 0e       	add	r4, r18
 73e:	51 1c       	adc	r5, r1
 740:	f8 01       	movw	r30, r16
 742:	a0 80       	ld	r10, Z
 744:	b1 80       	ldd	r11, Z+1	; 0x01
 746:	36 fe       	sbrs	r3, 6
 748:	03 c0       	rjmp	.+6      	; 0x750 <vfprintf+0x174>
 74a:	69 2d       	mov	r22, r9
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x178>
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	7f ef       	ldi	r23, 0xFF	; 255
 754:	c5 01       	movw	r24, r10
 756:	0e 94 cf 04 	call	0x99e	; 0x99e <strnlen_P>
 75a:	4c 01       	movw	r8, r24
 75c:	f3 2d       	mov	r31, r3
 75e:	f0 68       	ori	r31, 0x80	; 128
 760:	3f 2e       	mov	r3, r31
 762:	82 01       	movw	r16, r4
 764:	33 fc       	sbrc	r3, 3
 766:	1b c0       	rjmp	.+54     	; 0x79e <vfprintf+0x1c2>
 768:	82 2d       	mov	r24, r2
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	88 16       	cp	r8, r24
 76e:	99 06       	cpc	r9, r25
 770:	b0 f4       	brcc	.+44     	; 0x79e <vfprintf+0x1c2>
 772:	b6 01       	movw	r22, r12
 774:	80 e2       	ldi	r24, 0x20	; 32
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 77c:	2a 94       	dec	r2
 77e:	f4 cf       	rjmp	.-24     	; 0x768 <vfprintf+0x18c>
 780:	f5 01       	movw	r30, r10
 782:	37 fc       	sbrc	r3, 7
 784:	85 91       	lpm	r24, Z+
 786:	37 fe       	sbrs	r3, 7
 788:	81 91       	ld	r24, Z+
 78a:	5f 01       	movw	r10, r30
 78c:	b6 01       	movw	r22, r12
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 794:	21 10       	cpse	r2, r1
 796:	2a 94       	dec	r2
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	82 1a       	sub	r8, r18
 79c:	91 08       	sbc	r9, r1
 79e:	81 14       	cp	r8, r1
 7a0:	91 04       	cpc	r9, r1
 7a2:	71 f7       	brne	.-36     	; 0x780 <vfprintf+0x1a4>
 7a4:	e8 c0       	rjmp	.+464    	; 0x976 <__stack+0x77>
 7a6:	84 36       	cpi	r24, 0x64	; 100
 7a8:	11 f0       	breq	.+4      	; 0x7ae <vfprintf+0x1d2>
 7aa:	89 36       	cpi	r24, 0x69	; 105
 7ac:	41 f5       	brne	.+80     	; 0x7fe <vfprintf+0x222>
 7ae:	f8 01       	movw	r30, r16
 7b0:	37 fe       	sbrs	r3, 7
 7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <vfprintf+0x1e6>
 7b4:	60 81       	ld	r22, Z
 7b6:	71 81       	ldd	r23, Z+1	; 0x01
 7b8:	82 81       	ldd	r24, Z+2	; 0x02
 7ba:	93 81       	ldd	r25, Z+3	; 0x03
 7bc:	0c 5f       	subi	r16, 0xFC	; 252
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <vfprintf+0x1f6>
 7c2:	60 81       	ld	r22, Z
 7c4:	71 81       	ldd	r23, Z+1	; 0x01
 7c6:	07 2e       	mov	r0, r23
 7c8:	00 0c       	add	r0, r0
 7ca:	88 0b       	sbc	r24, r24
 7cc:	99 0b       	sbc	r25, r25
 7ce:	0e 5f       	subi	r16, 0xFE	; 254
 7d0:	1f 4f       	sbci	r17, 0xFF	; 255
 7d2:	f3 2d       	mov	r31, r3
 7d4:	ff 76       	andi	r31, 0x6F	; 111
 7d6:	3f 2e       	mov	r3, r31
 7d8:	97 ff       	sbrs	r25, 7
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x212>
 7dc:	90 95       	com	r25
 7de:	80 95       	com	r24
 7e0:	70 95       	com	r23
 7e2:	61 95       	neg	r22
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	f0 68       	ori	r31, 0x80	; 128
 7ec:	3f 2e       	mov	r3, r31
 7ee:	2a e0       	ldi	r18, 0x0A	; 10
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	a3 01       	movw	r20, r6
 7f4:	0e 94 21 05 	call	0xa42	; 0xa42 <__ultoa_invert>
 7f8:	88 2e       	mov	r8, r24
 7fa:	86 18       	sub	r8, r6
 7fc:	45 c0       	rjmp	.+138    	; 0x888 <vfprintf+0x2ac>
 7fe:	85 37       	cpi	r24, 0x75	; 117
 800:	31 f4       	brne	.+12     	; 0x80e <vfprintf+0x232>
 802:	23 2d       	mov	r18, r3
 804:	2f 7e       	andi	r18, 0xEF	; 239
 806:	b2 2e       	mov	r11, r18
 808:	2a e0       	ldi	r18, 0x0A	; 10
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	25 c0       	rjmp	.+74     	; 0x858 <vfprintf+0x27c>
 80e:	93 2d       	mov	r25, r3
 810:	99 7f       	andi	r25, 0xF9	; 249
 812:	b9 2e       	mov	r11, r25
 814:	8f 36       	cpi	r24, 0x6F	; 111
 816:	c1 f0       	breq	.+48     	; 0x848 <vfprintf+0x26c>
 818:	18 f4       	brcc	.+6      	; 0x820 <vfprintf+0x244>
 81a:	88 35       	cpi	r24, 0x58	; 88
 81c:	79 f0       	breq	.+30     	; 0x83c <vfprintf+0x260>
 81e:	b5 c0       	rjmp	.+362    	; 0x98a <__stack+0x8b>
 820:	80 37       	cpi	r24, 0x70	; 112
 822:	19 f0       	breq	.+6      	; 0x82a <vfprintf+0x24e>
 824:	88 37       	cpi	r24, 0x78	; 120
 826:	21 f0       	breq	.+8      	; 0x830 <vfprintf+0x254>
 828:	b0 c0       	rjmp	.+352    	; 0x98a <__stack+0x8b>
 82a:	e9 2f       	mov	r30, r25
 82c:	e0 61       	ori	r30, 0x10	; 16
 82e:	be 2e       	mov	r11, r30
 830:	b4 fe       	sbrs	r11, 4
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x272>
 834:	fb 2d       	mov	r31, r11
 836:	f4 60       	ori	r31, 0x04	; 4
 838:	bf 2e       	mov	r11, r31
 83a:	09 c0       	rjmp	.+18     	; 0x84e <vfprintf+0x272>
 83c:	34 fe       	sbrs	r3, 4
 83e:	0a c0       	rjmp	.+20     	; 0x854 <vfprintf+0x278>
 840:	29 2f       	mov	r18, r25
 842:	26 60       	ori	r18, 0x06	; 6
 844:	b2 2e       	mov	r11, r18
 846:	06 c0       	rjmp	.+12     	; 0x854 <vfprintf+0x278>
 848:	28 e0       	ldi	r18, 0x08	; 8
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	05 c0       	rjmp	.+10     	; 0x858 <vfprintf+0x27c>
 84e:	20 e1       	ldi	r18, 0x10	; 16
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x27c>
 854:	20 e1       	ldi	r18, 0x10	; 16
 856:	32 e0       	ldi	r19, 0x02	; 2
 858:	f8 01       	movw	r30, r16
 85a:	b7 fe       	sbrs	r11, 7
 85c:	07 c0       	rjmp	.+14     	; 0x86c <vfprintf+0x290>
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	0c 5f       	subi	r16, 0xFC	; 252
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0x29c>
 86c:	60 81       	ld	r22, Z
 86e:	71 81       	ldd	r23, Z+1	; 0x01
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 5f       	subi	r16, 0xFE	; 254
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	a3 01       	movw	r20, r6
 87a:	0e 94 21 05 	call	0xa42	; 0xa42 <__ultoa_invert>
 87e:	88 2e       	mov	r8, r24
 880:	86 18       	sub	r8, r6
 882:	fb 2d       	mov	r31, r11
 884:	ff 77       	andi	r31, 0x7F	; 127
 886:	3f 2e       	mov	r3, r31
 888:	36 fe       	sbrs	r3, 6
 88a:	0d c0       	rjmp	.+26     	; 0x8a6 <vfprintf+0x2ca>
 88c:	23 2d       	mov	r18, r3
 88e:	2e 7f       	andi	r18, 0xFE	; 254
 890:	a2 2e       	mov	r10, r18
 892:	89 14       	cp	r8, r9
 894:	58 f4       	brcc	.+22     	; 0x8ac <vfprintf+0x2d0>
 896:	34 fe       	sbrs	r3, 4
 898:	0b c0       	rjmp	.+22     	; 0x8b0 <vfprintf+0x2d4>
 89a:	32 fc       	sbrc	r3, 2
 89c:	09 c0       	rjmp	.+18     	; 0x8b0 <vfprintf+0x2d4>
 89e:	83 2d       	mov	r24, r3
 8a0:	8e 7e       	andi	r24, 0xEE	; 238
 8a2:	a8 2e       	mov	r10, r24
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <vfprintf+0x2d4>
 8a6:	b8 2c       	mov	r11, r8
 8a8:	a3 2c       	mov	r10, r3
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <vfprintf+0x2d6>
 8ac:	b8 2c       	mov	r11, r8
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <vfprintf+0x2d6>
 8b0:	b9 2c       	mov	r11, r9
 8b2:	a4 fe       	sbrs	r10, 4
 8b4:	0f c0       	rjmp	.+30     	; 0x8d4 <vfprintf+0x2f8>
 8b6:	fe 01       	movw	r30, r28
 8b8:	e8 0d       	add	r30, r8
 8ba:	f1 1d       	adc	r31, r1
 8bc:	80 81       	ld	r24, Z
 8be:	80 33       	cpi	r24, 0x30	; 48
 8c0:	21 f4       	brne	.+8      	; 0x8ca <vfprintf+0x2ee>
 8c2:	9a 2d       	mov	r25, r10
 8c4:	99 7e       	andi	r25, 0xE9	; 233
 8c6:	a9 2e       	mov	r10, r25
 8c8:	09 c0       	rjmp	.+18     	; 0x8dc <vfprintf+0x300>
 8ca:	a2 fe       	sbrs	r10, 2
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <vfprintf+0x2fe>
 8ce:	b3 94       	inc	r11
 8d0:	b3 94       	inc	r11
 8d2:	04 c0       	rjmp	.+8      	; 0x8dc <vfprintf+0x300>
 8d4:	8a 2d       	mov	r24, r10
 8d6:	86 78       	andi	r24, 0x86	; 134
 8d8:	09 f0       	breq	.+2      	; 0x8dc <vfprintf+0x300>
 8da:	b3 94       	inc	r11
 8dc:	a3 fc       	sbrc	r10, 3
 8de:	11 c0       	rjmp	.+34     	; 0x902 <__stack+0x3>
 8e0:	a0 fe       	sbrs	r10, 0
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <vfprintf+0x314>
 8e4:	b2 14       	cp	r11, r2
 8e6:	88 f4       	brcc	.+34     	; 0x90a <__stack+0xb>
 8e8:	28 0c       	add	r2, r8
 8ea:	92 2c       	mov	r9, r2
 8ec:	9b 18       	sub	r9, r11
 8ee:	0e c0       	rjmp	.+28     	; 0x90c <__stack+0xd>
 8f0:	b2 14       	cp	r11, r2
 8f2:	60 f4       	brcc	.+24     	; 0x90c <__stack+0xd>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 8fe:	b3 94       	inc	r11
 900:	f7 cf       	rjmp	.-18     	; 0x8f0 <vfprintf+0x314>
 902:	b2 14       	cp	r11, r2
 904:	18 f4       	brcc	.+6      	; 0x90c <__stack+0xd>
 906:	2b 18       	sub	r2, r11
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	98 2c       	mov	r9, r8
 90c:	21 2c       	mov	r2, r1
 90e:	a4 fe       	sbrs	r10, 4
 910:	10 c0       	rjmp	.+32     	; 0x932 <__stack+0x33>
 912:	b6 01       	movw	r22, r12
 914:	80 e3       	ldi	r24, 0x30	; 48
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 91c:	a2 fe       	sbrs	r10, 2
 91e:	17 c0       	rjmp	.+46     	; 0x94e <__stack+0x4f>
 920:	a1 fc       	sbrc	r10, 1
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
 924:	88 e7       	ldi	r24, 0x78	; 120
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	88 e5       	ldi	r24, 0x58	; 88
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	b6 01       	movw	r22, r12
 930:	0c c0       	rjmp	.+24     	; 0x94a <__stack+0x4b>
 932:	8a 2d       	mov	r24, r10
 934:	86 78       	andi	r24, 0x86	; 134
 936:	59 f0       	breq	.+22     	; 0x94e <__stack+0x4f>
 938:	a1 fe       	sbrs	r10, 1
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
 93c:	8b e2       	ldi	r24, 0x2B	; 43
 93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0x43>
 940:	80 e2       	ldi	r24, 0x20	; 32
 942:	a7 fc       	sbrc	r10, 7
 944:	8d e2       	ldi	r24, 0x2D	; 45
 946:	b6 01       	movw	r22, r12
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 94e:	89 14       	cp	r8, r9
 950:	38 f4       	brcc	.+14     	; 0x960 <__stack+0x61>
 952:	b6 01       	movw	r22, r12
 954:	80 e3       	ldi	r24, 0x30	; 48
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 95c:	9a 94       	dec	r9
 95e:	f7 cf       	rjmp	.-18     	; 0x94e <__stack+0x4f>
 960:	8a 94       	dec	r8
 962:	f3 01       	movw	r30, r6
 964:	e8 0d       	add	r30, r8
 966:	f1 1d       	adc	r31, r1
 968:	80 81       	ld	r24, Z
 96a:	b6 01       	movw	r22, r12
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 972:	81 10       	cpse	r8, r1
 974:	f5 cf       	rjmp	.-22     	; 0x960 <__stack+0x61>
 976:	22 20       	and	r2, r2
 978:	09 f4       	brne	.+2      	; 0x97c <__stack+0x7d>
 97a:	42 ce       	rjmp	.-892    	; 0x600 <vfprintf+0x24>
 97c:	b6 01       	movw	r22, r12
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 e5 04 	call	0x9ca	; 0x9ca <fputc>
 986:	2a 94       	dec	r2
 988:	f6 cf       	rjmp	.-20     	; 0x976 <__stack+0x77>
 98a:	f6 01       	movw	r30, r12
 98c:	86 81       	ldd	r24, Z+6	; 0x06
 98e:	97 81       	ldd	r25, Z+7	; 0x07
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	9f ef       	ldi	r25, 0xFF	; 255
 996:	2b 96       	adiw	r28, 0x0b	; 11
 998:	e2 e1       	ldi	r30, 0x12	; 18
 99a:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__epilogue_restores__>

0000099e <strnlen_P>:
 99e:	fc 01       	movw	r30, r24
 9a0:	05 90       	lpm	r0, Z+
 9a2:	61 50       	subi	r22, 0x01	; 1
 9a4:	70 40       	sbci	r23, 0x00	; 0
 9a6:	01 10       	cpse	r0, r1
 9a8:	d8 f7       	brcc	.-10     	; 0x9a0 <strnlen_P+0x2>
 9aa:	80 95       	com	r24
 9ac:	90 95       	com	r25
 9ae:	8e 0f       	add	r24, r30
 9b0:	9f 1f       	adc	r25, r31
 9b2:	08 95       	ret

000009b4 <strnlen>:
 9b4:	fc 01       	movw	r30, r24
 9b6:	61 50       	subi	r22, 0x01	; 1
 9b8:	70 40       	sbci	r23, 0x00	; 0
 9ba:	01 90       	ld	r0, Z+
 9bc:	01 10       	cpse	r0, r1
 9be:	d8 f7       	brcc	.-10     	; 0x9b6 <strnlen+0x2>
 9c0:	80 95       	com	r24
 9c2:	90 95       	com	r25
 9c4:	8e 0f       	add	r24, r30
 9c6:	9f 1f       	adc	r25, r31
 9c8:	08 95       	ret

000009ca <fputc>:
 9ca:	0f 93       	push	r16
 9cc:	1f 93       	push	r17
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
 9d2:	fb 01       	movw	r30, r22
 9d4:	23 81       	ldd	r18, Z+3	; 0x03
 9d6:	21 fd       	sbrc	r18, 1
 9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <fputc+0x16>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	2c c0       	rjmp	.+88     	; 0xa38 <fputc+0x6e>
 9e0:	22 ff       	sbrs	r18, 2
 9e2:	16 c0       	rjmp	.+44     	; 0xa10 <fputc+0x46>
 9e4:	46 81       	ldd	r20, Z+6	; 0x06
 9e6:	57 81       	ldd	r21, Z+7	; 0x07
 9e8:	24 81       	ldd	r18, Z+4	; 0x04
 9ea:	35 81       	ldd	r19, Z+5	; 0x05
 9ec:	42 17       	cp	r20, r18
 9ee:	53 07       	cpc	r21, r19
 9f0:	44 f4       	brge	.+16     	; 0xa02 <fputc+0x38>
 9f2:	a0 81       	ld	r26, Z
 9f4:	b1 81       	ldd	r27, Z+1	; 0x01
 9f6:	9d 01       	movw	r18, r26
 9f8:	2f 5f       	subi	r18, 0xFF	; 255
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	31 83       	std	Z+1, r19	; 0x01
 9fe:	20 83       	st	Z, r18
 a00:	8c 93       	st	X, r24
 a02:	26 81       	ldd	r18, Z+6	; 0x06
 a04:	37 81       	ldd	r19, Z+7	; 0x07
 a06:	2f 5f       	subi	r18, 0xFF	; 255
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	37 83       	std	Z+7, r19	; 0x07
 a0c:	26 83       	std	Z+6, r18	; 0x06
 a0e:	14 c0       	rjmp	.+40     	; 0xa38 <fputc+0x6e>
 a10:	8b 01       	movw	r16, r22
 a12:	ec 01       	movw	r28, r24
 a14:	fb 01       	movw	r30, r22
 a16:	00 84       	ldd	r0, Z+8	; 0x08
 a18:	f1 85       	ldd	r31, Z+9	; 0x09
 a1a:	e0 2d       	mov	r30, r0
 a1c:	09 95       	icall
 a1e:	89 2b       	or	r24, r25
 a20:	e1 f6       	brne	.-72     	; 0x9da <fputc+0x10>
 a22:	d8 01       	movw	r26, r16
 a24:	16 96       	adiw	r26, 0x06	; 6
 a26:	8d 91       	ld	r24, X+
 a28:	9c 91       	ld	r25, X
 a2a:	17 97       	sbiw	r26, 0x07	; 7
 a2c:	01 96       	adiw	r24, 0x01	; 1
 a2e:	17 96       	adiw	r26, 0x07	; 7
 a30:	9c 93       	st	X, r25
 a32:	8e 93       	st	-X, r24
 a34:	16 97       	sbiw	r26, 0x06	; 6
 a36:	ce 01       	movw	r24, r28
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	08 95       	ret

00000a42 <__ultoa_invert>:
 a42:	fa 01       	movw	r30, r20
 a44:	aa 27       	eor	r26, r26
 a46:	28 30       	cpi	r18, 0x08	; 8
 a48:	51 f1       	breq	.+84     	; 0xa9e <__ultoa_invert+0x5c>
 a4a:	20 31       	cpi	r18, 0x10	; 16
 a4c:	81 f1       	breq	.+96     	; 0xaae <__ultoa_invert+0x6c>
 a4e:	e8 94       	clt
 a50:	6f 93       	push	r22
 a52:	6e 7f       	andi	r22, 0xFE	; 254
 a54:	6e 5f       	subi	r22, 0xFE	; 254
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	8f 4f       	sbci	r24, 0xFF	; 255
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	af 4f       	sbci	r26, 0xFF	; 255
 a5e:	b1 e0       	ldi	r27, 0x01	; 1
 a60:	3e d0       	rcall	.+124    	; 0xade <__ultoa_invert+0x9c>
 a62:	b4 e0       	ldi	r27, 0x04	; 4
 a64:	3c d0       	rcall	.+120    	; 0xade <__ultoa_invert+0x9c>
 a66:	67 0f       	add	r22, r23
 a68:	78 1f       	adc	r23, r24
 a6a:	89 1f       	adc	r24, r25
 a6c:	9a 1f       	adc	r25, r26
 a6e:	a1 1d       	adc	r26, r1
 a70:	68 0f       	add	r22, r24
 a72:	79 1f       	adc	r23, r25
 a74:	8a 1f       	adc	r24, r26
 a76:	91 1d       	adc	r25, r1
 a78:	a1 1d       	adc	r26, r1
 a7a:	6a 0f       	add	r22, r26
 a7c:	71 1d       	adc	r23, r1
 a7e:	81 1d       	adc	r24, r1
 a80:	91 1d       	adc	r25, r1
 a82:	a1 1d       	adc	r26, r1
 a84:	20 d0       	rcall	.+64     	; 0xac6 <__ultoa_invert+0x84>
 a86:	09 f4       	brne	.+2      	; 0xa8a <__ultoa_invert+0x48>
 a88:	68 94       	set
 a8a:	3f 91       	pop	r19
 a8c:	2a e0       	ldi	r18, 0x0A	; 10
 a8e:	26 9f       	mul	r18, r22
 a90:	11 24       	eor	r1, r1
 a92:	30 19       	sub	r19, r0
 a94:	30 5d       	subi	r19, 0xD0	; 208
 a96:	31 93       	st	Z+, r19
 a98:	de f6       	brtc	.-74     	; 0xa50 <__ultoa_invert+0xe>
 a9a:	cf 01       	movw	r24, r30
 a9c:	08 95       	ret
 a9e:	46 2f       	mov	r20, r22
 aa0:	47 70       	andi	r20, 0x07	; 7
 aa2:	40 5d       	subi	r20, 0xD0	; 208
 aa4:	41 93       	st	Z+, r20
 aa6:	b3 e0       	ldi	r27, 0x03	; 3
 aa8:	0f d0       	rcall	.+30     	; 0xac8 <__ultoa_invert+0x86>
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__ultoa_invert+0x5c>
 aac:	f6 cf       	rjmp	.-20     	; 0xa9a <__ultoa_invert+0x58>
 aae:	46 2f       	mov	r20, r22
 ab0:	4f 70       	andi	r20, 0x0F	; 15
 ab2:	40 5d       	subi	r20, 0xD0	; 208
 ab4:	4a 33       	cpi	r20, 0x3A	; 58
 ab6:	18 f0       	brcs	.+6      	; 0xabe <__ultoa_invert+0x7c>
 ab8:	49 5d       	subi	r20, 0xD9	; 217
 aba:	31 fd       	sbrc	r19, 1
 abc:	40 52       	subi	r20, 0x20	; 32
 abe:	41 93       	st	Z+, r20
 ac0:	02 d0       	rcall	.+4      	; 0xac6 <__ultoa_invert+0x84>
 ac2:	a9 f7       	brne	.-22     	; 0xaae <__ultoa_invert+0x6c>
 ac4:	ea cf       	rjmp	.-44     	; 0xa9a <__ultoa_invert+0x58>
 ac6:	b4 e0       	ldi	r27, 0x04	; 4
 ac8:	a6 95       	lsr	r26
 aca:	97 95       	ror	r25
 acc:	87 95       	ror	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	ba 95       	dec	r27
 ad4:	c9 f7       	brne	.-14     	; 0xac8 <__ultoa_invert+0x86>
 ad6:	00 97       	sbiw	r24, 0x00	; 0
 ad8:	61 05       	cpc	r22, r1
 ada:	71 05       	cpc	r23, r1
 adc:	08 95       	ret
 ade:	9b 01       	movw	r18, r22
 ae0:	ac 01       	movw	r20, r24
 ae2:	0a 2e       	mov	r0, r26
 ae4:	06 94       	lsr	r0
 ae6:	57 95       	ror	r21
 ae8:	47 95       	ror	r20
 aea:	37 95       	ror	r19
 aec:	27 95       	ror	r18
 aee:	ba 95       	dec	r27
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__ultoa_invert+0xa2>
 af2:	62 0f       	add	r22, r18
 af4:	73 1f       	adc	r23, r19
 af6:	84 1f       	adc	r24, r20
 af8:	95 1f       	adc	r25, r21
 afa:	a0 1d       	adc	r26, r0
 afc:	08 95       	ret

00000afe <__prologue_saves__>:
 afe:	2f 92       	push	r2
 b00:	3f 92       	push	r3
 b02:	4f 92       	push	r4
 b04:	5f 92       	push	r5
 b06:	6f 92       	push	r6
 b08:	7f 92       	push	r7
 b0a:	8f 92       	push	r8
 b0c:	9f 92       	push	r9
 b0e:	af 92       	push	r10
 b10:	bf 92       	push	r11
 b12:	cf 92       	push	r12
 b14:	df 92       	push	r13
 b16:	ef 92       	push	r14
 b18:	ff 92       	push	r15
 b1a:	0f 93       	push	r16
 b1c:	1f 93       	push	r17
 b1e:	cf 93       	push	r28
 b20:	df 93       	push	r29
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
 b26:	ca 1b       	sub	r28, r26
 b28:	db 0b       	sbc	r29, r27
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	f8 94       	cli
 b2e:	de bf       	out	0x3e, r29	; 62
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	cd bf       	out	0x3d, r28	; 61
 b34:	09 94       	ijmp

00000b36 <__epilogue_restores__>:
 b36:	2a 88       	ldd	r2, Y+18	; 0x12
 b38:	39 88       	ldd	r3, Y+17	; 0x11
 b3a:	48 88       	ldd	r4, Y+16	; 0x10
 b3c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b3e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b40:	7d 84       	ldd	r7, Y+13	; 0x0d
 b42:	8c 84       	ldd	r8, Y+12	; 0x0c
 b44:	9b 84       	ldd	r9, Y+11	; 0x0b
 b46:	aa 84       	ldd	r10, Y+10	; 0x0a
 b48:	b9 84       	ldd	r11, Y+9	; 0x09
 b4a:	c8 84       	ldd	r12, Y+8	; 0x08
 b4c:	df 80       	ldd	r13, Y+7	; 0x07
 b4e:	ee 80       	ldd	r14, Y+6	; 0x06
 b50:	fd 80       	ldd	r15, Y+5	; 0x05
 b52:	0c 81       	ldd	r16, Y+4	; 0x04
 b54:	1b 81       	ldd	r17, Y+3	; 0x03
 b56:	aa 81       	ldd	r26, Y+2	; 0x02
 b58:	b9 81       	ldd	r27, Y+1	; 0x01
 b5a:	ce 0f       	add	r28, r30
 b5c:	d1 1d       	adc	r29, r1
 b5e:	0f b6       	in	r0, 0x3f	; 63
 b60:	f8 94       	cli
 b62:	de bf       	out	0x3e, r29	; 62
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	cd bf       	out	0x3d, r28	; 61
 b68:	ed 01       	movw	r28, r26
 b6a:	08 95       	ret

00000b6c <_exit>:
 b6c:	f8 94       	cli

00000b6e <__stop_program>:
 b6e:	ff cf       	rjmp	.-2      	; 0xb6e <__stop_program>

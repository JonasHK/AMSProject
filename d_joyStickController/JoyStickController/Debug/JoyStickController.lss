
JoyStickController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800130  00800130  00000be6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b8c  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001214  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a00  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5c  00000000  00000000  00004940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e67  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d5 01       	movw	r26, r10

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 e2       	ldi	r30, 0x22	; 34
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 33       	cpi	r26, 0x30	; 48
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e3       	ldi	r26, 0x30	; 48
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 33       	cpi	r26, 0x3A	; 58
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 9f 02 	call	0x53e	; 0x53e <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 80 01 	call	0x300	; 0x300 <main>
  b6:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN11ADConverterC1Ev>:
#include "ADC.h"


ADConverter::ADConverter()
{
	ADMUX |= (1 << REFS0);//REF0 = Vcc
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);//Enable, set prescaler to 128. f = 16MHz/128
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <_ZN11ADConverter4ReadEh>:
}
uint16_t ADConverter::Read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	6f 70       	andi	r22, 0x0F	; 15
  de:	68 2b       	or	r22, r24
  e0:	60 83       	st	Z, r22
	
	ADCSRA |= (1 << ADSC);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	
	while(ADCSRA & (1 << ADSC));
  ec:	80 81       	ld	r24, Z
  ee:	86 fd       	sbrc	r24, 6
  f0:	fd cf       	rjmp	.-6      	; 0xec <_ZN11ADConverter4ReadEh+0x18>
	return ADC;
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fa:	08 95       	ret

000000fc <_ZN13BaseDataClass8ContinueEv>:
} //BaseDataClass

bool BaseDataClass::Continue()
{
	return true;
}
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	08 95       	ret

00000100 <_ZN13BaseDataClass7GetDataEPc>:

void BaseDataClass::GetData(char* string)
{
 100:	08 95       	ret

00000102 <_ZN13BaseDataClassC1Ev>:


#include "BaseDataClass.h"

// default constructor
BaseDataClass::BaseDataClass()
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	fc 01       	movw	r30, r24
 108:	31 83       	std	Z+1, r19	; 0x01
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <_ZN21DoubleClickDataToSend7GetDataEPc>:
DoubleClickDataToSend::DoubleClickDataToSend()
{
} //DoubleClickDataToSend

void DoubleClickDataToSend::GetData(char* string)
{
 10e:	fb 01       	movw	r30, r22
	string[0] = '1';
 110:	81 e3       	ldi	r24, 0x31	; 49
 112:	80 83       	st	Z, r24
	string[1] = '0';
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	81 83       	std	Z+1, r24	; 0x01
	string[2] = '\0';
 118:	12 82       	std	Z+2, r1	; 0x02
 11a:	08 95       	ret

0000011c <_ZN21DoubleClickDataToSend8ContinueEv>:
}

bool DoubleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	82 fb       	bst	r24, 2
 120:	88 27       	eor	r24, r24
 122:	80 f9       	bld	r24, 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	89 27       	eor	r24, r25
 128:	08 95       	ret

0000012a <_ZN21DoubleClickDataToSendC1Ev>:
#include <string.h>
#include <avr/io.h>


// default constructor
DoubleClickDataToSend::DoubleClickDataToSend()
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
 130:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	99 83       	std	Y+1, r25	; 0x01
 13a:	88 83       	st	Y, r24
{
} //DoubleClickDataToSend
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <_ZN18PositionDataToSend8ContinueEv>:
} //PositionDataToSend

bool PositionDataToSend::Continue()
{
	return true;
}
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <_ZN18PositionDataToSend7GetDataEPc>:

void PositionDataToSend::GetData(char* string)
{
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	f6 2e       	mov	r15, r22
 15e:	e7 2e       	mov	r14, r23
	uint16_t xPos = voltageReader.Read(0);//ADC channel 0
 160:	8c 01       	movw	r16, r24
 162:	0e 5f       	subi	r16, 0xFE	; 254
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 16e:	6c 01       	movw	r12, r24
	uint16_t yPos = voltageReader.Read(1);//ADC channel 1
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	c8 01       	movw	r24, r16
 174:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN11ADConverter4ReadEh>
 178:	8c 01       	movw	r16, r24
	
	PositionTranslator t;
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN18PositionTranslatorC1Ev>
	
	sprintf(string, "%d", t.Translate(xPos, yPos));
 182:	a8 01       	movw	r20, r16
 184:	b6 01       	movw	r22, r12
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN18PositionTranslator9TranslateEjj>
 18e:	1f 92       	push	r1
 190:	8f 93       	push	r24
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9f 93       	push	r25
 198:	8f 93       	push	r24
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0e 94 a5 02 	call	0x54a	; 0x54a <sprintf>
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	08 95       	ret

000001c2 <_ZN18PositionDataToSendC1Ev>:
#include "../PositionTranslator.h"
#include <string.h>
#include <stdio.h>

// default constructor
PositionDataToSend::PositionDataToSend()
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	d8 2f       	mov	r29, r24
 1c8:	c9 2f       	mov	r28, r25
 1ca:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 1ce:	8d 2f       	mov	r24, r29
 1d0:	9c 2f       	mov	r25, r28
 1d2:	27 e1       	ldi	r18, 0x17	; 23
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	fc 01       	movw	r30, r24
 1d8:	21 93       	st	Z+, r18
 1da:	31 93       	st	Z+, r19
 1dc:	cf 01       	movw	r24, r30
 1de:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN11ADConverterC1Ev>
{
} //PositionDataToSend
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <_ZN21SingleClickDataToSend8ContinueEv>:
{
} //SingleClickDataToSend

bool SingleClickDataToSend::Continue()
{
	return (~PIND & (1 << 2));
 1e8:	89 b1       	in	r24, 0x09	; 9
 1ea:	82 fb       	bst	r24, 2
 1ec:	88 27       	eor	r24, r24
 1ee:	80 f9       	bld	r24, 0
}
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	89 27       	eor	r24, r25
 1f4:	08 95       	ret

000001f6 <_ZN21SingleClickDataToSend7GetDataEPc>:
void SingleClickDataToSend::GetData(char* string)
{
	string[0] = '9';
 1f6:	89 e3       	ldi	r24, 0x39	; 57
 1f8:	fb 01       	movw	r30, r22
 1fa:	80 83       	st	Z, r24
	string[1] = '\0';
 1fc:	11 82       	std	Z+1, r1	; 0x01
 1fe:	08 95       	ret

00000200 <_ZN21SingleClickDataToSendC1Ev>:
#include "SingleClickDataToSend.h"
#include <string.h>
#include <avr/io.h>

// default constructor
SingleClickDataToSend::SingleClickDataToSend()
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	0e 94 81 00 	call	0x102	; 0x102 <_ZN13BaseDataClassC1Ev>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	99 83       	std	Y+1, r25	; 0x01
 210:	88 83       	st	Y, r24
{
} //SingleClickDataToSend
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_Z11resetTimer1v>:


// External interrupt 0/PORTD Pin 2
void resetTimer1()
{
	TCNT1H = TIMER1_HIGH_VALUE; //Reset counter
 218:	8b e0       	ldi	r24, 0x0B	; 11
 21a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = TIMER1_LOW_VALUE;
 21e:	8c ed       	ldi	r24, 0xDC	; 220
 220:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 224:	08 95       	ret

00000226 <__vector_1>:
}

bool doubleClickFlag = false;//Flag used for double click timing, not an indicator of double click
ISR(INT0_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	if(doubleClickFlag)
 248:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 24c:	88 23       	and	r24, r24
 24e:	81 f0       	breq	.+32     	; 0x270 <__vector_1+0x4a>
	{
		//Timer interrupted, double click
		
		TCCR1B &= 0b11111000; //Stop timer
 250:	e1 e8       	ldi	r30, 0x81	; 129
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 83       	st	Z, r24
		resetTimer1();
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
		doubleClickFlag = false;
 25e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
		dataController = &doubleClickClass;
 262:	83 e3       	ldi	r24, 0x33	; 51
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <dataController+0x1>
 26a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <dataController>
 26e:	06 c0       	rjmp	.+12     	; 0x27c <__vector_1+0x56>
	}
	else
	{
		//Start the timer to wait for double click
		doubleClickFlag = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
		TCCR1B = (1<<CS10) | (1<<CS11);;  // Timer mode with 64 prescler
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	}
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_13>:

// Timer 1 overflow interrupt
ISR(TIMER1_OVF_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	//Timer timed out, single click
	TCCR1B &= 0b11111000; //Stop timer
 2c0:	e1 e8       	ldi	r30, 0x81	; 129
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	88 7f       	andi	r24, 0xF8	; 248
 2c8:	80 83       	st	Z, r24
	resetTimer1();
 2ca:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>
	doubleClickFlag = false;//No double click
 2ce:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
	dataController = &singleClickClass;
 2d2:	81 e3       	ldi	r24, 0x31	; 49
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <dataController+0x1>
 2da:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <dataController>
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:


int main(void)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	65 97       	sbiw	r28, 0x15	; 21
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	UART sender(16e6, 9600);
 314:	00 e8       	ldi	r16, 0x80	; 128
 316:	15 e2       	ldi	r17, 0x25	; 37
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	54 e2       	ldi	r21, 0x24	; 36
 320:	64 ef       	ldi	r22, 0xF4	; 244
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_ZN4UARTC1Emm>
	EICRA |= 0b00000010; //Falling edge of PORTD pin 2
 32c:	e9 e6       	ldi	r30, 0x69	; 105
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	82 60       	ori	r24, 0x02	; 2
 334:	80 83       	st	Z, r24
	EIMSK |= 1; //Enable INT0 - PORTD pin 2	
 336:	e8 9a       	sbi	0x1d, 0	; 29
	
	
	DDRD = (0x01 << 4);
 338:	80 e1       	ldi	r24, 0x10	; 16
 33a:	8a b9       	out	0x0a, r24	; 10
	resetTimer1();
 33c:	0e 94 0c 01 	call	0x218	; 0x218 <_Z11resetTimer1v>

	TCCR1A = 0x00;
 340:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TIMSK1 = (1 << TOIE1) ;   // Enable timer1 overflow interrupt(TOIE1)
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
 34a:	78 94       	sei
	
	char buffer[20];
    while (1) 
    {
		dataController = &postionClass;
 34c:	05 e3       	ldi	r16, 0x35	; 53
 34e:	11 e0       	ldi	r17, 0x01	; 1
 350:	10 93 39 01 	sts	0x0139, r17	; 0x800139 <dataController+0x1>
 354:	00 93 38 01 	sts	0x0138, r16	; 0x800138 <dataController>
		while(dataController->Continue())
 358:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <dataController>
 35c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <dataController+0x1>
 360:	dc 01       	movw	r26, r24
 362:	ed 91       	ld	r30, X+
 364:	fc 91       	ld	r31, X
 366:	01 90       	ld	r0, Z+
 368:	f0 81       	ld	r31, Z
 36a:	e0 2d       	mov	r30, r0
 36c:	09 95       	icall
 36e:	88 23       	and	r24, r24
 370:	79 f3       	breq	.-34     	; 0x350 <main+0x50>
		{
			dataController->GetData(buffer);
 372:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <dataController>
 376:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <dataController+0x1>
 37a:	dc 01       	movw	r26, r24
 37c:	ed 91       	ld	r30, X+
 37e:	fc 91       	ld	r31, X
 380:	02 80       	ldd	r0, Z+2	; 0x02
 382:	f3 81       	ldd	r31, Z+3	; 0x03
 384:	e0 2d       	mov	r30, r0
 386:	be 01       	movw	r22, r28
 388:	6e 5f       	subi	r22, 0xFE	; 254
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	09 95       	icall
			sender.Write(buffer);
 38e:	be 01       	movw	r22, r28
 390:	6e 5f       	subi	r22, 0xFE	; 254
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN4UART5WriteEPKc>
			sender.Write("\n");
 39c:	6e e2       	ldi	r22, 0x2E	; 46
 39e:	71 e0       	ldi	r23, 0x01	; 1
 3a0:	ce 01       	movw	r24, r28
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN4UART5WriteEPKc>
	
	char buffer[20];
    while (1) 
    {
		dataController = &postionClass;
		while(dataController->Continue())
 3a8:	d7 cf       	rjmp	.-82     	; 0x358 <main+0x58>

000003aa <_GLOBAL__sub_I_dataController>:
#define TIMER1_HIGH_VALUE 0b00001011
#define TIMER1_LOW_VALUE  0b11011100 //15540 in total, 250 ms 

//Data classes for switching
BaseDataClass *dataController;
PositionDataToSend postionClass;
 3aa:	85 e3       	ldi	r24, 0x35	; 53
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN18PositionDataToSendC1Ev>
DoubleClickDataToSend doubleClickClass;
 3b2:	83 e3       	ldi	r24, 0x33	; 51
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN21DoubleClickDataToSendC1Ev>
SingleClickDataToSend singleClickClass;
 3ba:	81 e3       	ldi	r24, 0x31	; 49
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 00 01 	call	0x200	; 0x200 <_ZN21SingleClickDataToSendC1Ev>
 3c2:	08 95       	ret

000003c4 <_ZN18PositionTranslatorC1Ev>:

#include "PositionTranslator.h"
#include <avr/io.h>

// default constructor
PositionTranslator::PositionTranslator()
 3c4:	08 95       	ret

000003c6 <_ZN18PositionTranslator9TranslateEjj>:
{
} //PositionTranslator

uint8_t PositionTranslator::Translate(uint16_t xPos, uint16_t yPos)
{
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	ca 01       	movw	r24, r20
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	48 0f       	add	r20, r24
 3d6:	59 1f       	adc	r21, r25
 3d8:	46 0f       	add	r20, r22
 3da:	57 1f       	adc	r21, r23
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 3dc:	ca 01       	movw	r24, r20
 3de:	8a 5b       	subi	r24, 0xBA	; 186
 3e0:	93 40       	sbci	r25, 0x03	; 3
 3e2:	85 36       	cpi	r24, 0x65	; 101
 3e4:	91 05       	cpc	r25, r1
 3e6:	80 f4       	brcc	.+32     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	uint16_t mappedProduct = (xPos*2)+(yPos*5);
	
	if(InRange(mappedProduct, 0, 400))
		return 0;
	else if (InRange(mappedProduct,954, 1054))
		return 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
	else if(InRange(mappedProduct, 1946, 2150))
		return 2;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	08 95       	ret
	else if(InRange(mappedProduct, 2385, 2636))
		return 3;
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	08 95       	ret
	else if(InRange(mappedProduct, 3338, 3690))
		return 4;
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	08 95       	ret
	else if(InRange(mappedProduct, 4330, 4786))
		return 5;
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	08 95       	ret
	else if(InRange(mappedProduct, 4864, 5376))
		return 6;
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	08 95       	ret
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	08 95       	ret
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	08 95       	ret
	
}

bool PositionTranslator::InRange(uint16_t num, uint16_t low, uint16_t high)
{
	return (num > low-1) && (num < high+1);
 408:	ca 01       	movw	r24, r20
 40a:	8a 59       	subi	r24, 0x9A	; 154
 40c:	97 40       	sbci	r25, 0x07	; 7
 40e:	8d 3c       	cpi	r24, 0xCD	; 205
 410:	91 05       	cpc	r25, r1
 412:	60 f3       	brcs	.-40     	; 0x3ec <_ZN18PositionTranslator9TranslateEjj+0x26>
 414:	87 5b       	subi	r24, 0xB7	; 183
 416:	91 40       	sbci	r25, 0x01	; 1
 418:	8c 3f       	cpi	r24, 0xFC	; 252
 41a:	91 05       	cpc	r25, r1
 41c:	48 f3       	brcs	.-46     	; 0x3f0 <_ZN18PositionTranslator9TranslateEjj+0x2a>
 41e:	89 5b       	subi	r24, 0xB9	; 185
 420:	93 40       	sbci	r25, 0x03	; 3
 422:	81 36       	cpi	r24, 0x61	; 97
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	92 07       	cpc	r25, r18
 428:	28 f3       	brcs	.-54     	; 0x3f4 <_ZN18PositionTranslator9TranslateEjj+0x2e>
 42a:	80 5e       	subi	r24, 0xE0	; 224
 42c:	93 40       	sbci	r25, 0x03	; 3
 42e:	89 3c       	cpi	r24, 0xC9	; 201
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	92 07       	cpc	r25, r18
 434:	08 f3       	brcs	.-62     	; 0x3f8 <_ZN18PositionTranslator9TranslateEjj+0x32>
 436:	86 51       	subi	r24, 0x16	; 22
 438:	92 40       	sbci	r25, 0x02	; 2
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	22 e0       	ldi	r18, 0x02	; 2
 43e:	92 07       	cpc	r25, r18
 440:	e8 f2       	brcs	.-70     	; 0x3fc <_ZN18PositionTranslator9TranslateEjj+0x36>
 442:	8a 5b       	subi	r24, 0xBA	; 186
 444:	93 40       	sbci	r25, 0x03	; 3
 446:	85 36       	cpi	r24, 0x65	; 101
 448:	92 40       	sbci	r25, 0x02	; 2
 44a:	d0 f2       	brcs	.-76     	; 0x400 <__LOCK_REGION_LENGTH__>
 44c:	4a 59       	subi	r20, 0x9A	; 154
 44e:	5a 41       	sbci	r21, 0x1A	; 26
 450:	4d 3c       	cpi	r20, 0xCD	; 205
 452:	52 40       	sbci	r21, 0x02	; 2
 454:	b8 f2       	brcs	.-82     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	else if(InRange(mappedProduct, 5818, 6430))
		return 7;
	else if(InRange(mappedProduct, 6810, 7526))
		return 7;
	else
		return 4;
 456:	84 e0       	ldi	r24, 0x04	; 4
	
}
 458:	08 95       	ret

0000045a <_ZN4UART8sendCharEc>:
	}
	Write("\n");
	return line;
}
uint8_t UART::sendChar(char c)
{
 45a:	cf 93       	push	r28
 45c:	c6 2f       	mov	r28, r22
	if (c == '\n')
 45e:	6a 30       	cpi	r22, 0x0A	; 10
 460:	19 f4       	brne	.+6      	; 0x468 <_ZN4UART8sendCharEc+0xe>
	{
		sendChar('\r');
 462:	6d e0       	ldi	r22, 0x0D	; 13
 464:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN4UART8sendCharEc>
	}
	while (!(UCSR0A & (1<<UDRE0))); //waits between transmissions
 468:	e0 ec       	ldi	r30, 0xC0	; 192
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	85 ff       	sbrs	r24, 5
 470:	fd cf       	rjmp	.-6      	; 0x46c <_ZN4UART8sendCharEc+0x12>
	UDR0 = c; //Sends the UART transmission
 472:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <_ZN4UART5WriteEPKc>:
	Write("Initialized\n");
	//Test

}
uint8_t UART::Write(const char* string)
{
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	eb 01       	movw	r28, r22
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 486:	68 81       	ld	r22, Y
 488:	66 23       	and	r22, r22
 48a:	41 f0       	breq	.+16     	; 0x49c <_ZN4UART5WriteEPKc+0x20>
 48c:	8c 01       	movw	r16, r24
 48e:	21 96       	adiw	r28, 0x01	; 1
	{
		sendChar(*(string + i));
 490:	c8 01       	movw	r24, r16
 492:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN4UART8sendCharEc>
}
uint8_t UART::Write(const char* string)
{
	uint16_t i = 0;
	
	while(*(string + i) != '\0')
 496:	69 91       	ld	r22, Y+
 498:	61 11       	cpse	r22, r1
 49a:	fa cf       	rjmp	.-12     	; 0x490 <_ZN4UART5WriteEPKc+0x14>
		sendChar(*(string + i));
		++i;
	}
	
	return 0;
}
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <_ZN4UARTC1Emm>:
 * Created: 27-02-2020 20:43:18
 *  Author: troel
 */ 
#include "UART.h"

UART::UART(uint32_t fcpu, uint32_t BAUDRATE)
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	ec 01       	movw	r28, r24
{
	UBRR0 = fcpu/16/BAUDRATE-1; //Sets the Baudrate
 4b2:	cb 01       	movw	r24, r22
 4b4:	ba 01       	movw	r22, r20
 4b6:	68 94       	set
 4b8:	13 f8       	bld	r1, 3
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	16 94       	lsr	r1
 4c4:	d1 f7       	brne	.-12     	; 0x4ba <_ZN4UARTC1Emm+0x12>
 4c6:	a9 01       	movw	r20, r18
 4c8:	98 01       	movw	r18, r16
 4ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__udivmodsi4>
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	31 09       	sbc	r19, r1
 4d2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4d6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); //Enables input and output
 4da:	88 e1       	ldi	r24, 0x18	; 24
 4dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00); 	//Set communication as 8bit(And 1 stop bit is default.)
 4e0:	86 e0       	ldi	r24, 0x06	; 6
 4e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	Write("Initialized\n");
 4e6:	63 e2       	ldi	r22, 0x23	; 35
 4e8:	71 e0       	ldi	r23, 0x01	; 1
 4ea:	ce 01       	movw	r24, r28
 4ec:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN4UART5WriteEPKc>
	//Test

}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <__udivmodsi4>:
 4fa:	a1 e2       	ldi	r26, 0x21	; 33
 4fc:	1a 2e       	mov	r1, r26
 4fe:	aa 1b       	sub	r26, r26
 500:	bb 1b       	sub	r27, r27
 502:	fd 01       	movw	r30, r26
 504:	0d c0       	rjmp	.+26     	; 0x520 <__udivmodsi4_ep>

00000506 <__udivmodsi4_loop>:
 506:	aa 1f       	adc	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	ee 1f       	adc	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	a2 17       	cp	r26, r18
 510:	b3 07       	cpc	r27, r19
 512:	e4 07       	cpc	r30, r20
 514:	f5 07       	cpc	r31, r21
 516:	20 f0       	brcs	.+8      	; 0x520 <__udivmodsi4_ep>
 518:	a2 1b       	sub	r26, r18
 51a:	b3 0b       	sbc	r27, r19
 51c:	e4 0b       	sbc	r30, r20
 51e:	f5 0b       	sbc	r31, r21

00000520 <__udivmodsi4_ep>:
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	1a 94       	dec	r1
 52a:	69 f7       	brne	.-38     	; 0x506 <__udivmodsi4_loop>
 52c:	60 95       	com	r22
 52e:	70 95       	com	r23
 530:	80 95       	com	r24
 532:	90 95       	com	r25
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	bd 01       	movw	r22, r26
 53a:	cf 01       	movw	r24, r30
 53c:	08 95       	ret

0000053e <__tablejump2__>:
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	05 90       	lpm	r0, Z+
 544:	f4 91       	lpm	r31, Z
 546:	e0 2d       	mov	r30, r0
 548:	09 94       	ijmp

0000054a <sprintf>:
 54a:	ae e0       	ldi	r26, 0x0E	; 14
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	eb ea       	ldi	r30, 0xAB	; 171
 550:	f2 e0       	ldi	r31, 0x02	; 2
 552:	0c 94 66 05 	jmp	0xacc	; 0xacc <__prologue_saves__+0x1c>
 556:	0d 89       	ldd	r16, Y+21	; 0x15
 558:	1e 89       	ldd	r17, Y+22	; 0x16
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	8c 83       	std	Y+4, r24	; 0x04
 55e:	1a 83       	std	Y+2, r17	; 0x02
 560:	09 83       	std	Y+1, r16	; 0x01
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	9f e7       	ldi	r25, 0x7F	; 127
 566:	9e 83       	std	Y+6, r25	; 0x06
 568:	8d 83       	std	Y+5, r24	; 0x05
 56a:	ae 01       	movw	r20, r28
 56c:	47 5e       	subi	r20, 0xE7	; 231
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	6f 89       	ldd	r22, Y+23	; 0x17
 572:	78 8d       	ldd	r23, Y+24	; 0x18
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	0e 94 c7 02 	call	0x58e	; 0x58e <vfprintf>
 57c:	ef 81       	ldd	r30, Y+7	; 0x07
 57e:	f8 85       	ldd	r31, Y+8	; 0x08
 580:	e0 0f       	add	r30, r16
 582:	f1 1f       	adc	r31, r17
 584:	10 82       	st	Z, r1
 586:	2e 96       	adiw	r28, 0x0e	; 14
 588:	e4 e0       	ldi	r30, 0x04	; 4
 58a:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__epilogue_restores__+0x1c>

0000058e <vfprintf>:
 58e:	ab e0       	ldi	r26, 0x0B	; 11
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	ed ec       	ldi	r30, 0xCD	; 205
 594:	f2 e0       	ldi	r31, 0x02	; 2
 596:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__prologue_saves__>
 59a:	6c 01       	movw	r12, r24
 59c:	7b 01       	movw	r14, r22
 59e:	8a 01       	movw	r16, r20
 5a0:	fc 01       	movw	r30, r24
 5a2:	17 82       	std	Z+7, r1	; 0x07
 5a4:	16 82       	std	Z+6, r1	; 0x06
 5a6:	83 81       	ldd	r24, Z+3	; 0x03
 5a8:	81 ff       	sbrs	r24, 1
 5aa:	cc c1       	rjmp	.+920    	; 0x944 <__stack+0x45>
 5ac:	ce 01       	movw	r24, r28
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	3c 01       	movw	r6, r24
 5b2:	f6 01       	movw	r30, r12
 5b4:	93 81       	ldd	r25, Z+3	; 0x03
 5b6:	f7 01       	movw	r30, r14
 5b8:	93 fd       	sbrc	r25, 3
 5ba:	85 91       	lpm	r24, Z+
 5bc:	93 ff       	sbrs	r25, 3
 5be:	81 91       	ld	r24, Z+
 5c0:	7f 01       	movw	r14, r30
 5c2:	88 23       	and	r24, r24
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <vfprintf+0x3a>
 5c6:	ba c1       	rjmp	.+884    	; 0x93c <__stack+0x3d>
 5c8:	85 32       	cpi	r24, 0x25	; 37
 5ca:	39 f4       	brne	.+14     	; 0x5da <vfprintf+0x4c>
 5cc:	93 fd       	sbrc	r25, 3
 5ce:	85 91       	lpm	r24, Z+
 5d0:	93 ff       	sbrs	r25, 3
 5d2:	81 91       	ld	r24, Z+
 5d4:	7f 01       	movw	r14, r30
 5d6:	85 32       	cpi	r24, 0x25	; 37
 5d8:	29 f4       	brne	.+10     	; 0x5e4 <vfprintf+0x56>
 5da:	b6 01       	movw	r22, r12
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 5e2:	e7 cf       	rjmp	.-50     	; 0x5b2 <vfprintf+0x24>
 5e4:	91 2c       	mov	r9, r1
 5e6:	21 2c       	mov	r2, r1
 5e8:	31 2c       	mov	r3, r1
 5ea:	ff e1       	ldi	r31, 0x1F	; 31
 5ec:	f3 15       	cp	r31, r3
 5ee:	d8 f0       	brcs	.+54     	; 0x626 <vfprintf+0x98>
 5f0:	8b 32       	cpi	r24, 0x2B	; 43
 5f2:	79 f0       	breq	.+30     	; 0x612 <vfprintf+0x84>
 5f4:	38 f4       	brcc	.+14     	; 0x604 <vfprintf+0x76>
 5f6:	80 32       	cpi	r24, 0x20	; 32
 5f8:	79 f0       	breq	.+30     	; 0x618 <vfprintf+0x8a>
 5fa:	83 32       	cpi	r24, 0x23	; 35
 5fc:	a1 f4       	brne	.+40     	; 0x626 <vfprintf+0x98>
 5fe:	23 2d       	mov	r18, r3
 600:	20 61       	ori	r18, 0x10	; 16
 602:	1d c0       	rjmp	.+58     	; 0x63e <vfprintf+0xb0>
 604:	8d 32       	cpi	r24, 0x2D	; 45
 606:	61 f0       	breq	.+24     	; 0x620 <vfprintf+0x92>
 608:	80 33       	cpi	r24, 0x30	; 48
 60a:	69 f4       	brne	.+26     	; 0x626 <vfprintf+0x98>
 60c:	23 2d       	mov	r18, r3
 60e:	21 60       	ori	r18, 0x01	; 1
 610:	16 c0       	rjmp	.+44     	; 0x63e <vfprintf+0xb0>
 612:	83 2d       	mov	r24, r3
 614:	82 60       	ori	r24, 0x02	; 2
 616:	38 2e       	mov	r3, r24
 618:	e3 2d       	mov	r30, r3
 61a:	e4 60       	ori	r30, 0x04	; 4
 61c:	3e 2e       	mov	r3, r30
 61e:	2a c0       	rjmp	.+84     	; 0x674 <vfprintf+0xe6>
 620:	f3 2d       	mov	r31, r3
 622:	f8 60       	ori	r31, 0x08	; 8
 624:	1d c0       	rjmp	.+58     	; 0x660 <vfprintf+0xd2>
 626:	37 fc       	sbrc	r3, 7
 628:	2d c0       	rjmp	.+90     	; 0x684 <vfprintf+0xf6>
 62a:	20 ed       	ldi	r18, 0xD0	; 208
 62c:	28 0f       	add	r18, r24
 62e:	2a 30       	cpi	r18, 0x0A	; 10
 630:	40 f0       	brcs	.+16     	; 0x642 <vfprintf+0xb4>
 632:	8e 32       	cpi	r24, 0x2E	; 46
 634:	b9 f4       	brne	.+46     	; 0x664 <vfprintf+0xd6>
 636:	36 fc       	sbrc	r3, 6
 638:	81 c1       	rjmp	.+770    	; 0x93c <__stack+0x3d>
 63a:	23 2d       	mov	r18, r3
 63c:	20 64       	ori	r18, 0x40	; 64
 63e:	32 2e       	mov	r3, r18
 640:	19 c0       	rjmp	.+50     	; 0x674 <vfprintf+0xe6>
 642:	36 fe       	sbrs	r3, 6
 644:	06 c0       	rjmp	.+12     	; 0x652 <vfprintf+0xc4>
 646:	8a e0       	ldi	r24, 0x0A	; 10
 648:	98 9e       	mul	r9, r24
 64a:	20 0d       	add	r18, r0
 64c:	11 24       	eor	r1, r1
 64e:	92 2e       	mov	r9, r18
 650:	11 c0       	rjmp	.+34     	; 0x674 <vfprintf+0xe6>
 652:	ea e0       	ldi	r30, 0x0A	; 10
 654:	2e 9e       	mul	r2, r30
 656:	20 0d       	add	r18, r0
 658:	11 24       	eor	r1, r1
 65a:	22 2e       	mov	r2, r18
 65c:	f3 2d       	mov	r31, r3
 65e:	f0 62       	ori	r31, 0x20	; 32
 660:	3f 2e       	mov	r3, r31
 662:	08 c0       	rjmp	.+16     	; 0x674 <vfprintf+0xe6>
 664:	8c 36       	cpi	r24, 0x6C	; 108
 666:	21 f4       	brne	.+8      	; 0x670 <vfprintf+0xe2>
 668:	83 2d       	mov	r24, r3
 66a:	80 68       	ori	r24, 0x80	; 128
 66c:	38 2e       	mov	r3, r24
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0xe6>
 670:	88 36       	cpi	r24, 0x68	; 104
 672:	41 f4       	brne	.+16     	; 0x684 <vfprintf+0xf6>
 674:	f7 01       	movw	r30, r14
 676:	93 fd       	sbrc	r25, 3
 678:	85 91       	lpm	r24, Z+
 67a:	93 ff       	sbrs	r25, 3
 67c:	81 91       	ld	r24, Z+
 67e:	7f 01       	movw	r14, r30
 680:	81 11       	cpse	r24, r1
 682:	b3 cf       	rjmp	.-154    	; 0x5ea <vfprintf+0x5c>
 684:	98 2f       	mov	r25, r24
 686:	9f 7d       	andi	r25, 0xDF	; 223
 688:	95 54       	subi	r25, 0x45	; 69
 68a:	93 30       	cpi	r25, 0x03	; 3
 68c:	28 f4       	brcc	.+10     	; 0x698 <vfprintf+0x10a>
 68e:	0c 5f       	subi	r16, 0xFC	; 252
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	9f e3       	ldi	r25, 0x3F	; 63
 694:	99 83       	std	Y+1, r25	; 0x01
 696:	0d c0       	rjmp	.+26     	; 0x6b2 <vfprintf+0x124>
 698:	83 36       	cpi	r24, 0x63	; 99
 69a:	31 f0       	breq	.+12     	; 0x6a8 <vfprintf+0x11a>
 69c:	83 37       	cpi	r24, 0x73	; 115
 69e:	71 f0       	breq	.+28     	; 0x6bc <vfprintf+0x12e>
 6a0:	83 35       	cpi	r24, 0x53	; 83
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <vfprintf+0x118>
 6a4:	59 c0       	rjmp	.+178    	; 0x758 <vfprintf+0x1ca>
 6a6:	21 c0       	rjmp	.+66     	; 0x6ea <vfprintf+0x15c>
 6a8:	f8 01       	movw	r30, r16
 6aa:	80 81       	ld	r24, Z
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	0e 5f       	subi	r16, 0xFE	; 254
 6b0:	1f 4f       	sbci	r17, 0xFF	; 255
 6b2:	88 24       	eor	r8, r8
 6b4:	83 94       	inc	r8
 6b6:	91 2c       	mov	r9, r1
 6b8:	53 01       	movw	r10, r6
 6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <vfprintf+0x154>
 6bc:	28 01       	movw	r4, r16
 6be:	f2 e0       	ldi	r31, 0x02	; 2
 6c0:	4f 0e       	add	r4, r31
 6c2:	51 1c       	adc	r5, r1
 6c4:	f8 01       	movw	r30, r16
 6c6:	a0 80       	ld	r10, Z
 6c8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ca:	36 fe       	sbrs	r3, 6
 6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <vfprintf+0x146>
 6ce:	69 2d       	mov	r22, r9
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <vfprintf+0x14a>
 6d4:	6f ef       	ldi	r22, 0xFF	; 255
 6d6:	7f ef       	ldi	r23, 0xFF	; 255
 6d8:	c5 01       	movw	r24, r10
 6da:	0e 94 b3 04 	call	0x966	; 0x966 <strnlen>
 6de:	4c 01       	movw	r8, r24
 6e0:	82 01       	movw	r16, r4
 6e2:	f3 2d       	mov	r31, r3
 6e4:	ff 77       	andi	r31, 0x7F	; 127
 6e6:	3f 2e       	mov	r3, r31
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <vfprintf+0x188>
 6ea:	28 01       	movw	r4, r16
 6ec:	22 e0       	ldi	r18, 0x02	; 2
 6ee:	42 0e       	add	r4, r18
 6f0:	51 1c       	adc	r5, r1
 6f2:	f8 01       	movw	r30, r16
 6f4:	a0 80       	ld	r10, Z
 6f6:	b1 80       	ldd	r11, Z+1	; 0x01
 6f8:	36 fe       	sbrs	r3, 6
 6fa:	03 c0       	rjmp	.+6      	; 0x702 <vfprintf+0x174>
 6fc:	69 2d       	mov	r22, r9
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0x178>
 702:	6f ef       	ldi	r22, 0xFF	; 255
 704:	7f ef       	ldi	r23, 0xFF	; 255
 706:	c5 01       	movw	r24, r10
 708:	0e 94 a8 04 	call	0x950	; 0x950 <strnlen_P>
 70c:	4c 01       	movw	r8, r24
 70e:	f3 2d       	mov	r31, r3
 710:	f0 68       	ori	r31, 0x80	; 128
 712:	3f 2e       	mov	r3, r31
 714:	82 01       	movw	r16, r4
 716:	33 fc       	sbrc	r3, 3
 718:	1b c0       	rjmp	.+54     	; 0x750 <vfprintf+0x1c2>
 71a:	82 2d       	mov	r24, r2
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	88 16       	cp	r8, r24
 720:	99 06       	cpc	r9, r25
 722:	b0 f4       	brcc	.+44     	; 0x750 <vfprintf+0x1c2>
 724:	b6 01       	movw	r22, r12
 726:	80 e2       	ldi	r24, 0x20	; 32
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 72e:	2a 94       	dec	r2
 730:	f4 cf       	rjmp	.-24     	; 0x71a <vfprintf+0x18c>
 732:	f5 01       	movw	r30, r10
 734:	37 fc       	sbrc	r3, 7
 736:	85 91       	lpm	r24, Z+
 738:	37 fe       	sbrs	r3, 7
 73a:	81 91       	ld	r24, Z+
 73c:	5f 01       	movw	r10, r30
 73e:	b6 01       	movw	r22, r12
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 746:	21 10       	cpse	r2, r1
 748:	2a 94       	dec	r2
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	82 1a       	sub	r8, r18
 74e:	91 08       	sbc	r9, r1
 750:	81 14       	cp	r8, r1
 752:	91 04       	cpc	r9, r1
 754:	71 f7       	brne	.-36     	; 0x732 <vfprintf+0x1a4>
 756:	e8 c0       	rjmp	.+464    	; 0x928 <__stack+0x29>
 758:	84 36       	cpi	r24, 0x64	; 100
 75a:	11 f0       	breq	.+4      	; 0x760 <vfprintf+0x1d2>
 75c:	89 36       	cpi	r24, 0x69	; 105
 75e:	41 f5       	brne	.+80     	; 0x7b0 <vfprintf+0x222>
 760:	f8 01       	movw	r30, r16
 762:	37 fe       	sbrs	r3, 7
 764:	07 c0       	rjmp	.+14     	; 0x774 <vfprintf+0x1e6>
 766:	60 81       	ld	r22, Z
 768:	71 81       	ldd	r23, Z+1	; 0x01
 76a:	82 81       	ldd	r24, Z+2	; 0x02
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	0c 5f       	subi	r16, 0xFC	; 252
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	08 c0       	rjmp	.+16     	; 0x784 <vfprintf+0x1f6>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	07 2e       	mov	r0, r23
 77a:	00 0c       	add	r0, r0
 77c:	88 0b       	sbc	r24, r24
 77e:	99 0b       	sbc	r25, r25
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	f3 2d       	mov	r31, r3
 786:	ff 76       	andi	r31, 0x6F	; 111
 788:	3f 2e       	mov	r3, r31
 78a:	97 ff       	sbrs	r25, 7
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x212>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	f0 68       	ori	r31, 0x80	; 128
 79e:	3f 2e       	mov	r3, r31
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	a3 01       	movw	r20, r6
 7a6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__ultoa_invert>
 7aa:	88 2e       	mov	r8, r24
 7ac:	86 18       	sub	r8, r6
 7ae:	45 c0       	rjmp	.+138    	; 0x83a <vfprintf+0x2ac>
 7b0:	85 37       	cpi	r24, 0x75	; 117
 7b2:	31 f4       	brne	.+12     	; 0x7c0 <vfprintf+0x232>
 7b4:	23 2d       	mov	r18, r3
 7b6:	2f 7e       	andi	r18, 0xEF	; 239
 7b8:	b2 2e       	mov	r11, r18
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	25 c0       	rjmp	.+74     	; 0x80a <vfprintf+0x27c>
 7c0:	93 2d       	mov	r25, r3
 7c2:	99 7f       	andi	r25, 0xF9	; 249
 7c4:	b9 2e       	mov	r11, r25
 7c6:	8f 36       	cpi	r24, 0x6F	; 111
 7c8:	c1 f0       	breq	.+48     	; 0x7fa <vfprintf+0x26c>
 7ca:	18 f4       	brcc	.+6      	; 0x7d2 <vfprintf+0x244>
 7cc:	88 35       	cpi	r24, 0x58	; 88
 7ce:	79 f0       	breq	.+30     	; 0x7ee <vfprintf+0x260>
 7d0:	b5 c0       	rjmp	.+362    	; 0x93c <__stack+0x3d>
 7d2:	80 37       	cpi	r24, 0x70	; 112
 7d4:	19 f0       	breq	.+6      	; 0x7dc <vfprintf+0x24e>
 7d6:	88 37       	cpi	r24, 0x78	; 120
 7d8:	21 f0       	breq	.+8      	; 0x7e2 <vfprintf+0x254>
 7da:	b0 c0       	rjmp	.+352    	; 0x93c <__stack+0x3d>
 7dc:	e9 2f       	mov	r30, r25
 7de:	e0 61       	ori	r30, 0x10	; 16
 7e0:	be 2e       	mov	r11, r30
 7e2:	b4 fe       	sbrs	r11, 4
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <vfprintf+0x272>
 7e6:	fb 2d       	mov	r31, r11
 7e8:	f4 60       	ori	r31, 0x04	; 4
 7ea:	bf 2e       	mov	r11, r31
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <vfprintf+0x272>
 7ee:	34 fe       	sbrs	r3, 4
 7f0:	0a c0       	rjmp	.+20     	; 0x806 <vfprintf+0x278>
 7f2:	29 2f       	mov	r18, r25
 7f4:	26 60       	ori	r18, 0x06	; 6
 7f6:	b2 2e       	mov	r11, r18
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x278>
 7fa:	28 e0       	ldi	r18, 0x08	; 8
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <vfprintf+0x27c>
 800:	20 e1       	ldi	r18, 0x10	; 16
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <vfprintf+0x27c>
 806:	20 e1       	ldi	r18, 0x10	; 16
 808:	32 e0       	ldi	r19, 0x02	; 2
 80a:	f8 01       	movw	r30, r16
 80c:	b7 fe       	sbrs	r11, 7
 80e:	07 c0       	rjmp	.+14     	; 0x81e <vfprintf+0x290>
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	0c 5f       	subi	r16, 0xFC	; 252
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	06 c0       	rjmp	.+12     	; 0x82a <vfprintf+0x29c>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	a3 01       	movw	r20, r6
 82c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__ultoa_invert>
 830:	88 2e       	mov	r8, r24
 832:	86 18       	sub	r8, r6
 834:	fb 2d       	mov	r31, r11
 836:	ff 77       	andi	r31, 0x7F	; 127
 838:	3f 2e       	mov	r3, r31
 83a:	36 fe       	sbrs	r3, 6
 83c:	0d c0       	rjmp	.+26     	; 0x858 <vfprintf+0x2ca>
 83e:	23 2d       	mov	r18, r3
 840:	2e 7f       	andi	r18, 0xFE	; 254
 842:	a2 2e       	mov	r10, r18
 844:	89 14       	cp	r8, r9
 846:	58 f4       	brcc	.+22     	; 0x85e <vfprintf+0x2d0>
 848:	34 fe       	sbrs	r3, 4
 84a:	0b c0       	rjmp	.+22     	; 0x862 <vfprintf+0x2d4>
 84c:	32 fc       	sbrc	r3, 2
 84e:	09 c0       	rjmp	.+18     	; 0x862 <vfprintf+0x2d4>
 850:	83 2d       	mov	r24, r3
 852:	8e 7e       	andi	r24, 0xEE	; 238
 854:	a8 2e       	mov	r10, r24
 856:	05 c0       	rjmp	.+10     	; 0x862 <vfprintf+0x2d4>
 858:	b8 2c       	mov	r11, r8
 85a:	a3 2c       	mov	r10, r3
 85c:	03 c0       	rjmp	.+6      	; 0x864 <vfprintf+0x2d6>
 85e:	b8 2c       	mov	r11, r8
 860:	01 c0       	rjmp	.+2      	; 0x864 <vfprintf+0x2d6>
 862:	b9 2c       	mov	r11, r9
 864:	a4 fe       	sbrs	r10, 4
 866:	0f c0       	rjmp	.+30     	; 0x886 <vfprintf+0x2f8>
 868:	fe 01       	movw	r30, r28
 86a:	e8 0d       	add	r30, r8
 86c:	f1 1d       	adc	r31, r1
 86e:	80 81       	ld	r24, Z
 870:	80 33       	cpi	r24, 0x30	; 48
 872:	21 f4       	brne	.+8      	; 0x87c <vfprintf+0x2ee>
 874:	9a 2d       	mov	r25, r10
 876:	99 7e       	andi	r25, 0xE9	; 233
 878:	a9 2e       	mov	r10, r25
 87a:	09 c0       	rjmp	.+18     	; 0x88e <vfprintf+0x300>
 87c:	a2 fe       	sbrs	r10, 2
 87e:	06 c0       	rjmp	.+12     	; 0x88c <vfprintf+0x2fe>
 880:	b3 94       	inc	r11
 882:	b3 94       	inc	r11
 884:	04 c0       	rjmp	.+8      	; 0x88e <vfprintf+0x300>
 886:	8a 2d       	mov	r24, r10
 888:	86 78       	andi	r24, 0x86	; 134
 88a:	09 f0       	breq	.+2      	; 0x88e <vfprintf+0x300>
 88c:	b3 94       	inc	r11
 88e:	a3 fc       	sbrc	r10, 3
 890:	11 c0       	rjmp	.+34     	; 0x8b4 <vfprintf+0x326>
 892:	a0 fe       	sbrs	r10, 0
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0x314>
 896:	b2 14       	cp	r11, r2
 898:	88 f4       	brcc	.+34     	; 0x8bc <vfprintf+0x32e>
 89a:	28 0c       	add	r2, r8
 89c:	92 2c       	mov	r9, r2
 89e:	9b 18       	sub	r9, r11
 8a0:	0e c0       	rjmp	.+28     	; 0x8be <vfprintf+0x330>
 8a2:	b2 14       	cp	r11, r2
 8a4:	60 f4       	brcc	.+24     	; 0x8be <vfprintf+0x330>
 8a6:	b6 01       	movw	r22, r12
 8a8:	80 e2       	ldi	r24, 0x20	; 32
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 8b0:	b3 94       	inc	r11
 8b2:	f7 cf       	rjmp	.-18     	; 0x8a2 <vfprintf+0x314>
 8b4:	b2 14       	cp	r11, r2
 8b6:	18 f4       	brcc	.+6      	; 0x8be <vfprintf+0x330>
 8b8:	2b 18       	sub	r2, r11
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <vfprintf+0x332>
 8bc:	98 2c       	mov	r9, r8
 8be:	21 2c       	mov	r2, r1
 8c0:	a4 fe       	sbrs	r10, 4
 8c2:	10 c0       	rjmp	.+32     	; 0x8e4 <vfprintf+0x356>
 8c4:	b6 01       	movw	r22, r12
 8c6:	80 e3       	ldi	r24, 0x30	; 48
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 8ce:	a2 fe       	sbrs	r10, 2
 8d0:	17 c0       	rjmp	.+46     	; 0x900 <__stack+0x1>
 8d2:	a1 fc       	sbrc	r10, 1
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <vfprintf+0x34e>
 8d6:	88 e7       	ldi	r24, 0x78	; 120
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x352>
 8dc:	88 e5       	ldi	r24, 0x58	; 88
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	b6 01       	movw	r22, r12
 8e2:	0c c0       	rjmp	.+24     	; 0x8fc <vfprintf+0x36e>
 8e4:	8a 2d       	mov	r24, r10
 8e6:	86 78       	andi	r24, 0x86	; 134
 8e8:	59 f0       	breq	.+22     	; 0x900 <__stack+0x1>
 8ea:	a1 fe       	sbrs	r10, 1
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <vfprintf+0x364>
 8ee:	8b e2       	ldi	r24, 0x2B	; 43
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <vfprintf+0x366>
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	a7 fc       	sbrc	r10, 7
 8f6:	8d e2       	ldi	r24, 0x2D	; 45
 8f8:	b6 01       	movw	r22, r12
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 900:	89 14       	cp	r8, r9
 902:	38 f4       	brcc	.+14     	; 0x912 <__stack+0x13>
 904:	b6 01       	movw	r22, r12
 906:	80 e3       	ldi	r24, 0x30	; 48
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 90e:	9a 94       	dec	r9
 910:	f7 cf       	rjmp	.-18     	; 0x900 <__stack+0x1>
 912:	8a 94       	dec	r8
 914:	f3 01       	movw	r30, r6
 916:	e8 0d       	add	r30, r8
 918:	f1 1d       	adc	r31, r1
 91a:	80 81       	ld	r24, Z
 91c:	b6 01       	movw	r22, r12
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 924:	81 10       	cpse	r8, r1
 926:	f5 cf       	rjmp	.-22     	; 0x912 <__stack+0x13>
 928:	22 20       	and	r2, r2
 92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
 92c:	42 ce       	rjmp	.-892    	; 0x5b2 <vfprintf+0x24>
 92e:	b6 01       	movw	r22, r12
 930:	80 e2       	ldi	r24, 0x20	; 32
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 be 04 	call	0x97c	; 0x97c <fputc>
 938:	2a 94       	dec	r2
 93a:	f6 cf       	rjmp	.-20     	; 0x928 <__stack+0x29>
 93c:	f6 01       	movw	r30, r12
 93e:	86 81       	ldd	r24, Z+6	; 0x06
 940:	97 81       	ldd	r25, Z+7	; 0x07
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0x49>
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	9f ef       	ldi	r25, 0xFF	; 255
 948:	2b 96       	adiw	r28, 0x0b	; 11
 94a:	e2 e1       	ldi	r30, 0x12	; 18
 94c:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__epilogue_restores__>

00000950 <strnlen_P>:
 950:	fc 01       	movw	r30, r24
 952:	05 90       	lpm	r0, Z+
 954:	61 50       	subi	r22, 0x01	; 1
 956:	70 40       	sbci	r23, 0x00	; 0
 958:	01 10       	cpse	r0, r1
 95a:	d8 f7       	brcc	.-10     	; 0x952 <strnlen_P+0x2>
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	8e 0f       	add	r24, r30
 962:	9f 1f       	adc	r25, r31
 964:	08 95       	ret

00000966 <strnlen>:
 966:	fc 01       	movw	r30, r24
 968:	61 50       	subi	r22, 0x01	; 1
 96a:	70 40       	sbci	r23, 0x00	; 0
 96c:	01 90       	ld	r0, Z+
 96e:	01 10       	cpse	r0, r1
 970:	d8 f7       	brcc	.-10     	; 0x968 <strnlen+0x2>
 972:	80 95       	com	r24
 974:	90 95       	com	r25
 976:	8e 0f       	add	r24, r30
 978:	9f 1f       	adc	r25, r31
 97a:	08 95       	ret

0000097c <fputc>:
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	fb 01       	movw	r30, r22
 986:	23 81       	ldd	r18, Z+3	; 0x03
 988:	21 fd       	sbrc	r18, 1
 98a:	03 c0       	rjmp	.+6      	; 0x992 <fputc+0x16>
 98c:	8f ef       	ldi	r24, 0xFF	; 255
 98e:	9f ef       	ldi	r25, 0xFF	; 255
 990:	2c c0       	rjmp	.+88     	; 0x9ea <fputc+0x6e>
 992:	22 ff       	sbrs	r18, 2
 994:	16 c0       	rjmp	.+44     	; 0x9c2 <fputc+0x46>
 996:	46 81       	ldd	r20, Z+6	; 0x06
 998:	57 81       	ldd	r21, Z+7	; 0x07
 99a:	24 81       	ldd	r18, Z+4	; 0x04
 99c:	35 81       	ldd	r19, Z+5	; 0x05
 99e:	42 17       	cp	r20, r18
 9a0:	53 07       	cpc	r21, r19
 9a2:	44 f4       	brge	.+16     	; 0x9b4 <fputc+0x38>
 9a4:	a0 81       	ld	r26, Z
 9a6:	b1 81       	ldd	r27, Z+1	; 0x01
 9a8:	9d 01       	movw	r18, r26
 9aa:	2f 5f       	subi	r18, 0xFF	; 255
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	31 83       	std	Z+1, r19	; 0x01
 9b0:	20 83       	st	Z, r18
 9b2:	8c 93       	st	X, r24
 9b4:	26 81       	ldd	r18, Z+6	; 0x06
 9b6:	37 81       	ldd	r19, Z+7	; 0x07
 9b8:	2f 5f       	subi	r18, 0xFF	; 255
 9ba:	3f 4f       	sbci	r19, 0xFF	; 255
 9bc:	37 83       	std	Z+7, r19	; 0x07
 9be:	26 83       	std	Z+6, r18	; 0x06
 9c0:	14 c0       	rjmp	.+40     	; 0x9ea <fputc+0x6e>
 9c2:	8b 01       	movw	r16, r22
 9c4:	ec 01       	movw	r28, r24
 9c6:	fb 01       	movw	r30, r22
 9c8:	00 84       	ldd	r0, Z+8	; 0x08
 9ca:	f1 85       	ldd	r31, Z+9	; 0x09
 9cc:	e0 2d       	mov	r30, r0
 9ce:	09 95       	icall
 9d0:	89 2b       	or	r24, r25
 9d2:	e1 f6       	brne	.-72     	; 0x98c <fputc+0x10>
 9d4:	d8 01       	movw	r26, r16
 9d6:	16 96       	adiw	r26, 0x06	; 6
 9d8:	8d 91       	ld	r24, X+
 9da:	9c 91       	ld	r25, X
 9dc:	17 97       	sbiw	r26, 0x07	; 7
 9de:	01 96       	adiw	r24, 0x01	; 1
 9e0:	17 96       	adiw	r26, 0x07	; 7
 9e2:	9c 93       	st	X, r25
 9e4:	8e 93       	st	-X, r24
 9e6:	16 97       	sbiw	r26, 0x06	; 6
 9e8:	ce 01       	movw	r24, r28
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	1f 91       	pop	r17
 9f0:	0f 91       	pop	r16
 9f2:	08 95       	ret

000009f4 <__ultoa_invert>:
 9f4:	fa 01       	movw	r30, r20
 9f6:	aa 27       	eor	r26, r26
 9f8:	28 30       	cpi	r18, 0x08	; 8
 9fa:	51 f1       	breq	.+84     	; 0xa50 <__ultoa_invert+0x5c>
 9fc:	20 31       	cpi	r18, 0x10	; 16
 9fe:	81 f1       	breq	.+96     	; 0xa60 <__ultoa_invert+0x6c>
 a00:	e8 94       	clt
 a02:	6f 93       	push	r22
 a04:	6e 7f       	andi	r22, 0xFE	; 254
 a06:	6e 5f       	subi	r22, 0xFE	; 254
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	af 4f       	sbci	r26, 0xFF	; 255
 a10:	b1 e0       	ldi	r27, 0x01	; 1
 a12:	3e d0       	rcall	.+124    	; 0xa90 <__ultoa_invert+0x9c>
 a14:	b4 e0       	ldi	r27, 0x04	; 4
 a16:	3c d0       	rcall	.+120    	; 0xa90 <__ultoa_invert+0x9c>
 a18:	67 0f       	add	r22, r23
 a1a:	78 1f       	adc	r23, r24
 a1c:	89 1f       	adc	r24, r25
 a1e:	9a 1f       	adc	r25, r26
 a20:	a1 1d       	adc	r26, r1
 a22:	68 0f       	add	r22, r24
 a24:	79 1f       	adc	r23, r25
 a26:	8a 1f       	adc	r24, r26
 a28:	91 1d       	adc	r25, r1
 a2a:	a1 1d       	adc	r26, r1
 a2c:	6a 0f       	add	r22, r26
 a2e:	71 1d       	adc	r23, r1
 a30:	81 1d       	adc	r24, r1
 a32:	91 1d       	adc	r25, r1
 a34:	a1 1d       	adc	r26, r1
 a36:	20 d0       	rcall	.+64     	; 0xa78 <__ultoa_invert+0x84>
 a38:	09 f4       	brne	.+2      	; 0xa3c <__ultoa_invert+0x48>
 a3a:	68 94       	set
 a3c:	3f 91       	pop	r19
 a3e:	2a e0       	ldi	r18, 0x0A	; 10
 a40:	26 9f       	mul	r18, r22
 a42:	11 24       	eor	r1, r1
 a44:	30 19       	sub	r19, r0
 a46:	30 5d       	subi	r19, 0xD0	; 208
 a48:	31 93       	st	Z+, r19
 a4a:	de f6       	brtc	.-74     	; 0xa02 <__ultoa_invert+0xe>
 a4c:	cf 01       	movw	r24, r30
 a4e:	08 95       	ret
 a50:	46 2f       	mov	r20, r22
 a52:	47 70       	andi	r20, 0x07	; 7
 a54:	40 5d       	subi	r20, 0xD0	; 208
 a56:	41 93       	st	Z+, r20
 a58:	b3 e0       	ldi	r27, 0x03	; 3
 a5a:	0f d0       	rcall	.+30     	; 0xa7a <__ultoa_invert+0x86>
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__ultoa_invert+0x5c>
 a5e:	f6 cf       	rjmp	.-20     	; 0xa4c <__ultoa_invert+0x58>
 a60:	46 2f       	mov	r20, r22
 a62:	4f 70       	andi	r20, 0x0F	; 15
 a64:	40 5d       	subi	r20, 0xD0	; 208
 a66:	4a 33       	cpi	r20, 0x3A	; 58
 a68:	18 f0       	brcs	.+6      	; 0xa70 <__ultoa_invert+0x7c>
 a6a:	49 5d       	subi	r20, 0xD9	; 217
 a6c:	31 fd       	sbrc	r19, 1
 a6e:	40 52       	subi	r20, 0x20	; 32
 a70:	41 93       	st	Z+, r20
 a72:	02 d0       	rcall	.+4      	; 0xa78 <__ultoa_invert+0x84>
 a74:	a9 f7       	brne	.-22     	; 0xa60 <__ultoa_invert+0x6c>
 a76:	ea cf       	rjmp	.-44     	; 0xa4c <__ultoa_invert+0x58>
 a78:	b4 e0       	ldi	r27, 0x04	; 4
 a7a:	a6 95       	lsr	r26
 a7c:	97 95       	ror	r25
 a7e:	87 95       	ror	r24
 a80:	77 95       	ror	r23
 a82:	67 95       	ror	r22
 a84:	ba 95       	dec	r27
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__ultoa_invert+0x86>
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	61 05       	cpc	r22, r1
 a8c:	71 05       	cpc	r23, r1
 a8e:	08 95       	ret
 a90:	9b 01       	movw	r18, r22
 a92:	ac 01       	movw	r20, r24
 a94:	0a 2e       	mov	r0, r26
 a96:	06 94       	lsr	r0
 a98:	57 95       	ror	r21
 a9a:	47 95       	ror	r20
 a9c:	37 95       	ror	r19
 a9e:	27 95       	ror	r18
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0xa2>
 aa4:	62 0f       	add	r22, r18
 aa6:	73 1f       	adc	r23, r19
 aa8:	84 1f       	adc	r24, r20
 aaa:	95 1f       	adc	r25, r21
 aac:	a0 1d       	adc	r26, r0
 aae:	08 95       	ret

00000ab0 <__prologue_saves__>:
 ab0:	2f 92       	push	r2
 ab2:	3f 92       	push	r3
 ab4:	4f 92       	push	r4
 ab6:	5f 92       	push	r5
 ab8:	6f 92       	push	r6
 aba:	7f 92       	push	r7
 abc:	8f 92       	push	r8
 abe:	9f 92       	push	r9
 ac0:	af 92       	push	r10
 ac2:	bf 92       	push	r11
 ac4:	cf 92       	push	r12
 ac6:	df 92       	push	r13
 ac8:	ef 92       	push	r14
 aca:	ff 92       	push	r15
 acc:	0f 93       	push	r16
 ace:	1f 93       	push	r17
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
 ad8:	ca 1b       	sub	r28, r26
 ada:	db 0b       	sbc	r29, r27
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	f8 94       	cli
 ae0:	de bf       	out	0x3e, r29	; 62
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	cd bf       	out	0x3d, r28	; 61
 ae6:	09 94       	ijmp

00000ae8 <__epilogue_restores__>:
 ae8:	2a 88       	ldd	r2, Y+18	; 0x12
 aea:	39 88       	ldd	r3, Y+17	; 0x11
 aec:	48 88       	ldd	r4, Y+16	; 0x10
 aee:	5f 84       	ldd	r5, Y+15	; 0x0f
 af0:	6e 84       	ldd	r6, Y+14	; 0x0e
 af2:	7d 84       	ldd	r7, Y+13	; 0x0d
 af4:	8c 84       	ldd	r8, Y+12	; 0x0c
 af6:	9b 84       	ldd	r9, Y+11	; 0x0b
 af8:	aa 84       	ldd	r10, Y+10	; 0x0a
 afa:	b9 84       	ldd	r11, Y+9	; 0x09
 afc:	c8 84       	ldd	r12, Y+8	; 0x08
 afe:	df 80       	ldd	r13, Y+7	; 0x07
 b00:	ee 80       	ldd	r14, Y+6	; 0x06
 b02:	fd 80       	ldd	r15, Y+5	; 0x05
 b04:	0c 81       	ldd	r16, Y+4	; 0x04
 b06:	1b 81       	ldd	r17, Y+3	; 0x03
 b08:	aa 81       	ldd	r26, Y+2	; 0x02
 b0a:	b9 81       	ldd	r27, Y+1	; 0x01
 b0c:	ce 0f       	add	r28, r30
 b0e:	d1 1d       	adc	r29, r1
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
 b1a:	ed 01       	movw	r28, r26
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
